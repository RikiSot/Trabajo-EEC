CCS PCD C Compiler, Version 5.091, 43599               30-dic.-20 17:59

               Filename:   C:\Users\Riki\OneDrive\Master\2º\SDM\Trabajo-EEC\eec.lst

               ROM used:   2164 bytes (2%)
                           Largest free fragment is 63372
               RAM used:   249 (2%) at main() level
                           318 (2%) worst case
               Stack used: 58 locations (20 in main + 38 for interrupts)
               Stack size: 144

00000:  GOTO    6AC
*
00022:  DATA    00,02,00
*
0004A:  DATA    24,02,00
.................... #import(file="adc.o")
.................... /**
.................... /**
....................  @file    adc.c
....................  @author  Ricardo Gomez
.................... 
....................  @brief   adc functions
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "lcd.h"
.................... /**
....................  @file    lcd.h
....................  @author  Ricardo Gï¿½mez
....................  @brief   LCD management
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __LCD_H
.................... #define __LCD_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... /* SECTION 1: Included header files to compile this file           */
.................... 
.................... /* SECTION 2: Public macros                                        */
.................... 
.................... #define _CLEAR_DISPLAY 				0x01
.................... #define _8BIT_4LINES_NORMAL_RE1_IS0		0x3A
.................... #define _8BIT_4LINES_REVERSE_RE1_IS0		0x3B
.................... #define _8BIT_4LINES_RE0_IS1			0x39
.................... #define _8BIT_4LINES_RE0_IS0			0x38
.................... 
.................... #define _BS1_1					0x1E
.................... #define _POWER_DOWN_DISABLE			0x02
.................... #define _SEGMENT_NORMAL_WAY			0x05
.................... #define _NW					0x09
.................... 
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_ON		0x0F
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_OFF		0x0E
.................... #define _DISPLAY_ON_CURSOR_OFF_BLINK_OFF	0x0C
.................... #define _BS0_1					0x1C
.................... #define _INTERNAL_DIVIDER			0x13
.................... #define _CONTRAST				0x77
.................... #define _POWER_ICON_CONTRAST			0x5C
.................... #define _FOLLOWER_CONTROL			0x6E
.................... 
.................... #define ADDRESS_DDRAM				0x80
.................... 
.................... 
.................... /* SECTION 3: Public types                                         */
.................... 
.................... 
.................... /* SECTION 4: Public variables :: declarations, extern mandatory   */
.................... 
.................... 
.................... /* SECTION 5: Public functions :: declarations, extern optional
....................    Rule exception (callbacks)  :: declarations, extern recommended */
.................... void display_valueADC_title(void);
.................... void LCD_command(unsigned int8);
.................... void lcdi2cinit(void);
.................... void LCD_write(char*);
.................... void initmenu(void);                                      //Inicializa el menu principal
.................... void display_frecuencia(void);       // Muestra frecuencia
.................... void LCD_cursor_at(unsigned int8 line, unsigned int8 column);
.................... 
.................... 
.................... #endif // __LCD_H
.................... // Do not write below this line!
.................... 
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #nolist
.................... //////// Program memory: 44032x24  Data RAM: 16384  Stack: 31
.................... //////// I/O: 35   Analog Pins: 9
.................... //////// Fuses: WRTB,NOWRTB,BSSHL,BSSHM,BSSHS,BSSSL,BSSSM,BSSSS,NOBSS
.................... //////// Fuses: RBS1024,RBS256,RBS128,NORBS,WRTSS,NOWRTSS,SSSHL,SSSHM,SSSHS
.................... //////// Fuses: SSSSL,SSSSM,SSSSS,NOSSS,RSS4096,RSS2048,RSS256,NORSS,WRT
.................... //////// Fuses: NOWRT,PROTECT_HIGH,PROTECT,NOPROTECT,FRC,FRC_PLL,PR,PR_PLL
.................... //////// Fuses: SOSC,LPRC,FRC_DIV_BY_16,FRC_PS,NOIESO,IESO,EC,XT,HS,NOPR
.................... //////// Fuses: OSCIO,NOOSCIO,NOIOL1WAY,IOL1WAY,CKSFSM,CKSNOFSM,NOCKSFSM
.................... //////// Fuses: WPOSTS1,WPOSTS2,WPOSTS3,WPOSTS4,WPOSTS5,WPOSTS6,WPOSTS7
.................... //////// Fuses: WPOSTS8,WPOSTS9,WPOSTS10,WPOSTS11,WPOSTS12,WPOSTS13,WPOSTS14
.................... //////// Fuses: WPOSTS15,WPOSTS16,WPRES32,WPRES128,NOWINDIS,WINDIS,NOWDT,WDT
.................... //////// Fuses: NOPUT,PUT2,PUT4,PUT8,PUT16,PUT32,PUT64,PUT128,ALTI2C1
.................... //////// Fuses: NOALTI2C1,LPOL_LOW,LPOL_HIGH,HPOL_LOW,HPOL_HIGH,PWMPIN
.................... //////// Fuses: NOPWMPIN,ICSP3,ICSP2,ICSP1,NOJTAG,JTAG,DEBUG,NODEBUG
.................... ////////
.................... #if (!defined(__PCD__)||defined(__ISNT_CCS__))
.................... #define _bif
.................... #define int8 char
.................... #define int16 int
.................... #define int32 long
.................... #define int48 long
.................... #define int64 long long
.................... #define float32 float
.................... #define float48 float
.................... #define float64 double
.................... #define int1 char
.................... 
.................... #endif
.................... ////////////////////////////////////////////////////////////////// PIN_SELECT
.................... // #pin_select function=pin
.................... // Valid Pins:
.................... //    PIN_B0,PIN_B1,PIN_B2,PIN_B3,PIN_B4,PIN_B5,PIN_B6,PIN_B7,PIN_B8,PIN_B9,
.................... //    PIN_B10,PIN_B11,PIN_B12,PIN_B13,PIN_B14,PIN_B15,PIN_C0,PIN_C1,PIN_C2,
.................... //    PIN_C3,PIN_C4,PIN_C5,PIN_C6,PIN_C7,PIN_C8,PIN_C9
.................... // Input Functions:
.................... //    INT1,INT2,T2CK,T3CK,T4CK,T5CK,IC1,IC2,IC3,IC4,IC5,OCFA,OCFB,U1RX,U1CTS,
.................... //    U2RX,U2CTS,SDI1,SCK1IN,SS1IN,SDI2,SCK2IN,SS2IN,C1RX,IC7,IC8,CSDI,CSCK,COFS,
.................... //    FLTA1,FLTA2,QEA1,QEB1,INDX1,QEA2,QEB2,INDX2,T1CK,FLT1,FLT2,FLT3,FLT4,FLT5,
.................... //    FLT6,FLT7,FLT8,SYNCI1,SYNCI2
.................... // Output Functions:
.................... //    NULL,C1OUT,C2OUT,U1TX,U1RTS,U2TX,U2RTS,SDO1,SCK1OUT,SS1OUT,SDO2,SCK2OUT,
.................... //    SS2OUT,OC1,OC2,OC3,OC4,OC5,C1TX,CSDO,CSCKOUT,COFSOUT,UPDN1,UPDN2,CTPLS,
.................... //    C3OUT,SYNCO1,REFCLKO,CMP1,CMP2,CMP3,CMP4,PWM4H,PWM4L
.................... //
.................... 
.................... ////////////////////////////////////////////////////////////////// I/O
.................... // Discrete I/O Functions: SET_TRIS_x(), OUTPUT_x(), INPUT_x(),
.................... //                         SET_PULLUP(), INPUT(),
.................... //                         OUTPUT_LOW(), OUTPUT_HIGH(),
.................... //                         OUTPUT_FLOAT(), OUTPUT_BIT()
.................... // Discrete I/O Prototypes:
.................... _bif void set_tris_a(unsigned int16 value);
.................... _bif void set_tris_b(unsigned int16 value);
.................... _bif void set_tris_c(unsigned int16 value);
.................... _bif unsigned int16 get_tris_a(void);
.................... _bif unsigned int16 get_tris_b(void);
.................... _bif unsigned int16 get_tris_c(void);
.................... _bif void output_a(unsigned int16 value);
.................... _bif void output_b(unsigned int16 value);
.................... _bif void output_c(unsigned int16 value);
.................... _bif unsigned int16 input_a(void);
.................... _bif unsigned int16 input_b(void);
.................... _bif unsigned int16 input_c(void);
.................... _bif int16 input_change_a(void);
.................... _bif int16 input_change_b(void);
.................... _bif int16 input_change_c(void);
.................... _bif void set_pullup(int1 state);
.................... _bif void set_pullup(int1 state, unsigned int16 pin);
.................... _bif void set_pulldown(int1 state);
.................... _bif void set_pulldown(int1 state, unsigned int16 pin);
.................... _bif int1 input(unsigned int16 pin);
.................... _bif int1 input_state(unsigned int16 pin);
.................... _bif void output_low(unsigned int16 pin);
.................... _bif void output_high(unsigned int16 pin);
.................... _bif void output_toggle(unsigned int16 pin);
.................... _bif void output_bit(unsigned int16 pin, int1 level);
.................... _bif void output_float(unsigned int16 pin);
.................... _bif void output_drive(unsigned int16 pin);
.................... // Constants used to identify pins in the above are:
.................... 
.................... #define PIN_A0  5648
.................... #define PIN_A1  5649
.................... #define PIN_A2  5650
.................... #define PIN_A3  5651
.................... #define PIN_A4  5652
.................... #define PIN_A7  5655
.................... #define PIN_A8  5656
.................... #define PIN_A9  5657
.................... #define PIN_A10  5658
.................... 
.................... #define PIN_B0  5712
.................... #define PIN_B1  5713
.................... #define PIN_B2  5714
.................... #define PIN_B3  5715
.................... #define PIN_B4  5716
.................... #define PIN_B5  5717
.................... #define PIN_B6  5718
.................... #define PIN_B7  5719
.................... #define PIN_B8  5720
.................... #define PIN_B9  5721
.................... #define PIN_B10  5722
.................... #define PIN_B11  5723
.................... #define PIN_B12  5724
.................... #define PIN_B13  5725
.................... #define PIN_B14  5726
.................... #define PIN_B15  5727
.................... 
.................... #define PIN_C0  5776
.................... #define PIN_C1  5777
.................... #define PIN_C2  5778
.................... #define PIN_C3  5779
.................... #define PIN_C4  5780
.................... #define PIN_C5  5781
.................... #define PIN_C6  5782
.................... #define PIN_C7  5783
.................... #define PIN_C8  5784
.................... #define PIN_C9  5785
.................... 
.................... ////////////////////////////////////////////////////////////////// Useful defines
.................... #define FALSE 0
.................... #define TRUE 1
.................... 
.................... #define BYTE unsigned int8
.................... #define BOOLEAN int1
.................... 
.................... #define getc getch
.................... #define fgetc getch
.................... #define getchar getch
.................... #define putc putchar
.................... #define fputc putchar
.................... #define fgets gets
.................... #define fputs puts
.................... 
.................... ////////////////////////////////////////////////////////////////// UART
.................... // UART Prototypes:
.................... _bif void setup_uart(unsigned int32 baud);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... _bif void set_uart_speed(unsigned int32 baud);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... // Constants used in setup_uart() are:
.................... // FALSE - Turn UART off
.................... // TRUE  - Turn UART on
.................... #define UART_ADDRESS           2
.................... #define UART_DATA              4
.................... #define UART_AUTODETECT        8
.................... #define UART_AUTODETECT_NOWAIT 9
.................... #define UART_WAKEUP_ON_RDA     10
.................... #define UART_SEND_BREAK        13
.................... 
.................... ////////////////////////////////////////////////////////////////// WDT
.................... // Watch Dog Timer Functions: SETUP_WDT() and RESTART_WDT()
.................... // WDT Prototypes:
.................... _bif void setup_wdt(unsigned int8 mode);
.................... _bif void restart_wdt(void);
.................... // Constants used for SETUP_WDT() are:
.................... #define WDT_ON      1
.................... #define WDT_OFF     0
.................... 
.................... #define  WDT_1MS    0x002
.................... #define  WDT_2MS    0x003
.................... #define  WDT_4MS    0x004
.................... #define  WDT_8MS    0x005
.................... #define  WDT_16MS   0x006
.................... #define  WDT_32MS   0x007
.................... #define  WDT_64MS   0x008
.................... #define  WDT_128MS  0x009
.................... #define  WDT_256MS  0x00A
.................... #define  WDT_512MS  0x00B
.................... #define  WDT_1S     0x00C
.................... #define  WDT_2S     0x00D
.................... #define  WDT_4S     0x00E
.................... #define  WDT_8S     0x00F
.................... #define  WDT_16S    0x010
.................... #define  WDT_33S    0x011
.................... #define  WDT_65S    0x030
.................... #define  WDT_131S   0x031
.................... 
.................... ////////////////////////////////////////////////////////////////// Control
.................... // Control Functions:  RESET_CPU(), SLEEP(), RESTART_CAUSE()
.................... // Prototypes:
.................... _bif unsigned int8 restart_cause(void);
.................... _bif void reset_cpu(void);
.................... _bif void sleep(void);
.................... _bif void sleep(unsigned int8 mode);
.................... // Constants passed into RESTART_CAUSE() are:
.................... #define RESTART_POWER_UP      0
.................... #define RESTART_BROWNOUT      1
.................... #define RESTART_WATCHDOG      4
.................... #define RESTART_SOFTWARE      6
.................... #define RESTART_MCLR          7
.................... #define RESTART_ILLEGAL_OP    14
.................... #define RESTART_TRAP_CONFLICT 15
.................... //
.................... // Constants passed into SLEEP() are:
.................... #define SLEEP_FULL      0  // Default
.................... #define SLEEP_IDLE      1  // Clock and peripherals don't stop
.................... 
.................... ////////////////////////////////////////////////////////////////// INTERNAL RC
.................... // Oscillator Prototypes:
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target);
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target, unsigned int32 source);
.................... // Constants used in setup_oscillator() are:
.................... #define OSC_INTERNAL     32
.................... #define OSC_CRYSTAL       1
.................... #define OSC_CLOCK         2
.................... #define OSC_RC            3
.................... #define OSC_SECONDARY    16
.................... 
.................... ////////////////////////////////////////////////////////////////// Timer
.................... // Timer Functions: SETUP_TIMERx, GET_TIMERx, GET_TIMERxy,
.................... // SET_TIMERx, SET_TIMERxy
.................... // Timer x Prototypes:
.................... _bif void setup_timer1(unsigned int16 mode);
.................... _bif void setup_timer1(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer1(void);
.................... _bif void set_timer1(unsigned int16 value);
.................... _bif void setup_timer2(unsigned int16 mode);
.................... _bif void setup_timer2(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer2(void);
.................... _bif void set_timer2(unsigned int16 value);
.................... _bif void setup_timer3(unsigned int16 mode);
.................... _bif void setup_timer3(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer3(void);
.................... _bif void set_timer3(unsigned int16 value);
.................... _bif unsigned int32 get_timer23(void);
.................... _bif void set_timer23(unsigned int32 value);
.................... _bif void setup_timer4(unsigned int16 mode);
.................... _bif void setup_timer4(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer4(void);
.................... _bif void set_timer4(unsigned int16 value);
.................... _bif void setup_timer5(unsigned int16 mode);
.................... _bif void setup_timer5(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer5(void);
.................... _bif void set_timer5(unsigned int16 value);
.................... _bif unsigned int32 get_timer45(void);
.................... _bif void set_timer45(unsigned int32 value);
.................... // Constants used for SETUP_TIMERx() are:
.................... //      (or (via |) together constants from each group)
.................... #define TMR_DISABLED 0x0000
.................... #define TMR_INTERNAL 0x8000
.................... #define TMR_EXTERNAL 0x8002
.................... #define TMR_GATE     0x0040
.................... 
.................... #define TMR_DIV_BY_1   0x0000
.................... #define TMR_DIV_BY_8   0x0010
.................... #define TMR_DIV_BY_64  0x0020
.................... #define TMR_DIV_BY_256 0x0030
.................... #define TMR_32_BIT     0x0008 // Only for even numbered timers
.................... 
.................... #define TMR_HALT_IDLE      0x2000
.................... #define TMR_CONTINUE_IDLE  0x0000
.................... 
.................... #define T1_EXTERNAL_SYNC  0x8006 //This only applies to Timer1
.................... #define T1_EXTERNAL_RTC   0xC002 //This only applies to Timer1
.................... /////////////////////////////////////////////////////////// INPUT CAPTURE
.................... // Functions: SETUP_CAPTURE, GET_CAPTURE,
.................... // IC Prototypes:
.................... _bif void setup_capture(unsigned int8 module, unsigned int16 mode);
.................... _bif unsigned int16 get_capture(unsigned int8 module);
.................... _bif unsigned int16 get_capture(unsigned int8 module, int1 wait);
.................... // Constants used for SETUP_CAPTURE() are:
.................... #define CAPTURE_OFF               0x0000  // Capture OFF
.................... #define CAPTURE_EE                0x0001  // Capture Every Edge
.................... #define CAPTURE_FE                0x0002  // Capture Falling Edge
.................... #define CAPTURE_RE                0x0003  // Capture Rising Edge
.................... #define CAPTURE_DIV_4             0x0004  // Capture Every 4th Rising Edge
.................... #define CAPTURE_DIV_16            0x0005  // Capture Every 16th Rising Edge
.................... #define CAPTURE_INTERRUPT_ONLY    0x0007  // Interrupt on Rising Edge when in Sleep or Idle
.................... 
.................... // The following defines can be ORed | with above to configure interrupts
.................... #define INTERRUPT_EVERY_CAPTURE   0x0000  // Interrupt on every capture event
.................... #define INTERRUPT_SECOND_CAPTURE  0x0020  // Interrupt on every second capture event
.................... #define INTERRUPT_THIRD_CAPTURE   0x0040  // Interrupt on every third capture event
.................... #define INTERRUPT_FOURTH_CAPTURE  0x0060  // Interrupt on every fourth capture event
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define CAPTURE_TIMER2            0x0080  // On capture event Timer 2 is captured
.................... #define CAPTURE_TIMER3            0x0000  // On capture event Timer 3 is captured
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define CAPTURE_HALT_IDLE         0x2000  // Capture module halts during idle mode
.................... #define CAPTURE_CONTINUE_IDLE     0x0000  // Capture module continues during idle mode
.................... 
.................... /////////////////////////////////////////////////////////// OUTPUT COMPARE
.................... // Functions: SETUP_COMPARE, SET_PWM_DUTY, SET_COMPARE_TIME
.................... // OC Prototypes:
.................... _bif void setup_compare(unsigned int8 module, unsigned int16 mode);
.................... _bif void set_pwm_duty(unsigned int8 module, unsigned int16 duty);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr, unsigned int16 ocrs);
.................... // Constants used for SETUP_COMPARE() are:
.................... #define COMPARE_OFF               0x0000  // Compare OFF
.................... #define COMPARE_SET_ON_MATCH      0x0001  // Pin from low to high on match
.................... #define COMPARE_CLR_ON_MATCH      0x0002  // Pin from high to low on match
.................... #define COMPARE_TOGGLE            0x0003  // Pin will toggle on every match occurrence
.................... #define COMPARE_SINGLE_PULSE      0x0004  // Pin will generate single pulse on first match
.................... #define COMPARE_CONT_PULSE        0x0005  // Pin will pulse for every match
.................... #define COMPARE_PWM               0x0006  // Compare operates as PWM with fault pin disabled
.................... #define COMPARE_PWM_FAULT         0x0007  // Compare operates as PWM with fault pin enabled
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define COMPARE_TIMER2            0x0000  // Timer 2 is the base timer
.................... #define COMPARE_TIMER3            0x0008  // Timer 3 is the base timer
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define COMPARE_HALT_IDLE         0x2000  // Compare module halts during idle mode
.................... #define COMPARE_CONTINUE_IDLE     0x0000  // Compare module continues during idle mode
.................... 
.................... ////////////////////////////////////////////////////////////////// SPI
.................... // SPI Functions: SETUP_SPI, SPI_WRITE, SPI_READ, SPI_DATA_IN
.................... // SPI Prototypes:
.................... _bif void setup_spi(unsigned int16 mode);
.................... _bif void spi_write(unsigned int8 data);
.................... _bif void spi_write(int1 wait, unsigned int8 data);
.................... _bif void spi_write_16(unsigned int16 data);
.................... _bif void spi_write_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read(void);
.................... _bif unsigned int8 spi_read(unsigned int8 data);
.................... _bif unsigned int16 spi_read_16(void);
.................... _bif unsigned int16 spi_read_16(unsigned int16 data);
.................... _bif int1 spi_data_in(void);
.................... _bif void setup_spi2(unsigned int16 mode);
.................... _bif void spi_write2(unsigned int8 data);
.................... _bif void spi_write2(int1 wait, unsigned int8 data);
.................... _bif void spi_write2_16(unsigned int16 data);
.................... _bif void spi_write2_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read2(void);
.................... _bif unsigned int8 spi_read2(unsigned int8 data);
.................... _bif unsigned int16 spi_read2_16(void);
.................... _bif unsigned int16 spi_read2_16(unsigned int16 data);
.................... _bif int1 spi_data_in2(void);
.................... // Constants used in SETUP_SPI() are:
.................... //      (or (via |) together constants from each group)
.................... #define SPI_MASTER                 0x0020
.................... #define SPI_SLAVE                  0x0000
.................... 
.................... #define SPI_SCK_IDLE_HIGH          0x0040
.................... #define SPI_SCK_IDLE_LOW           0x0000
.................... 
.................... #define SPI_XMIT_L_TO_H            0x0100
.................... #define SPI_XMIT_H_TO_L            0x0000
.................... 
.................... #define SPI_MODE_16B               0x0400
.................... #define SPI_MODE_8B                0x0000
.................... 
.................... #define SPI_SAMPLE_AT_END          0x0200
.................... #define SPI_SAMPLE_AT_MIDDLE       0x0000
.................... 
.................... #define SPI_SS_ENABLED             0x0000
.................... #define SPI_SS_DISABLED            0x0080
.................... 
.................... //or (via |) one of the following when operating as MASTER
.................... #define SPI_CLK_DIV_1              0x001F
.................... #define SPI_CLK_DIV_2              0x001B
.................... #define SPI_CLK_DIV_3              0x0017
.................... #define SPI_CLK_DIV_4              0x001E
.................... #define SPI_CLK_DIV_5              0x000F
.................... #define SPI_CLK_DIV_6              0x000B
.................... #define SPI_CLK_DIV_7              0x0007
.................... #define SPI_CLK_DIV_8              0x0003
.................... #define SPI_CLK_DIV_12             0x0016
.................... #define SPI_CLK_DIV_16             0x001D
.................... #define SPI_CLK_DIV_20             0x000E
.................... #define SPI_CLK_DIV_24             0x000A
.................... #define SPI_CLK_DIV_28             0x0006
.................... #define SPI_CLK_DIV_32             0x0002
.................... #define SPI_CLK_DIV_48             0x0015
.................... #define SPI_CLK_DIV_64             0x001C
.................... #define SPI_CLK_DIV_80             0x000D
.................... #define SPI_CLK_DIV_96             0x0009
.................... #define SPI_CLK_DIV_112            0x0005
.................... #define SPI_CLK_DIV_128            0x0001
.................... #define SPI_CLK_DIV_192            0x0014
.................... #define SPI_CLK_DIV_256            0x0010
.................... #define SPI_CLK_DIV_320            0x000C
.................... #define SPI_CLK_DIV_384            0x0008
.................... #define SPI_CLK_DIV_448            0x0004
.................... #define SPI_CLK_DIV_512            0x0000
.................... 
.................... //The following defines are provided for compatibility
.................... #define SPI_L_TO_H         SPI_SCK_IDLE_LOW
.................... #define SPI_H_TO_L         SPI_SCK_IDLE_HIGH
.................... 
.................... ////////////////////////////////////////////////////////////////// ADC
.................... // ADC Functions: SETUP_ADC(), SETUP_ADC_PORTS()
.................... //                SET_ADC_CHANNEL(), READ_ADC()
.................... // ADC Prototypes:
.................... _bif void setup_adc(unsigned int32 mode);
.................... _bif void setup_adc_ports(unsigned int32 pins);
.................... _bif void setup_adc_ports(unsigned int32 pins, unsigned int16 reference);
.................... _bif void set_adc_channel(unsigned int8 channel);
.................... _bif void set_adc_channel(unsigned int8 channel, unsigned int8 neg_channel);
.................... _bif unsigned int16 read_adc(void);
.................... _bif unsigned int16 read_adc(unsigned int8 mode);
.................... _bif int1 adc_done(void);
.................... // Constants used for SETUP_ADC() are:
.................... // Clock is at ADCS<5:0> of ADCON3 Reg. (0x02A4)
.................... // Tad = (Tcy/2)*(ADCS<5:0>+1)
.................... #define ADC_OFF                 0x10000
.................... #define ADC_CLOCK                0x0000
.................... #define ADC_CLOCK_DIV_2          0x0001
.................... #define ADC_CLOCK_DIV_4          0x0003
.................... #define ADC_CLOCK_DIV_8          0x0007
.................... #define ADC_CLOCK_DIV_16         0x000F
.................... #define ADC_CLOCK_DIV_32         0x001F
.................... #define ADC_CLOCK_DIV_64         0x003F
.................... #define ADC_CLOCK_INTERNAL       0x8000     // Internal
.................... 
.................... // One of the following may be OR'ed in with the above using |
.................... // Auto-Sample Time bits
.................... #define ADC_TAD_MUL_0            0x1F00
.................... #define ADC_TAD_MUL_2            0x1D00
.................... #define ADC_TAD_MUL_4            0x1B00
.................... #define ADC_TAD_MUL_8            0x1700
.................... #define ADC_TAD_MUL_16           0x0F00
.................... #define ADC_TAD_MUL_31           0x0000
.................... 
.................... // Constants used in READ_ADC() are:
.................... #define ADC_START_AND_READ       0x07
.................... #define ADC_START_ONLY           0x01
.................... #define ADC_READ_ONLY            0x06
.................... 
.................... // Constants used in SET_ADC_CHANNEL() second parameter are:
.................... #define VSS                      0
.................... 
.................... // Constants used in SETUP_ADC_PORTS() are:
.................... // First argument:
.................... // OR together desired pins
.................... #define NO_ANALOGS      0           // None
.................... #define ALL_ANALOG      0xFFFFFFFF  // All
.................... #define sAN0      0x00000001 //| A0
.................... #define sAN1      0x00000002 //| A1
.................... #define sAN2      0x00000004 //| B0
.................... #define sAN3      0x00000008 //| B1
.................... #define sAN4      0x00000010 //| B2
.................... #define sAN5      0x00000020 //| B3
.................... #define sAN6      0x00000040 //| C0
.................... #define sAN7      0x00000080 //| C1
.................... #define sAN8      0x00000100 //| C2
.................... 
.................... // Optional Second argument:
.................... #define VSS_VDD            0x0000 // Range 0-Vdd
.................... #define VREF_VREF          0x6000 // Range VrefL-VrefH
.................... #define VREF_VDD           0x4000 // Range VrefL-Vdd
.................... #define VSS_VREF           0x2000 // Range 0-VrefH
.................... 
.................... ////////////////////////////////////////////////////////////////// COMP
.................... // Comparator Functions: setup_comparator()
.................... // Comparator Variables: C1OUT, C2OUT
.................... // Comparator Prototypes:
.................... _bif void setup_comparator(unsigned int16 mode);
.................... // Constants used in setup_comparator() are:
.................... #define NC_NC_NC_NC      0
.................... #define B2_B3_NC_NC      0x401
.................... #define B2_VR_NC_NC      0x400
.................... #define B3_VR_NC_NC      0x402
.................... #define NC_NC_B0_B1      0x804
.................... #define NC_NC_B0_VR      0x800
.................... #define NC_NC_B1_VR      0x808
.................... #define B2_B3_B0_B1      B2_B3_NC_NC | NC_NC_B0_B1
.................... #define B2_VR_B0_VR      B2_VR_NC_NC | NC_NC_B0_VR
.................... #define B3_VR_B1_VR      B3_VR_NC_NC | NC_NC_B1_VR
.................... 
.................... #define C1_INVERT     0x10
.................... #define C2_INVERT     0x20
.................... #define C1_OUTPUT     0x100
.................... #define C2_OUTPUT     0x200
.................... 
.................... #bit C1OUT = getenv("SFR:CMCON").6
.................... #bit C2OUT = getenv("SFR:CMCON").7
.................... 
.................... ////////////////////////////////////////////////////////////////// VREF
.................... // VREF Prototypes:
.................... _bif void setup_vref(unsigned int16 mode);
.................... // Constants used in setup_vref() are:
.................... #define VREF_DISABLED  0x0000
.................... #define VREF_VSS_VDD   0x0080
.................... #define VREF_ANALOG    0x0090
.................... // One of the following maybe OR'ed in with the above using |
.................... #define VREF_HIGH      0x0080
.................... #define VREF_LOW       0x00A0
.................... // The following maybe OR'ed in with the above using |
.................... #define VREF_OUTPUT    0x0040
.................... // Or (with |) the above with a number 0-15
.................... 
.................... ////////////////////////////////////////////////////////////////// PMP
.................... // PMP Functions: setup_pmp(), pmp_address(), psp_read(), pmp_read(),
.................... // psp_write(), pmp_write(), psp_output_full(),psp_input_full(),
.................... // psp_overflow(), pmp_output_full(), pmp_input_full(),
.................... // pmp_overflow()
.................... // PMP Prototypes:
.................... _bif void setup_pmp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif void pmp_address(unsigned int16 address);
.................... _bif unsigned int8 pmp_read(void);
.................... _bif void pmp_write(unsigned int8 data);
.................... _bif int1 pmp_output_full(void);
.................... _bif int1 pmp_input_full(void);
.................... _bif int1 pmp_overflow(void);
.................... _bif void setup_psp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif unsigned int8 psp_read(void);
.................... _bif unsigned int8 psp_read(unsigned int16 address);
.................... _bif void psp_write(unsigned int8 data);
.................... _bif void psp_write(unsigned int8 data, unsigned int16 address);
.................... _bif int1 psp_output_full(void);
.................... _bif int1 psp_input_full(void);
.................... _bif int1 psp_overflow(void);
.................... // Constants used in SETUP_PMP() and SETUP_PSP() are:
.................... #define PAR_ENABLE                0x8000
.................... #define PAR_DISABLE               0x0000    // Module enable/disable options
.................... #define PAR_STOP_IN_IDLE          0x2000
.................... #define PAR_CONTINUE_IN_IDLE      0x0000
.................... #define PAR_ADDR_NOT_MULTIPLEXED  0x0000    // Address multiplexing options
.................... #define PAR_LOW_ADDR_MULTIPLEXED  0x0800    // Address multiplexing options
.................... #define PAR_FULL_ADDR_MULTIPLEXED 0x1000    // Address multiplexing options
.................... #define PAR_PTBEEN_ENABLE         0x0400  // Byte Enable Port Enable bit
.................... #define PAR_PTWREN_ENABLE         0x0200  // Write Enable Strobe bit
.................... #define PAR_PTRDEN_ENABLE         0x0100  // Read/Write Strobe Port bit
.................... #define PAR_ALP_ACTIVE_HIGH       0x0020 // Address latch polarity high
.................... #define PAR_BEP_ACTIVE_HIGH       0x0004 // Byte Enable Polarity
.................... #define PAR_WRSP_ACTIVE_HIGH      0x0002 // Write strobe Polarity bit
.................... #define PAR_RDSP_ACTIVE_HIGH      0x0001 // Read strobe Polarity bit
.................... #define PAR_CS_XX                 0x0000   // Chip select pins used for address
.................... #define PAR_CS_X1                 0x0008   // Chip select pin 1 used, active high
.................... #define PAR_CS_X0                 0x0000   // Chip select pin 1 used, active low
.................... #define PAR_CS_1X                 0x0050   // Chip select pin 2 used, active high
.................... #define PAR_CS_0X                 0x0040   // Chip select pin 2 used, active low
.................... #define PAR_CS_00                 0x0080   // Chip select pins 1,2 used, active low
.................... #define PAR_CS_11                 0x0098   // Chip select pins 1,2 used, active high
.................... #define PAR_CS_10                 0x0090   // Chip select pins 1,2 used, 1 is active low, 2 is high
.................... #define PAR_CS_01                 0x0088   // Chip select pins 1,2 used, 1 is active high, 2 is low
.................... #define PAR_INTR_ON_RW                0x20000000  // Interrupt on read write
.................... #define PAR_NO_INTR_STALL_ACTIVATED   0x40000000  // No interrupt, processor stall activated
.................... #define PAR_INTR_ON_3_RW_BUF          0x60000000 // Interrupt on write to Buffer 3 or read from Buffer 3
.................... #define PAR_PSP_AUTO_INC              0x18000000 // Read write buffers auto increment
.................... #define PAR_DEC_ADDR                  0x10000000 // Increment the address
.................... #define PAR_INC_ADDR                  0x08000000 // Decrement the address
.................... #define PAR_MASTER_MODE_1             0x03000000  // Master mode 1
.................... #define PAR_MASTER_MODE_2             0x02000000  // Master mode 2
.................... #define PAR_WAITB1                    0x00000000 // 1 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB2                    0x00400000 // 2 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB3                    0x00800000 // 3 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB4                    0x00C00000 // 4 Tcy Wait state for data setup R/W
.................... #define PAR_WAITM0                    0x00000000 // 0 wait state for Read to byte
.................... #define PAR_WAITM1                    0x00040000 // 1 Tcy wait state for Read to byte
.................... #define PAR_WAITM2                    0x00080000 // 2 Tcy wait state for Read to byte
.................... #define PAR_WAITM3                    0x000C0000 // 3 Tcy wait state for Read to byte
.................... #define PAR_WAITM15                   0x003C0000 // 15 wait states
.................... #define PAR_WAITE1                    0x00000000  // 1 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE2                    0x00010000 // 2 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE3                    0x00020000 // 3 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE4                    0x00030000 // 4 Tcy Wait for data hold after strobe
.................... 
.................... ////////////////////////////////////////////////////////////////// CRC
.................... // CRC Functions: setup_crc(), crc_init(), crc_calc(), crc_calc8()
.................... // CRC Prototypes:
.................... _bif void setup_crc(unsigned int8 poly_terms, ...);
.................... _bif void crc_init(unsigned int16 value);
.................... _bif unsigned int16 crc_calc(unsigned int16 data);
.................... _bif unsigned int16 crc_calc(unsigned int16 *ptr, unsigned int16 count);
.................... _bif unsigned int8 crc_calc8(unsigned int8 data);
.................... _bif unsigned int8 crc_calc8(unsigned int8 *ptr, unsigned int16 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// RTC
.................... // RTC Functions: setup_rtc(), setup_rtc_alarm(), rtc_read(),
.................... //                rtc_write(), rtc_alarm_read(), rtc_alarm_write()
.................... // Structure used in read and write functions (pass pointer):
.................... typedef struct {
....................    unsigned int8 tm_year;
....................    unsigned int8 tm_temp;  // Not used by built in functions, place holder only do not use
....................    unsigned int8 tm_mday;
....................    unsigned int8 tm_mon;
....................    unsigned int8 tm_hour;
....................    unsigned int8 tm_wday;
....................    unsigned int8 tm_sec;
....................    unsigned int8 tm_min;
....................    unsigned int8 tm_isdst; // Not used by built in functions
.................... } rtc_time_t;
.................... // RTC Prototypes:
.................... _bif void setup_rtc(unsigned int16 mode, unsigned int8 calibration);
.................... _bif void setup_rtc_alarm(unsigned int16 mode, unsigned int16 mask, unsigned int8 repeat);
.................... _bif void rtc_read(rtc_time_t *time);
.................... _bif void rtc_write(rtc_time_t *time);
.................... _bif void rtc_alarm_read(rtc_time_t *time);
.................... _bif void rtc_alarm_write(rtc_time_t *time);
.................... // Constants used in setup_rtc() are:  // Second param is calibration
.................... #define RTC_ENABLE           0x8000
.................... #define RTC_DISABLE          0
.................... #define RTC_OUTPUT_SECONDS   0x20400
.................... #define RTC_OUTPUT_ALARM     0x00400
.................... //
.................... // Constants used in setup_rtc_alarm() first param are:
.................... #define RTC_ALARM_ENABLE     0x8000
.................... #define RTC_ALARM_DISABLE    0
.................... #define RTC_CHIME_ENABLE     0x4000
.................... #define RTC_CHIME_DISABLE    0
.................... // Constants used in setup_rtc_alarm() second param are:  // Third param is repeat#
.................... #define RTC_ALARM_HALFSECOND 0x0000
.................... #define RTC_ALARM_SECOND     0x0400
.................... #define RTC_ALARM_10_SECONDS 0x0800
.................... #define RTC_ALARM_MINUTE     0x0C00
.................... #define RTC_ALARM_10_MINUTES 0x1000
.................... #define RTC_ALARM_HOUR       0x1400
.................... #define RTC_ALARM_DAY        0x1800
.................... #define RTC_ALARM_WEEK       0x1C00
.................... #define RTC_ALARM_MONTH      0x2000
.................... #define RTC_ALARM_YEAR       0x2400
.................... 
.................... ////////////////////////////////////////////////////////////////// QEI
.................... // QEI Functions: setup_qei(), qei_set_count(), qei_get_count(),
.................... //                qei_status()
.................... // QEI Prototypes:
.................... _bif void setup_qei(unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void setup_qei(unsigned int8 unit, unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void qei_set_count(unsigned int16 count);
.................... _bif void qei_set_count(unsigned int8 unit, unsigned int16 count);
.................... _bif unsigned int16 qei_get_count(void);
.................... _bif unsigned int16 qei_get_count(unsigned int8 unit);
.................... _bif unsigned int16 qei_status(void);
.................... _bif unsigned int16 qei_status(unsigned int8 unit);
.................... // Constants used in setup_qei() first param are:
.................... #define QEI_DISABLED        0
.................... #define QEI_MODE_X2         0x0400
.................... #define QEI_MODE_X4         0x0600
.................... #define QEI_MODE_TIMER      0x0100
.................... #define QEI_STOP_WHEN_IDLE  0x2000
.................... #define QEI_SWAP_AB         0x0080
.................... #define QEI_OUTPUT_ENABLE   0x0040
.................... #define QEI_RESET_WHEN_MAXCOUNT  0x0100
.................... #define QEI_RESET_WHEN_IDX_PULSE 0x0004
.................... #define QEI_TIMER_GATED      0x0020
.................... #define QEI_TIMER_INTERNAL   0x0000
.................... #define QEI_TIMER_EXTERNAL   0x0002
.................... #define QEI_TIMER_DIV_BY_1   0x0000
.................... #define QEI_TIMER_DIV_BY_8   0x0008
.................... #define QEI_TIMER_DIV_BY_64  0x0010
.................... #define QEI_TIMER_DIV_BY_256 0x0018
.................... // Constants used in setup_qei() second param are:   // Third param is MAXCOUNT
.................... #define QEI_FILTER_DIV_1     0x0000
.................... #define QEI_FILTER_DIV_2     0x0010
.................... #define QEI_FILTER_DIV_4     0x0020
.................... #define QEI_FILTER_DIV_16    0x0030
.................... #define QEI_FILTER_DIV_32    0x0040
.................... #define QEI_FILTER_DIV_64    0x0050
.................... #define QEI_FILTER_DIV_128   0x0060
.................... #define QEI_FILTER_DIV_256   0x0070
.................... #define QEI_FILTER_OUTPUT    0x0080
.................... #define QEI_NO_ERROR_INTS    0x0100
.................... #define QEI_IDX_WHEN_A0      0x0000  // for 2X mode
.................... #define QEI_IDX_WHEN_A1      0x0200  // for 2X mode
.................... #define QEI_IDX_WHEN_B0      0x0400  // for 2X mode
.................... #define QEI_IDX_WHEN_B1      0x0600  // for 2X mode
.................... #define QEI_IDX_WHEN_A0_B0   0x0000  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B0   0x0200  // for 4X mode
.................... #define QEI_IDX_WHEN_A0_B1   0x0400  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B1   0x0600  // for 4X mode
.................... // Constants returned from qei_status() are:
.................... #define QEI_POS_ERROR        0x8000
.................... #define QEI_FORWARD          0x0800
.................... #define QEI_INDEX_PIN        0x1000
.................... 
.................... ////////////////////////////////////////////////////////////////// MOTOR PWM
.................... // MPWM Functions: setup_motor_pwm(), set_motor_unit(),
.................... //                 set_motor_pwm_duty(), set_motor_pwm_event(),
.................... //                 get_motor_pwm_count()
.................... // MPWM Prototypes:
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int32 timebase);
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int8 prescale, unsigned int8 postscale, unsigned int16 period);
.................... _bif void set_motor_unit(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 mode, unsigned int8 active_deadtime, unsigned int8 inactive_deadtime);
.................... _bif void set_motor_pwm_duty(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 duty);
.................... _bif void set_motor_pmw_event(unsigned int8, signed int16 time);
.................... _bif unsigned int16 get_motor_pwm_count(unsigned int8 pwm);
.................... // Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):
.................... #define MPWM_DISABLED          0
.................... #define MPWM_FREE_RUN          0x8000
.................... #define MPWM_SINGLE_PULSE      0x8001
.................... #define MPWM_UP_DOWN           0x8002
.................... #define MPWM_UP_DOWN_WITH_INTS 0x8003
.................... // OR in any of the following:
.................... #define MPWM_HALT_WHEN_IDLE            0x2000
.................... #define MPWM_DUTY_UPDATES_IMMEADIATE  0x40000
.................... #define MPWM_SYNC_OVERRIDES           0x20000
.................... #define MPWM_DISABLE_UPDATES          0x10000
.................... #define MPWM_LATCH_FAULTS            0x100000
.................... 
.................... // Constants used in set_motor_unit() third param are:  (first param is unit number 1,2... and second param is pwm pin pair 1,2,3 or 4)
.................... #define MPWM_INDEPENDENT     0x0001
.................... #define MPWM_ENABLE          0x0006  // both H and L
.................... #define MPWM_ENABLE_H        0x0004
.................... #define MPWM_ENABLE_L        0x0002
.................... 
.................... #define MPWM_FORCE_L_0       0x0010
.................... #define MPWM_FORCE_L_1       0x0050
.................... #define MPWM_FORCE_H_0       0x0020
.................... #define MPWM_FORCE_H_1       0x00A0
.................... 
.................... #define MPWM_FAULTA_LA_HA     0x0700
.................... #define MPWM_FAULTA_LA_HI     0x0500
.................... #define MPWM_FAULTA_LI_HA     0x0600
.................... #define MPWM_FAULTA_LI_HI     0x0400
.................... #define MPWM_FAULTB_LA_HA     0x7000
.................... #define MPWM_FAULTB_LA_HI     0x5000
.................... #define MPWM_FAULTB_LI_HA     0x6000
.................... #define MPWM_FAULTB_LI_HI     0x4000
.................... #define MPWM_FAULT_NO_CHANGE 0x0000
.................... 
.................... ////////////////////////////////////////////////////////////////// DCI
.................... // DCI Functions: setup_dci(), dci_start(), dci_read(), dci_write(),
.................... //                dci_data_received(), dci_transmit_ready()
.................... // DCI Prototypes:
.................... _bif void setup_dci(unsigned int16 mode, unsigned int16 size, unsigned int16 receive_slot, unsigned int16 transmit_slot, unsigned int16 sample_rate);
.................... _bif void dci_start(void);
.................... _bif signed int16 dci_read(void);
.................... _bif void dci_write(signed int16);
.................... _bif int1 dci_data_received(void);
.................... _bif int1 dci_transmit_ready(void);
.................... // Constants used in setup_dci() first param are:
.................... #define MULTICHANNEL_MODE  0x0000
.................... #define I2S_MODE           0x0001
.................... #define AC97_16BIT_MODE    0x0002
.................... #define AC97_20BIT_MODE    0x0003
.................... 
.................... #define JUSTIFY_DATA       0x0020 //Start data transmission on the same clock cycle as COFS pulses (multichannel)
.................... #define MULTI_DEVICE_BUS   0x0040 //Tri-states the CSDO pin during unused time slots, normally drives '0'
.................... 
.................... #define UNDERFLOW_LAST     0x0080 //Transmits the last written value to the dci when data underflow occurs. Default is undeflow silence.
.................... #define UNDERFLOW_SILENCE  0x0000 //Transmit '0's on data undeflow. This will cause a clicking noise if you are underflowing data while outputing to a codec.
.................... 
.................... #define DCI_SLAVE          0x0100 //Default is master
.................... #define DCI_MASTER         0x0000
.................... 
.................... #define SAMPLE_FALLING_EDGE 0x0000 //Default is Sample on the rising edge of the clock
.................... #define SAMPLE_RISING_EDGE 0x0200
.................... 
.................... #define DCI_CLOCK_INPUT    0x0400 //SCLK is an input (supplied by codec or external source)
.................... #define DCI_CLOCK_OUTPUT   0x0000 //Default is clock output
.................... 
.................... #define ENABLE_LOOPBACK    0x0800 //Connect the CSDI/CSDO internally; loops all of the sound back onto the bus
.................... 
.................... #define CODEC_MULTICHANNEL  0x0000  //enables multichannel (generic) codec support
.................... #define CODEC_I2S           0x0001  //enables the I2S protocol
.................... #define CODEC_AC16          0x0002  //enables the AC-16 protocol, setupCodecTransmission has no effect
.................... #define CODEC_AC20          0x0003  //enables the AC-20 protocol, setupCodecTransmission has no effect
.................... 
.................... #define BUS_MASTER          0x0000  //designates this device as the bus master
.................... #define BUS_SLAVE           0x0300  //designates this device as a slave on a bus controlled by another codec
.................... 
.................... #define TRISTATE_BUS        0x0040        //when in master mode, the module will be in high impedance
....................                                     //during disabled frames (default drives 0's onto bus)
.................... #define SYNC_COFS_DATA_PULSE 0x0020 //signifies that data starts transmitting on the same SCK pulse as the edge of the COFS pulse
....................                                     //(default data starts on the clock after the rising edge of COFS
.................... /* Determines when a sample is taken */
.................... #define SAMPLE_RISING        0x0200 //sample data on the rising edge of the clock
.................... #define SAMPLE_FALLING       0x0000 //sample data on the falling edge of the clock
.................... 
.................... // Constants used in setup_dci() second param are:
.................... #define DCI_4BIT_WORD      0x0003
.................... #define DCI_5BIT_WORD      0x0004
.................... #define DCI_6BIT_WORD      0x0005
.................... #define DCI_7BIT_WORD      0x0006
.................... #define DCI_8BIT_WORD      0x0007
.................... #define DCI_9BIT_WORD      0x0008
.................... #define DCI_10BIT_WORD     0x0009
.................... #define DCI_11BIT_WORD     0x000A
.................... #define DCI_12BIT_WORD     0x000B
.................... #define DCI_13BIT_WORD     0x000C
.................... #define DCI_14BIT_WORD     0x000D
.................... #define DCI_15BIT_WORD     0x000E
.................... #define DCI_16BIT_WORD     0x000F
.................... 
.................... #define DCI_1WORD_FRAME    0x0000
.................... #define DCI_2WORD_FRAME    0x0010 << 1
.................... #define DCI_3WORD_FRAME    0x0020 << 1
.................... #define DCI_4WORD_FRAME    0x0030 << 1
.................... #define DCI_5WORD_FRAME    0x0040 << 1
.................... #define DCI_6WORD_FRAME    0x0050 << 1
.................... #define DCI_7WORD_FRAME    0x0060 << 1
.................... #define DCI_8WORD_FRAME    0x0070 << 1
.................... #define DCI_9WORD_FRAME    0x0080 << 1
.................... #define DCI_10WORD_FRAME   0x0090 << 1
.................... #define DCI_11WORD_FRAME   0x00A0 << 1
.................... #define DCI_12WORD_FRAME   0x00B0 << 1
.................... #define DCI_13WORD_FRAME   0x00C0 << 1
.................... #define DCI_14WORD_FRAME   0x00D0 << 1
.................... #define DCI_15WORD_FRAME   0x00E0 << 1
.................... #define DCI_16WORD_FRAME   0x00F0 << 1
.................... 
.................... #define DCI_1WORD_INTERRUPT 0x0000
.................... #define DCI_2WORD_INTERRUPT 0x0400
.................... #define DCI_3WORD_INTERRUPT 0x0800
.................... #define DCI_4WORD_INTERRUPT 0x0C00
.................... 
.................... // Constants used in setup_dci() third param are:
.................... #define RECEIVE_NONE    0x0000
.................... #define RECEIVE_ALL     0xFFFF
.................... #define RECEIVE_SLOT0   0x0001
.................... #define RECEIVE_SLOT1   0x0002
.................... #define RECEIVE_SLOT2   0x0004
.................... #define RECEIVE_SLOT3   0x0008
.................... #define RECEIVE_SLOT4   0x0010
.................... #define RECEIVE_SLOT5   0x0020
.................... #define RECEIVE_SLOT6   0x0040
.................... #define RECEIVE_SLOT7   0x0080
.................... #define RECEIVE_SLOT8   0x0100
.................... #define RECEIVE_SLOT9   0x0200
.................... #define RECEIVE_SLOT10  0x0400
.................... #define RECEIVE_SLOT11  0x0800
.................... #define RECEIVE_SLOT12  0x1000
.................... #define RECEIVE_SLOT13  0x2000
.................... #define RECEIVE_SLOT14  0x4000
.................... #define RECEIVE_SLOT15  0x8000
.................... 
.................... // Constants used in setup_dci() forth param are:
.................... #define TRANSMIT_NONE   0x0000
.................... #define TRANSMIT_ALL    0xFFFF
.................... #define TRANSMIT_SLOT0  0x0001
.................... #define TRANSMIT_SLOT1  0x0002
.................... #define TRANSMIT_SLOT2  0x0004
.................... #define TRANSMIT_SLOT3  0x0008
.................... #define TRANSMIT_SLOT4  0x0010
.................... #define TRANSMIT_SLOT5  0x0020
.................... #define TRANSMIT_SLOT6  0x0040
.................... #define TRANSMIT_SLOT7  0x0080
.................... #define TRANSMIT_SLOT8  0x0100
.................... #define TRANSMIT_SLOT9  0x0200
.................... #define TRANSMIT_SLOT10 0x0400
.................... #define TRANSMIT_SLOT11 0x0800
.................... #define TRANSMIT_SLOT12 0x1000
.................... #define TRANSMIT_SLOT13 0x2000
.................... #define TRANSMIT_SLOT14 0x4000
.................... #define TRANSMIT_SLOT15 0x8000
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////// DMA
.................... // DMA Functions: setup_dma(), dma_start(), dma_status()
.................... // DMA Prototypes:
.................... _bif void setup_dma(unsigned int8 channel, unsigned int32 pheripheral, unsigned int8 mode);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 count);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb, unsigned int16 count);
.................... _bif unsigned int8 dma_status(unsigned int8 channel);
.................... // Constants used in setup_dma() second param are:
.................... #define DMA_IN_SPI1      (0x0A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_OUT_SPI1     (0x8A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_IN_SPI2      (0x210000|getenv("sfr:SPI2BUF"))
.................... #define DMA_OUT_SPI2     (0xA10000|getenv("sfr:SPI2BUF"))
.................... #define DMA_IN_UART1     (0x0B0000|getenv("sfr:U1RXREG"))
.................... #define DMA_OUT_UART1    (0x8C0000|getenv("sfr:U1TXREG"))
.................... #define DMA_IN_UART2     (0x1E0000|getenv("sfr:U2RXREG"))
.................... #define DMA_OUT_UART2    (0x9F0000|getenv("sfr:U2TXREG"))
.................... #define DMA_IN_ADC1      (0x0D0000|getenv("sfr:ADC1BUF0"))
.................... ////////////////////////////////////////////////////////////////// DAC
.................... // Digital to Analog Functions: SETUP_DAC(), DAC_WRITE()
.................... // DAC Prototypes:
.................... _bif void setup_dac(unsigned int32 mode);
.................... _bif void setup_dac(unsigned int32 mode, unsigned int8 divisor);
.................... _bif void dac_write(unsigned int8 channel, unsigned value);
.................... // Constants used in SETUP_DAC() are:
.................... #define DAC_OFF  0
.................... #define DAC_RIGHT_ON   0x00808000
.................... #define DAC_LEFT_ON    0x80008000
.................... #define DAC_RIGHT_MIDPOINT 0x00A08000
.................... #define DAC_LEFT_MIDPOINT  0xA0008000
.................... #define DAC_SIGNED   0x100
.................... #define DAC_SLEEP_ON 0x1000
.................... #define DAC_IDLE_OFF 0x2000
.................... // Constants used as the first param in DAC_WRITE() are:
.................... #define DAC_DEFAULT  0
.................... #define DAC_RIGHT    1
.................... #define DAC_LEFT     2
.................... 
.................... #define DMA_IN_ECAN1     (0x220000|getenv("sfr:C1RXD"))
.................... #define DMA_OUT_ECAN1    (0xC60000|getenv("sfr:C1TXD"))
.................... #define DMA_INT0         0x000000 // or in direction and perif address
.................... #define DMA_IC1          0x010000 // or in direction and perif address
.................... #define DMA_IN_IC1       (0x010000|getenv("sfr:IC1BUF"))
.................... #define DMA_IC2          0x050000 // or in direction and perif address
.................... #define DMA_IN_IC2       (0x050000|getenv("sfr:IC2BUF"))
.................... #define DMA_OC1          0x020000 // or in direction and perif address
.................... #define DMA_OC2          0x060000 // or in direction and perif address
.................... #define DMA_TIMER2       0x070000 // or in direction and perif address
.................... #define DMA_TIMER3       0x080000 // or in direction and perif address
.................... #define DMA_OUT_DCI      (0xBC0000|getenv("sfr:TXBUF0"))
.................... #define DMA_IN_DCI       (0x3C0000|getenv("sfr:RXBUF0"))
.................... #define DMA_OUT_DACR     (0xCE0000|getenv("sfr:DAC1RDAT"))
.................... #define DMA_OUT_DACL     (0xCF0000|getenv("sfr:DAC1LDAT"))
.................... #define DMA_IN          0x00
.................... #define DMA_OUT         0x800000
.................... // Constants used in setup_dma() third param are:
.................... #define DMA_BYTE        0x40
.................... #define DMA_WORD        0x00  // default
.................... #define DMA_HALF_INT    0x10  // interrupt when half full
.................... #define DMA_WRITE_NULL  0x08
.................... // Constants used in dma_start() second param are:
.................... #define DMA_CONTINOUS   0x00
.................... #define DMA_ONE_SHOT    0x01
.................... #define DMA_PING_PONG   0x02
.................... #define DMA_NO_INC      0x10
.................... #define DMA_PERIF_ADDR  0x20 // Device supplies address
.................... #define DMA_FORCE_NOW  0x100
.................... // Constants returned from dma_status() are:
.................... #define DMA_IN_ERROR    0x01
.................... #define DMA_OUT_ERROR   0x02
.................... #define DMA_B_SELECT    0x04
.................... 
.................... ////////////////////////////////////////////////////////////////// BIF
.................... // Built In Functions Prototypes
.................... //
.................... // Math Prototypes:
.................... _bif signed int8 abs(signed int8 x);
.................... _bif signed int16 abs(signed int16 x);
.................... _bif signed int32 abs(signed int32 x);
.................... _bif float32 abs(float32 x);
.................... _bif unsigned int16 _mul(unsigned int8, unsigned int8);
.................... _bif signed int16 _mul(signed int8, signed int8);
.................... _bif unsigned int32 _mul(unsigned int16, unsigned int16);
.................... _bif signed int32 _mul(signed int16, signed int16);
.................... _bif signed int48 abs(signed int48 x);
.................... _bif signed int64 abs(signed int64 x);
.................... _bif float48 abs(float48 x);
.................... _bif float64 abs(float64 x);
.................... _bif unsigned int64 _mul(unsigned int32, unsigned int32);
.................... _bif signed int64 _mul(signed int32, signed int32);
.................... _bif unsigned int64 _mul(unsigned int48, unsigned int48);
.................... _bif signed int64 _mul(signed int48, signed int48);
.................... 
.................... // Memory Manipulation Prototypes:
.................... _bif void strcpy(char* dest, char* src);
.................... _bif void memset(unsigned int8* destination, unsigned int8 value, unsigned int16 num);
.................... _bif void memcpy(unsigned int8* destination, unsigned int8* source, unsigned int16 num);
.................... 
.................... // Data Manipulators Prototypes:
.................... _bif int1 shift_left(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif int1 shift_right(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif void rotate_left(unsigned int8* address, unsigned int8 bytes);
.................... _bif void rotate_right(unsigned int8* address, unsigned int8 bytes);
.................... _bif void swap(unsigned int8 value);
.................... _bif unsigned int8 make8(unsigned int16 var, unsigned int8 offset);
.................... _bif unsigned int8 make8(unsigned int32 var, unsigned int8 offset);
.................... _bif unsigned int16 make16(unsigned int8 varhigh, unsigned int8 varlow);
.................... _bif unsigned int32 make32(unsigned int16 var1);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3, unsigned int8 var4);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int16 var3);
.................... _bif void bit_set(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int32 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int8 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int16 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int64 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int64 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int48 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int64 var, unsigned int8 bit);
.................... _bif unsigned int8 bit_first(int1 value, unsigned int16 var);
.................... _bif unsigned int8 bit_last(int16 var);
.................... _bif unsigned int8 bit_last(int1 value, int16 var);
.................... 
.................... // #use delay() Prototypes:
.................... _bif void delay_cycles(unsigned int16 count);
.................... _bif void delay_ms(unsigned int16 time);
.................... _bif void delay_us(unsigned int16 time);
.................... 
.................... // #use rs232() Prototypes:
.................... _bif void putchar(char cdata);
.................... _bif void putchar(char cdata, unsigned int8 stream);
.................... _bif void puts(char* string);
.................... _bif void puts(char* string, unsigned int8 stream);
.................... _bif char getch(void);
.................... _bif char getch(unsigned int8 stream);
.................... _bif void gets(char* string);
.................... _bif void gets(char* string, unsigned int8 stream);
.................... _bif int1 kbhit(void);
.................... _bif int1 kbhit(unsigned int8 stream);
.................... _bif void printf(char* string, ...);
.................... _bif void fprintf(unsigned int8 stream, char* string, ...);
.................... _bif void putc_send(void);
.................... _bif void fputc_send(unsigned int8 stream);
.................... _bif int1 rcv_buffer_full(void);
.................... _bif int1 rcv_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 rcv_buffer_bytes(void);
.................... _bif unsigned int16 rcv_buffer_bytes(unsigned int8 stream);
.................... _bif int1 tx_buffer_full(void);
.................... _bif int1 tx_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 tx_buffer_bytes(void);
.................... _bif unsigned int16 tx_buffer_bytes(unsigned int8 stream);
.................... 
.................... // #use i2c() Prototypes:
.................... _bif unsigned int8 i2c_read(void);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream, int1 ack);
.................... _bif int1 i2c_write(unsigned int8 data);
.................... _bif int1 i2c_write(unsigned int8 stream, unsigned int8 data);
.................... _bif void i2c_start(void);
.................... _bif void i2c_start(unsigned int8 stream);
.................... _bif void i2c_start(unsigned int8 stream, unsigned int8 restart);
.................... _bif void i2c_stop(void);
.................... _bif void i2c_stop(unsigned int8 stream);
.................... _bif int8 i2c_isr_state(void);
.................... _bif void i2c_slaveaddr(unsigned int8 addr);
.................... _bif void i2c_slaveaddr(unsigned int8 stream, unsigned int8 addr);
.................... _bif int1 i2c_poll(void);
.................... _bif int1 i2c_poll(unsigned int8 stream);
.................... _bif void i2c_init(unsigned int32 baud);
.................... _bif void i2c_init(unsigned int8 stream, unsigned int32 baud);
.................... 
.................... // #use spi() Prototypes:
.................... _bif unsigned int8 spi_xfer(void);
.................... _bif unsigned int16 spi_xfer(void);
.................... _bif unsigned int32 spi_xfer(void);
.................... _bif unsigned int8 spi_xfer(unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data, unsigned int8 bits);
.................... _bif void spi_init(unsigned int32 baud);
.................... _bif void spi_init(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud, unsigned int32 clock);
.................... _bif void spi_prewrite(unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int32 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer_in(void);
.................... _bif unsigned int16 spi_xfer_in(void);
.................... _bif unsigned int32 spi_xfer_in(void);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... 
.................... // #use rtos() Prototypes:
.................... _bif void rtos_run(void);
.................... _bif void rtos_yield(void);
.................... _bif void rtos_enable(unsigned int8 task);
.................... _bif void rtos_disable(unsigned int8 task);
.................... _bif void rtos_terminate(void);
.................... _bif void rtos_await(int1 flag);
.................... _bif void rtos_wait(unsigned int8 sem);
.................... _bif void rtos_signal(unsigned int8 sem);
.................... _bif void rtos_msg_send(unsigned int8 task, unsigned int8 msg);
.................... _bif unsigned int8 rtos_msg_read(void);
.................... _bif unsigned int8 rtos_msg_poll(void);
.................... _bif int1 rtos_overrun(unsigned int8 task);
.................... _bif void rtos_stats(unsigned int8 task, unsigned int8* stat);
.................... 
.................... // #use timer() Prototypes:
.................... _bif unsigned int8 get_ticks(void);
.................... _bif unsigned int16 get_ticks(void);
.................... _bif unsigned int32 get_ticks(void);
.................... _bif unsigned int64 get_ticks(void);
.................... _bif unsigned int8 get_ticks(unsigned int8 stream);
.................... _bif unsigned int16 get_ticks(unsigned int8 stream);
.................... _bif unsigned int32 get_ticks(unsigned int8 stream);
.................... _bif unsigned int64 get_ticks(unsigned int8 stream);
.................... _bif void set_ticks(unsigned int8 value);
.................... _bif void set_ticks(unsigned int16 value);
.................... _bif void set_ticks(unsigned int32 value);
.................... _bif void set_ticks(unsigned int64 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int8 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int16 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int32 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int64 value);
.................... 
.................... // #use pwm() Prototypes:
.................... _bif void pwm_on(void);
.................... _bif void pwm_on(unsigned int8 stream);
.................... _bif void pwm_off(void);
.................... _bif void pwm_off(unsigned int8 stream);
.................... _bif void pwm_set_duty(unsigned int16 duty);
.................... _bif void pwm_set_duty(unsigned int8 stream, unsigned int16 duty);
.................... _bif void pwm_set_duty_percent(unsigned int16 percent);
.................... _bif void pwm_set_duty_percent(unsigned int8 stream, unsigned int16 percent);
.................... _bif void pwm_set_frequency(unsigned int32 frequency);
.................... _bif void pwm_set_frequency(unsigned int8 stream, unsigned int32 frequency);
.................... 
.................... // #use capture() Prototypes:
.................... _bif unsigned int16 get_capture_time(void);
.................... _bif unsigned int16 get_capture_time(unsigned int8 stream);
.................... _bif int1 get_capture_event(void);
.................... _bif int1 get_capture_event(unsigned int8 stream);
.................... 
.................... // Environment Prototypes:
.................... //_bif unsigned int8 getenv(char* cstring);
.................... 
.................... // Address Prototypes:
.................... #ifndef __ADDRESS__
.................... #define __ADDRESS__ unsigned int32
.................... #endif
.................... _bif void goto_address(__ADDRESS__ address);
.................... _bif __ADDRESS__ label_address(__ADDRESS__ label);
.................... 
.................... // Program Memory Prototypes:
.................... _bif void read_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void erase_program_memory(__ADDRESS__ address);
.................... _bif void write_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void read_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... _bif void write_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// INT
.................... // Interrupt Functions: ENABLE_INTERRUPTS(), DISABLE_INTERRUPTS(),
.................... //                      CLEAR_INTERRUPT(), INTERRUPT_ACTIVE(),
.................... //                      EXT_INT_EDGE()
.................... // INT Prototypes:
.................... _bif void enable_interrupts(unsigned int16 interrupt);
.................... _bif void disable_interrupts(unsigned int16 interrupt);
.................... _bif void clear_interrupt(unsigned int16 interrupt);
.................... _bif int1 interrupt_active(unsigned int16 interrupt);
.................... _bif int1 interrupt_enabled(unsigned int16 interrupt);
.................... _bif void ext_int_edge(unsigned int8 source, unsigned int8 edge);
.................... _bif void jump_to_isr(unsigned int16 address);
.................... // Constants used in EXT_INT_EDGE() are:
.................... #define L_TO_H              0x40
.................... #define H_TO_L                 0
.................... //
.................... // Constants used in other interrupt functions are:
.................... #define INTR_GLOBAL               0x400
.................... #define GLOBAL                    0x400  // For compatibility with PIC16/18
.................... #define INTR_NORMAL               0x100
.................... #define INTR_ALTERNATE            0x200
.................... #define INTR_LEVEL0               0x500
.................... #define INTR_LEVEL1               0x501
.................... #define INTR_LEVEL2               0x502
.................... #define INTR_LEVEL3               0x503
.................... #define INTR_LEVEL4               0x504
.................... #define INTR_LEVEL5               0x505
.................... #define INTR_LEVEL6               0x506
.................... #define INTR_LEVEL7               0x507
.................... 
.................... #define INTR_CN_PIN              0x8000  // or in a PIN_xx constant
.................... 
.................... #define INT_OSCFAIL               1
.................... #define INT_ADDRERR               2
.................... #define INT_STACKERR              3
.................... #define INT_MATHERR               4
.................... #define INT_DMAERR                5
.................... #define INT_EXT0                  6
.................... #define INT_IC1                   7
.................... #define INT_OC1                   8
.................... #define INT_TIMER1                9
.................... #define INT_DMA0                  69
.................... #define INT_IC2                   70
.................... #define INT_OC2                   71
.................... #define INT_TIMER2                72
.................... #define INT_TIMER3                73
.................... #define INT_SPI1E                 74
.................... #define INT_SPI1                  75
.................... #define INT_RDA                   76
.................... #define INT_TBE                   77
.................... #define INT_ADC1                  78
.................... #define INT_DMA1                  79
.................... #define INT_SI2C                  81
.................... #define INT_MI2C                  82
.................... #define INT_CNI                   84
.................... #define INT_EXT1                  85
.................... #define INT_IC7                   87
.................... #define INT_IC8                   88
.................... #define INT_DMA2                  89
.................... #define INT_OC3                   90
.................... #define INT_OC4                   91
.................... #define INT_TIMER4                92
.................... #define INT_TIMER5                93
.................... #define INT_EXT2                  94
.................... #define INT_RDA2                  95
.................... #define INT_TBE2                  96
.................... #define INT_SPI2E                 97
.................... #define INT_SPI2                  98
.................... #define INT_C1RX                  99
.................... #define INT_CAN1                  100
.................... #define INT_DMA3                  101
.................... #define INT_PWM1                  110
.................... #define INT_DMA4                  111
.................... #define INT_QEI                   123
.................... #define INT_DMA5                  126
.................... #define INT_PWM2                  127
.................... #define INT_FAULTA                128
.................... #define INT_UART1E                130
.................... #define INT_UART2E                131
.................... #define INT_QEI2                  132
.................... #define INT_DMA6                  133
.................... #define INT_DMA7                  134
.................... #define INT_C1TX                  135
.................... #define INT_FAULTA2               139
.................... #define INT_COMP                  152
.................... #define INT_PMP                   164
.................... #define INT_RTC                   173
.................... #define INT_CRC                   174
.................... #define INT_DAC1R                 177
.................... #define INT_DAC1L                 178
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
*
0026E:  CP0     W0
00270:  BTSC.B  42.1
00272:  BRA     27C
00274:  REPEAT  #E60
00276:  NOP     
00278:  DEC     W0,W0
0027A:  BRA     NZ,274
0027C:  RETURN  
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... #include "algoritmo.h"
.................... /**
....................  @file    ALGORITMO.h
....................  @author  Ricardo Gomez, Klaudija Ziliute
....................  @brief   PanTompkins header file
.................... */
.................... 
.................... 
.................... #ifndef __ALGORITMO_H
.................... #define __ALGORITMO_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "BEEP.h"
.................... /**
....................  @file    BEEP.h
....................  @author  Julio Gomis-Tena
....................  @brief   Generate n "beeps" of variable frequency
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __BEEP_H
.................... #define __BEEP_H
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #pin_select OC2 = BUZZER
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP_Init(void); //Inicializa las frecuencias de los beeps y la separaciÃ³n entre ellos
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP(unsigned int8); //Realiza n beeps
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __BEEP_H
.................... 
.................... 
.................... int PPM; // variable global
.................... 
.................... void algoritmo();
.................... void init_algoritmo(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ALGORITMO_H
.................... 
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... void adcinit(void) //por comprobar en la placa
.................... {
....................     setup_adc(ADC_CLOCK_INTERNAL);
*
00470:  MOV     #9F00,W4
00472:  MOV     W4,324
00474:  MOV     #86E0,W4
00476:  MOV     W4,320
....................     setup_adc_ports(sAN4);
00478:  MOV     #FFEF,W4
0047A:  MOV     W4,32C
0047C:  CLR     322
....................     set_adc_channel(0);
0047E:  CLR     328
00480:  RETURN  
.................... //   setup_timer3(TMR_INTERNAL, 18425); //  200 Hz. Ty/2/18425
.................... //   ADC1CON2 = 0b0000000000000000; // voltage reference en ADC1CON2
.................... //   ADC1CON3 = 0b1000000000000000; // select the analog conversion clock <7:0> y <15> para enable Tad
.................... //   AD1PCFGL = 0b1111111111111110; // AN1 entrada analogica - RB1 - PGC en placa
.................... //   AD1CHS0  = 0b0000000100000001; // AN1 entrada seleccionada para el CH0
.................... //   AD1PCFGL = 0b0000000011110111; // AN4 entrada analogica - RB1 - PGC en placa
.................... //   AD1CHS0  = 0b0000010000000100; // AN4 entrada seleccionada para el CH0
.................... //
.................... //   ADC1CON1 = 0b1011010101000110; // 12 bits - Signed Integer - <7:5> 010 Timer3 for ADC1 - <15> Sampling inmediatly after EOC <9:0> unsigned int
.................... 
.................... }
.................... 
.................... 
.................... 
.................... #include "algoritmo.h"
.................... /**
....................  @file    ALGORITMO.h
....................  @author  Ricardo Gomez, Klaudija Ziliute
....................  @brief   PanTompkins header file
.................... */
.................... 
.................... 
.................... #ifndef __ALGORITMO_H
.................... #define __ALGORITMO_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "lcd.h"
.................... /**
....................  @file    lcd.h
....................  @author  Ricardo Gï¿½mez
....................  @brief   LCD management
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __LCD_H
.................... #define __LCD_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... /* SECTION 1: Included header files to compile this file           */
.................... 
.................... /* SECTION 2: Public macros                                        */
.................... 
.................... #define _CLEAR_DISPLAY 				0x01
.................... #define _8BIT_4LINES_NORMAL_RE1_IS0		0x3A
.................... #define _8BIT_4LINES_REVERSE_RE1_IS0		0x3B
.................... #define _8BIT_4LINES_RE0_IS1			0x39
.................... #define _8BIT_4LINES_RE0_IS0			0x38
.................... 
.................... #define _BS1_1					0x1E
.................... #define _POWER_DOWN_DISABLE			0x02
.................... #define _SEGMENT_NORMAL_WAY			0x05
.................... #define _NW					0x09
.................... 
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_ON		0x0F
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_OFF		0x0E
.................... #define _DISPLAY_ON_CURSOR_OFF_BLINK_OFF	0x0C
.................... #define _BS0_1					0x1C
.................... #define _INTERNAL_DIVIDER			0x13
.................... #define _CONTRAST				0x77
.................... #define _POWER_ICON_CONTRAST			0x5C
.................... #define _FOLLOWER_CONTROL			0x6E
.................... 
.................... #define ADDRESS_DDRAM				0x80
.................... 
.................... 
.................... /* SECTION 3: Public types                                         */
.................... 
.................... 
.................... /* SECTION 4: Public variables :: declarations, extern mandatory   */
.................... 
.................... 
.................... /* SECTION 5: Public functions :: declarations, extern optional
....................    Rule exception (callbacks)  :: declarations, extern recommended */
.................... void display_valueADC_title(void);
.................... void LCD_command(unsigned int8);
.................... void lcdi2cinit(void);
.................... void LCD_write(char*);
.................... void initmenu(void);                                      //Inicializa el menu principal
.................... void display_frecuencia(void);       // Muestra frecuencia
.................... void LCD_cursor_at(unsigned int8 line, unsigned int8 column);
.................... 
.................... 
.................... #endif // __LCD_H
.................... // Do not write below this line!
.................... 
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #nolist
.................... //////// Program memory: 44032x24  Data RAM: 16384  Stack: 31
.................... //////// I/O: 35   Analog Pins: 9
.................... //////// Fuses: WRTB,NOWRTB,BSSHL,BSSHM,BSSHS,BSSSL,BSSSM,BSSSS,NOBSS
.................... //////// Fuses: RBS1024,RBS256,RBS128,NORBS,WRTSS,NOWRTSS,SSSHL,SSSHM,SSSHS
.................... //////// Fuses: SSSSL,SSSSM,SSSSS,NOSSS,RSS4096,RSS2048,RSS256,NORSS,WRT
.................... //////// Fuses: NOWRT,PROTECT_HIGH,PROTECT,NOPROTECT,FRC,FRC_PLL,PR,PR_PLL
.................... //////// Fuses: SOSC,LPRC,FRC_DIV_BY_16,FRC_PS,NOIESO,IESO,EC,XT,HS,NOPR
.................... //////// Fuses: OSCIO,NOOSCIO,NOIOL1WAY,IOL1WAY,CKSFSM,CKSNOFSM,NOCKSFSM
.................... //////// Fuses: WPOSTS1,WPOSTS2,WPOSTS3,WPOSTS4,WPOSTS5,WPOSTS6,WPOSTS7
.................... //////// Fuses: WPOSTS8,WPOSTS9,WPOSTS10,WPOSTS11,WPOSTS12,WPOSTS13,WPOSTS14
.................... //////// Fuses: WPOSTS15,WPOSTS16,WPRES32,WPRES128,NOWINDIS,WINDIS,NOWDT,WDT
.................... //////// Fuses: NOPUT,PUT2,PUT4,PUT8,PUT16,PUT32,PUT64,PUT128,ALTI2C1
.................... //////// Fuses: NOALTI2C1,LPOL_LOW,LPOL_HIGH,HPOL_LOW,HPOL_HIGH,PWMPIN
.................... //////// Fuses: NOPWMPIN,ICSP3,ICSP2,ICSP1,NOJTAG,JTAG,DEBUG,NODEBUG
.................... ////////
.................... #if (!defined(__PCD__)||defined(__ISNT_CCS__))
.................... #define _bif
.................... #define int8 char
.................... #define int16 int
.................... #define int32 long
.................... #define int48 long
.................... #define int64 long long
.................... #define float32 float
.................... #define float48 float
.................... #define float64 double
.................... #define int1 char
.................... 
.................... #endif
.................... ////////////////////////////////////////////////////////////////// PIN_SELECT
.................... // #pin_select function=pin
.................... // Valid Pins:
.................... //    PIN_B0,PIN_B1,PIN_B2,PIN_B3,PIN_B4,PIN_B5,PIN_B6,PIN_B7,PIN_B8,PIN_B9,
.................... //    PIN_B10,PIN_B11,PIN_B12,PIN_B13,PIN_B14,PIN_B15,PIN_C0,PIN_C1,PIN_C2,
.................... //    PIN_C3,PIN_C4,PIN_C5,PIN_C6,PIN_C7,PIN_C8,PIN_C9
.................... // Input Functions:
.................... //    INT1,INT2,T2CK,T3CK,T4CK,T5CK,IC1,IC2,IC3,IC4,IC5,OCFA,OCFB,U1RX,U1CTS,
.................... //    U2RX,U2CTS,SDI1,SCK1IN,SS1IN,SDI2,SCK2IN,SS2IN,C1RX,IC7,IC8,CSDI,CSCK,COFS,
.................... //    FLTA1,FLTA2,QEA1,QEB1,INDX1,QEA2,QEB2,INDX2,T1CK,FLT1,FLT2,FLT3,FLT4,FLT5,
.................... //    FLT6,FLT7,FLT8,SYNCI1,SYNCI2
.................... // Output Functions:
.................... //    NULL,C1OUT,C2OUT,U1TX,U1RTS,U2TX,U2RTS,SDO1,SCK1OUT,SS1OUT,SDO2,SCK2OUT,
.................... //    SS2OUT,OC1,OC2,OC3,OC4,OC5,C1TX,CSDO,CSCKOUT,COFSOUT,UPDN1,UPDN2,CTPLS,
.................... //    C3OUT,SYNCO1,REFCLKO,CMP1,CMP2,CMP3,CMP4,PWM4H,PWM4L
.................... //
.................... 
.................... ////////////////////////////////////////////////////////////////// I/O
.................... // Discrete I/O Functions: SET_TRIS_x(), OUTPUT_x(), INPUT_x(),
.................... //                         SET_PULLUP(), INPUT(),
.................... //                         OUTPUT_LOW(), OUTPUT_HIGH(),
.................... //                         OUTPUT_FLOAT(), OUTPUT_BIT()
.................... // Discrete I/O Prototypes:
.................... _bif void set_tris_a(unsigned int16 value);
.................... _bif void set_tris_b(unsigned int16 value);
.................... _bif void set_tris_c(unsigned int16 value);
.................... _bif unsigned int16 get_tris_a(void);
.................... _bif unsigned int16 get_tris_b(void);
.................... _bif unsigned int16 get_tris_c(void);
.................... _bif void output_a(unsigned int16 value);
.................... _bif void output_b(unsigned int16 value);
.................... _bif void output_c(unsigned int16 value);
.................... _bif unsigned int16 input_a(void);
.................... _bif unsigned int16 input_b(void);
.................... _bif unsigned int16 input_c(void);
.................... _bif int16 input_change_a(void);
.................... _bif int16 input_change_b(void);
.................... _bif int16 input_change_c(void);
.................... _bif void set_pullup(int1 state);
.................... _bif void set_pullup(int1 state, unsigned int16 pin);
.................... _bif void set_pulldown(int1 state);
.................... _bif void set_pulldown(int1 state, unsigned int16 pin);
.................... _bif int1 input(unsigned int16 pin);
.................... _bif int1 input_state(unsigned int16 pin);
.................... _bif void output_low(unsigned int16 pin);
.................... _bif void output_high(unsigned int16 pin);
.................... _bif void output_toggle(unsigned int16 pin);
.................... _bif void output_bit(unsigned int16 pin, int1 level);
.................... _bif void output_float(unsigned int16 pin);
.................... _bif void output_drive(unsigned int16 pin);
.................... // Constants used to identify pins in the above are:
.................... 
.................... #define PIN_A0  5648
.................... #define PIN_A1  5649
.................... #define PIN_A2  5650
.................... #define PIN_A3  5651
.................... #define PIN_A4  5652
.................... #define PIN_A7  5655
.................... #define PIN_A8  5656
.................... #define PIN_A9  5657
.................... #define PIN_A10  5658
.................... 
.................... #define PIN_B0  5712
.................... #define PIN_B1  5713
.................... #define PIN_B2  5714
.................... #define PIN_B3  5715
.................... #define PIN_B4  5716
.................... #define PIN_B5  5717
.................... #define PIN_B6  5718
.................... #define PIN_B7  5719
.................... #define PIN_B8  5720
.................... #define PIN_B9  5721
.................... #define PIN_B10  5722
.................... #define PIN_B11  5723
.................... #define PIN_B12  5724
.................... #define PIN_B13  5725
.................... #define PIN_B14  5726
.................... #define PIN_B15  5727
.................... 
.................... #define PIN_C0  5776
.................... #define PIN_C1  5777
.................... #define PIN_C2  5778
.................... #define PIN_C3  5779
.................... #define PIN_C4  5780
.................... #define PIN_C5  5781
.................... #define PIN_C6  5782
.................... #define PIN_C7  5783
.................... #define PIN_C8  5784
.................... #define PIN_C9  5785
.................... 
.................... ////////////////////////////////////////////////////////////////// Useful defines
.................... #define FALSE 0
.................... #define TRUE 1
.................... 
.................... #define BYTE unsigned int8
.................... #define BOOLEAN int1
.................... 
.................... #define getc getch
.................... #define fgetc getch
.................... #define getchar getch
.................... #define putc putchar
.................... #define fputc putchar
.................... #define fgets gets
.................... #define fputs puts
.................... 
.................... ////////////////////////////////////////////////////////////////// UART
.................... // UART Prototypes:
.................... _bif void setup_uart(unsigned int32 baud);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... _bif void set_uart_speed(unsigned int32 baud);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... // Constants used in setup_uart() are:
.................... // FALSE - Turn UART off
.................... // TRUE  - Turn UART on
.................... #define UART_ADDRESS           2
.................... #define UART_DATA              4
.................... #define UART_AUTODETECT        8
.................... #define UART_AUTODETECT_NOWAIT 9
.................... #define UART_WAKEUP_ON_RDA     10
.................... #define UART_SEND_BREAK        13
.................... 
.................... ////////////////////////////////////////////////////////////////// WDT
.................... // Watch Dog Timer Functions: SETUP_WDT() and RESTART_WDT()
.................... // WDT Prototypes:
.................... _bif void setup_wdt(unsigned int8 mode);
.................... _bif void restart_wdt(void);
.................... // Constants used for SETUP_WDT() are:
.................... #define WDT_ON      1
.................... #define WDT_OFF     0
.................... 
.................... #define  WDT_1MS    0x002
.................... #define  WDT_2MS    0x003
.................... #define  WDT_4MS    0x004
.................... #define  WDT_8MS    0x005
.................... #define  WDT_16MS   0x006
.................... #define  WDT_32MS   0x007
.................... #define  WDT_64MS   0x008
.................... #define  WDT_128MS  0x009
.................... #define  WDT_256MS  0x00A
.................... #define  WDT_512MS  0x00B
.................... #define  WDT_1S     0x00C
.................... #define  WDT_2S     0x00D
.................... #define  WDT_4S     0x00E
.................... #define  WDT_8S     0x00F
.................... #define  WDT_16S    0x010
.................... #define  WDT_33S    0x011
.................... #define  WDT_65S    0x030
.................... #define  WDT_131S   0x031
.................... 
.................... ////////////////////////////////////////////////////////////////// Control
.................... // Control Functions:  RESET_CPU(), SLEEP(), RESTART_CAUSE()
.................... // Prototypes:
.................... _bif unsigned int8 restart_cause(void);
.................... _bif void reset_cpu(void);
.................... _bif void sleep(void);
.................... _bif void sleep(unsigned int8 mode);
.................... // Constants passed into RESTART_CAUSE() are:
.................... #define RESTART_POWER_UP      0
.................... #define RESTART_BROWNOUT      1
.................... #define RESTART_WATCHDOG      4
.................... #define RESTART_SOFTWARE      6
.................... #define RESTART_MCLR          7
.................... #define RESTART_ILLEGAL_OP    14
.................... #define RESTART_TRAP_CONFLICT 15
.................... //
.................... // Constants passed into SLEEP() are:
.................... #define SLEEP_FULL      0  // Default
.................... #define SLEEP_IDLE      1  // Clock and peripherals don't stop
.................... 
.................... ////////////////////////////////////////////////////////////////// INTERNAL RC
.................... // Oscillator Prototypes:
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target);
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target, unsigned int32 source);
.................... // Constants used in setup_oscillator() are:
.................... #define OSC_INTERNAL     32
.................... #define OSC_CRYSTAL       1
.................... #define OSC_CLOCK         2
.................... #define OSC_RC            3
.................... #define OSC_SECONDARY    16
.................... 
.................... ////////////////////////////////////////////////////////////////// Timer
.................... // Timer Functions: SETUP_TIMERx, GET_TIMERx, GET_TIMERxy,
.................... // SET_TIMERx, SET_TIMERxy
.................... // Timer x Prototypes:
.................... _bif void setup_timer1(unsigned int16 mode);
.................... _bif void setup_timer1(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer1(void);
.................... _bif void set_timer1(unsigned int16 value);
.................... _bif void setup_timer2(unsigned int16 mode);
.................... _bif void setup_timer2(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer2(void);
.................... _bif void set_timer2(unsigned int16 value);
.................... _bif void setup_timer3(unsigned int16 mode);
.................... _bif void setup_timer3(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer3(void);
.................... _bif void set_timer3(unsigned int16 value);
.................... _bif unsigned int32 get_timer23(void);
.................... _bif void set_timer23(unsigned int32 value);
.................... _bif void setup_timer4(unsigned int16 mode);
.................... _bif void setup_timer4(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer4(void);
.................... _bif void set_timer4(unsigned int16 value);
.................... _bif void setup_timer5(unsigned int16 mode);
.................... _bif void setup_timer5(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer5(void);
.................... _bif void set_timer5(unsigned int16 value);
.................... _bif unsigned int32 get_timer45(void);
.................... _bif void set_timer45(unsigned int32 value);
.................... // Constants used for SETUP_TIMERx() are:
.................... //      (or (via |) together constants from each group)
.................... #define TMR_DISABLED 0x0000
.................... #define TMR_INTERNAL 0x8000
.................... #define TMR_EXTERNAL 0x8002
.................... #define TMR_GATE     0x0040
.................... 
.................... #define TMR_DIV_BY_1   0x0000
.................... #define TMR_DIV_BY_8   0x0010
.................... #define TMR_DIV_BY_64  0x0020
.................... #define TMR_DIV_BY_256 0x0030
.................... #define TMR_32_BIT     0x0008 // Only for even numbered timers
.................... 
.................... #define TMR_HALT_IDLE      0x2000
.................... #define TMR_CONTINUE_IDLE  0x0000
.................... 
.................... #define T1_EXTERNAL_SYNC  0x8006 //This only applies to Timer1
.................... #define T1_EXTERNAL_RTC   0xC002 //This only applies to Timer1
.................... /////////////////////////////////////////////////////////// INPUT CAPTURE
.................... // Functions: SETUP_CAPTURE, GET_CAPTURE,
.................... // IC Prototypes:
.................... _bif void setup_capture(unsigned int8 module, unsigned int16 mode);
.................... _bif unsigned int16 get_capture(unsigned int8 module);
.................... _bif unsigned int16 get_capture(unsigned int8 module, int1 wait);
.................... // Constants used for SETUP_CAPTURE() are:
.................... #define CAPTURE_OFF               0x0000  // Capture OFF
.................... #define CAPTURE_EE                0x0001  // Capture Every Edge
.................... #define CAPTURE_FE                0x0002  // Capture Falling Edge
.................... #define CAPTURE_RE                0x0003  // Capture Rising Edge
.................... #define CAPTURE_DIV_4             0x0004  // Capture Every 4th Rising Edge
.................... #define CAPTURE_DIV_16            0x0005  // Capture Every 16th Rising Edge
.................... #define CAPTURE_INTERRUPT_ONLY    0x0007  // Interrupt on Rising Edge when in Sleep or Idle
.................... 
.................... // The following defines can be ORed | with above to configure interrupts
.................... #define INTERRUPT_EVERY_CAPTURE   0x0000  // Interrupt on every capture event
.................... #define INTERRUPT_SECOND_CAPTURE  0x0020  // Interrupt on every second capture event
.................... #define INTERRUPT_THIRD_CAPTURE   0x0040  // Interrupt on every third capture event
.................... #define INTERRUPT_FOURTH_CAPTURE  0x0060  // Interrupt on every fourth capture event
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define CAPTURE_TIMER2            0x0080  // On capture event Timer 2 is captured
.................... #define CAPTURE_TIMER3            0x0000  // On capture event Timer 3 is captured
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define CAPTURE_HALT_IDLE         0x2000  // Capture module halts during idle mode
.................... #define CAPTURE_CONTINUE_IDLE     0x0000  // Capture module continues during idle mode
.................... 
.................... /////////////////////////////////////////////////////////// OUTPUT COMPARE
.................... // Functions: SETUP_COMPARE, SET_PWM_DUTY, SET_COMPARE_TIME
.................... // OC Prototypes:
.................... _bif void setup_compare(unsigned int8 module, unsigned int16 mode);
.................... _bif void set_pwm_duty(unsigned int8 module, unsigned int16 duty);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr, unsigned int16 ocrs);
.................... // Constants used for SETUP_COMPARE() are:
.................... #define COMPARE_OFF               0x0000  // Compare OFF
.................... #define COMPARE_SET_ON_MATCH      0x0001  // Pin from low to high on match
.................... #define COMPARE_CLR_ON_MATCH      0x0002  // Pin from high to low on match
.................... #define COMPARE_TOGGLE            0x0003  // Pin will toggle on every match occurrence
.................... #define COMPARE_SINGLE_PULSE      0x0004  // Pin will generate single pulse on first match
.................... #define COMPARE_CONT_PULSE        0x0005  // Pin will pulse for every match
.................... #define COMPARE_PWM               0x0006  // Compare operates as PWM with fault pin disabled
.................... #define COMPARE_PWM_FAULT         0x0007  // Compare operates as PWM with fault pin enabled
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define COMPARE_TIMER2            0x0000  // Timer 2 is the base timer
.................... #define COMPARE_TIMER3            0x0008  // Timer 3 is the base timer
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define COMPARE_HALT_IDLE         0x2000  // Compare module halts during idle mode
.................... #define COMPARE_CONTINUE_IDLE     0x0000  // Compare module continues during idle mode
.................... 
.................... ////////////////////////////////////////////////////////////////// SPI
.................... // SPI Functions: SETUP_SPI, SPI_WRITE, SPI_READ, SPI_DATA_IN
.................... // SPI Prototypes:
.................... _bif void setup_spi(unsigned int16 mode);
.................... _bif void spi_write(unsigned int8 data);
.................... _bif void spi_write(int1 wait, unsigned int8 data);
.................... _bif void spi_write_16(unsigned int16 data);
.................... _bif void spi_write_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read(void);
.................... _bif unsigned int8 spi_read(unsigned int8 data);
.................... _bif unsigned int16 spi_read_16(void);
.................... _bif unsigned int16 spi_read_16(unsigned int16 data);
.................... _bif int1 spi_data_in(void);
.................... _bif void setup_spi2(unsigned int16 mode);
.................... _bif void spi_write2(unsigned int8 data);
.................... _bif void spi_write2(int1 wait, unsigned int8 data);
.................... _bif void spi_write2_16(unsigned int16 data);
.................... _bif void spi_write2_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read2(void);
.................... _bif unsigned int8 spi_read2(unsigned int8 data);
.................... _bif unsigned int16 spi_read2_16(void);
.................... _bif unsigned int16 spi_read2_16(unsigned int16 data);
.................... _bif int1 spi_data_in2(void);
.................... // Constants used in SETUP_SPI() are:
.................... //      (or (via |) together constants from each group)
.................... #define SPI_MASTER                 0x0020
.................... #define SPI_SLAVE                  0x0000
.................... 
.................... #define SPI_SCK_IDLE_HIGH          0x0040
.................... #define SPI_SCK_IDLE_LOW           0x0000
.................... 
.................... #define SPI_XMIT_L_TO_H            0x0100
.................... #define SPI_XMIT_H_TO_L            0x0000
.................... 
.................... #define SPI_MODE_16B               0x0400
.................... #define SPI_MODE_8B                0x0000
.................... 
.................... #define SPI_SAMPLE_AT_END          0x0200
.................... #define SPI_SAMPLE_AT_MIDDLE       0x0000
.................... 
.................... #define SPI_SS_ENABLED             0x0000
.................... #define SPI_SS_DISABLED            0x0080
.................... 
.................... //or (via |) one of the following when operating as MASTER
.................... #define SPI_CLK_DIV_1              0x001F
.................... #define SPI_CLK_DIV_2              0x001B
.................... #define SPI_CLK_DIV_3              0x0017
.................... #define SPI_CLK_DIV_4              0x001E
.................... #define SPI_CLK_DIV_5              0x000F
.................... #define SPI_CLK_DIV_6              0x000B
.................... #define SPI_CLK_DIV_7              0x0007
.................... #define SPI_CLK_DIV_8              0x0003
.................... #define SPI_CLK_DIV_12             0x0016
.................... #define SPI_CLK_DIV_16             0x001D
.................... #define SPI_CLK_DIV_20             0x000E
.................... #define SPI_CLK_DIV_24             0x000A
.................... #define SPI_CLK_DIV_28             0x0006
.................... #define SPI_CLK_DIV_32             0x0002
.................... #define SPI_CLK_DIV_48             0x0015
.................... #define SPI_CLK_DIV_64             0x001C
.................... #define SPI_CLK_DIV_80             0x000D
.................... #define SPI_CLK_DIV_96             0x0009
.................... #define SPI_CLK_DIV_112            0x0005
.................... #define SPI_CLK_DIV_128            0x0001
.................... #define SPI_CLK_DIV_192            0x0014
.................... #define SPI_CLK_DIV_256            0x0010
.................... #define SPI_CLK_DIV_320            0x000C
.................... #define SPI_CLK_DIV_384            0x0008
.................... #define SPI_CLK_DIV_448            0x0004
.................... #define SPI_CLK_DIV_512            0x0000
.................... 
.................... //The following defines are provided for compatibility
.................... #define SPI_L_TO_H         SPI_SCK_IDLE_LOW
.................... #define SPI_H_TO_L         SPI_SCK_IDLE_HIGH
.................... 
.................... ////////////////////////////////////////////////////////////////// ADC
.................... // ADC Functions: SETUP_ADC(), SETUP_ADC_PORTS()
.................... //                SET_ADC_CHANNEL(), READ_ADC()
.................... // ADC Prototypes:
.................... _bif void setup_adc(unsigned int32 mode);
.................... _bif void setup_adc_ports(unsigned int32 pins);
.................... _bif void setup_adc_ports(unsigned int32 pins, unsigned int16 reference);
.................... _bif void set_adc_channel(unsigned int8 channel);
.................... _bif void set_adc_channel(unsigned int8 channel, unsigned int8 neg_channel);
.................... _bif unsigned int16 read_adc(void);
.................... _bif unsigned int16 read_adc(unsigned int8 mode);
.................... _bif int1 adc_done(void);
.................... // Constants used for SETUP_ADC() are:
.................... // Clock is at ADCS<5:0> of ADCON3 Reg. (0x02A4)
.................... // Tad = (Tcy/2)*(ADCS<5:0>+1)
.................... #define ADC_OFF                 0x10000
.................... #define ADC_CLOCK                0x0000
.................... #define ADC_CLOCK_DIV_2          0x0001
.................... #define ADC_CLOCK_DIV_4          0x0003
.................... #define ADC_CLOCK_DIV_8          0x0007
.................... #define ADC_CLOCK_DIV_16         0x000F
.................... #define ADC_CLOCK_DIV_32         0x001F
.................... #define ADC_CLOCK_DIV_64         0x003F
.................... #define ADC_CLOCK_INTERNAL       0x8000     // Internal
.................... 
.................... // One of the following may be OR'ed in with the above using |
.................... // Auto-Sample Time bits
.................... #define ADC_TAD_MUL_0            0x1F00
.................... #define ADC_TAD_MUL_2            0x1D00
.................... #define ADC_TAD_MUL_4            0x1B00
.................... #define ADC_TAD_MUL_8            0x1700
.................... #define ADC_TAD_MUL_16           0x0F00
.................... #define ADC_TAD_MUL_31           0x0000
.................... 
.................... // Constants used in READ_ADC() are:
.................... #define ADC_START_AND_READ       0x07
.................... #define ADC_START_ONLY           0x01
.................... #define ADC_READ_ONLY            0x06
.................... 
.................... // Constants used in SET_ADC_CHANNEL() second parameter are:
.................... #define VSS                      0
.................... 
.................... // Constants used in SETUP_ADC_PORTS() are:
.................... // First argument:
.................... // OR together desired pins
.................... #define NO_ANALOGS      0           // None
.................... #define ALL_ANALOG      0xFFFFFFFF  // All
.................... #define sAN0      0x00000001 //| A0
.................... #define sAN1      0x00000002 //| A1
.................... #define sAN2      0x00000004 //| B0
.................... #define sAN3      0x00000008 //| B1
.................... #define sAN4      0x00000010 //| B2
.................... #define sAN5      0x00000020 //| B3
.................... #define sAN6      0x00000040 //| C0
.................... #define sAN7      0x00000080 //| C1
.................... #define sAN8      0x00000100 //| C2
.................... 
.................... // Optional Second argument:
.................... #define VSS_VDD            0x0000 // Range 0-Vdd
.................... #define VREF_VREF          0x6000 // Range VrefL-VrefH
.................... #define VREF_VDD           0x4000 // Range VrefL-Vdd
.................... #define VSS_VREF           0x2000 // Range 0-VrefH
.................... 
.................... ////////////////////////////////////////////////////////////////// COMP
.................... // Comparator Functions: setup_comparator()
.................... // Comparator Variables: C1OUT, C2OUT
.................... // Comparator Prototypes:
.................... _bif void setup_comparator(unsigned int16 mode);
.................... // Constants used in setup_comparator() are:
.................... #define NC_NC_NC_NC      0
.................... #define B2_B3_NC_NC      0x401
.................... #define B2_VR_NC_NC      0x400
.................... #define B3_VR_NC_NC      0x402
.................... #define NC_NC_B0_B1      0x804
.................... #define NC_NC_B0_VR      0x800
.................... #define NC_NC_B1_VR      0x808
.................... #define B2_B3_B0_B1      B2_B3_NC_NC | NC_NC_B0_B1
.................... #define B2_VR_B0_VR      B2_VR_NC_NC | NC_NC_B0_VR
.................... #define B3_VR_B1_VR      B3_VR_NC_NC | NC_NC_B1_VR
.................... 
.................... #define C1_INVERT     0x10
.................... #define C2_INVERT     0x20
.................... #define C1_OUTPUT     0x100
.................... #define C2_OUTPUT     0x200
.................... 
.................... #bit C1OUT = getenv("SFR:CMCON").6
.................... #bit C2OUT = getenv("SFR:CMCON").7
.................... 
.................... ////////////////////////////////////////////////////////////////// VREF
.................... // VREF Prototypes:
.................... _bif void setup_vref(unsigned int16 mode);
.................... // Constants used in setup_vref() are:
.................... #define VREF_DISABLED  0x0000
.................... #define VREF_VSS_VDD   0x0080
.................... #define VREF_ANALOG    0x0090
.................... // One of the following maybe OR'ed in with the above using |
.................... #define VREF_HIGH      0x0080
.................... #define VREF_LOW       0x00A0
.................... // The following maybe OR'ed in with the above using |
.................... #define VREF_OUTPUT    0x0040
.................... // Or (with |) the above with a number 0-15
.................... 
.................... ////////////////////////////////////////////////////////////////// PMP
.................... // PMP Functions: setup_pmp(), pmp_address(), psp_read(), pmp_read(),
.................... // psp_write(), pmp_write(), psp_output_full(),psp_input_full(),
.................... // psp_overflow(), pmp_output_full(), pmp_input_full(),
.................... // pmp_overflow()
.................... // PMP Prototypes:
.................... _bif void setup_pmp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif void pmp_address(unsigned int16 address);
.................... _bif unsigned int8 pmp_read(void);
.................... _bif void pmp_write(unsigned int8 data);
.................... _bif int1 pmp_output_full(void);
.................... _bif int1 pmp_input_full(void);
.................... _bif int1 pmp_overflow(void);
.................... _bif void setup_psp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif unsigned int8 psp_read(void);
.................... _bif unsigned int8 psp_read(unsigned int16 address);
.................... _bif void psp_write(unsigned int8 data);
.................... _bif void psp_write(unsigned int8 data, unsigned int16 address);
.................... _bif int1 psp_output_full(void);
.................... _bif int1 psp_input_full(void);
.................... _bif int1 psp_overflow(void);
.................... // Constants used in SETUP_PMP() and SETUP_PSP() are:
.................... #define PAR_ENABLE                0x8000
.................... #define PAR_DISABLE               0x0000    // Module enable/disable options
.................... #define PAR_STOP_IN_IDLE          0x2000
.................... #define PAR_CONTINUE_IN_IDLE      0x0000
.................... #define PAR_ADDR_NOT_MULTIPLEXED  0x0000    // Address multiplexing options
.................... #define PAR_LOW_ADDR_MULTIPLEXED  0x0800    // Address multiplexing options
.................... #define PAR_FULL_ADDR_MULTIPLEXED 0x1000    // Address multiplexing options
.................... #define PAR_PTBEEN_ENABLE         0x0400  // Byte Enable Port Enable bit
.................... #define PAR_PTWREN_ENABLE         0x0200  // Write Enable Strobe bit
.................... #define PAR_PTRDEN_ENABLE         0x0100  // Read/Write Strobe Port bit
.................... #define PAR_ALP_ACTIVE_HIGH       0x0020 // Address latch polarity high
.................... #define PAR_BEP_ACTIVE_HIGH       0x0004 // Byte Enable Polarity
.................... #define PAR_WRSP_ACTIVE_HIGH      0x0002 // Write strobe Polarity bit
.................... #define PAR_RDSP_ACTIVE_HIGH      0x0001 // Read strobe Polarity bit
.................... #define PAR_CS_XX                 0x0000   // Chip select pins used for address
.................... #define PAR_CS_X1                 0x0008   // Chip select pin 1 used, active high
.................... #define PAR_CS_X0                 0x0000   // Chip select pin 1 used, active low
.................... #define PAR_CS_1X                 0x0050   // Chip select pin 2 used, active high
.................... #define PAR_CS_0X                 0x0040   // Chip select pin 2 used, active low
.................... #define PAR_CS_00                 0x0080   // Chip select pins 1,2 used, active low
.................... #define PAR_CS_11                 0x0098   // Chip select pins 1,2 used, active high
.................... #define PAR_CS_10                 0x0090   // Chip select pins 1,2 used, 1 is active low, 2 is high
.................... #define PAR_CS_01                 0x0088   // Chip select pins 1,2 used, 1 is active high, 2 is low
.................... #define PAR_INTR_ON_RW                0x20000000  // Interrupt on read write
.................... #define PAR_NO_INTR_STALL_ACTIVATED   0x40000000  // No interrupt, processor stall activated
.................... #define PAR_INTR_ON_3_RW_BUF          0x60000000 // Interrupt on write to Buffer 3 or read from Buffer 3
.................... #define PAR_PSP_AUTO_INC              0x18000000 // Read write buffers auto increment
.................... #define PAR_DEC_ADDR                  0x10000000 // Increment the address
.................... #define PAR_INC_ADDR                  0x08000000 // Decrement the address
.................... #define PAR_MASTER_MODE_1             0x03000000  // Master mode 1
.................... #define PAR_MASTER_MODE_2             0x02000000  // Master mode 2
.................... #define PAR_WAITB1                    0x00000000 // 1 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB2                    0x00400000 // 2 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB3                    0x00800000 // 3 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB4                    0x00C00000 // 4 Tcy Wait state for data setup R/W
.................... #define PAR_WAITM0                    0x00000000 // 0 wait state for Read to byte
.................... #define PAR_WAITM1                    0x00040000 // 1 Tcy wait state for Read to byte
.................... #define PAR_WAITM2                    0x00080000 // 2 Tcy wait state for Read to byte
.................... #define PAR_WAITM3                    0x000C0000 // 3 Tcy wait state for Read to byte
.................... #define PAR_WAITM15                   0x003C0000 // 15 wait states
.................... #define PAR_WAITE1                    0x00000000  // 1 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE2                    0x00010000 // 2 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE3                    0x00020000 // 3 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE4                    0x00030000 // 4 Tcy Wait for data hold after strobe
.................... 
.................... ////////////////////////////////////////////////////////////////// CRC
.................... // CRC Functions: setup_crc(), crc_init(), crc_calc(), crc_calc8()
.................... // CRC Prototypes:
.................... _bif void setup_crc(unsigned int8 poly_terms, ...);
.................... _bif void crc_init(unsigned int16 value);
.................... _bif unsigned int16 crc_calc(unsigned int16 data);
.................... _bif unsigned int16 crc_calc(unsigned int16 *ptr, unsigned int16 count);
.................... _bif unsigned int8 crc_calc8(unsigned int8 data);
.................... _bif unsigned int8 crc_calc8(unsigned int8 *ptr, unsigned int16 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// RTC
.................... // RTC Functions: setup_rtc(), setup_rtc_alarm(), rtc_read(),
.................... //                rtc_write(), rtc_alarm_read(), rtc_alarm_write()
.................... // Structure used in read and write functions (pass pointer):
.................... typedef struct {
....................    unsigned int8 tm_year;
....................    unsigned int8 tm_temp;  // Not used by built in functions, place holder only do not use
....................    unsigned int8 tm_mday;
....................    unsigned int8 tm_mon;
....................    unsigned int8 tm_hour;
....................    unsigned int8 tm_wday;
....................    unsigned int8 tm_sec;
....................    unsigned int8 tm_min;
....................    unsigned int8 tm_isdst; // Not used by built in functions
.................... } rtc_time_t;
.................... // RTC Prototypes:
.................... _bif void setup_rtc(unsigned int16 mode, unsigned int8 calibration);
.................... _bif void setup_rtc_alarm(unsigned int16 mode, unsigned int16 mask, unsigned int8 repeat);
.................... _bif void rtc_read(rtc_time_t *time);
.................... _bif void rtc_write(rtc_time_t *time);
.................... _bif void rtc_alarm_read(rtc_time_t *time);
.................... _bif void rtc_alarm_write(rtc_time_t *time);
.................... // Constants used in setup_rtc() are:  // Second param is calibration
.................... #define RTC_ENABLE           0x8000
.................... #define RTC_DISABLE          0
.................... #define RTC_OUTPUT_SECONDS   0x20400
.................... #define RTC_OUTPUT_ALARM     0x00400
.................... //
.................... // Constants used in setup_rtc_alarm() first param are:
.................... #define RTC_ALARM_ENABLE     0x8000
.................... #define RTC_ALARM_DISABLE    0
.................... #define RTC_CHIME_ENABLE     0x4000
.................... #define RTC_CHIME_DISABLE    0
.................... // Constants used in setup_rtc_alarm() second param are:  // Third param is repeat#
.................... #define RTC_ALARM_HALFSECOND 0x0000
.................... #define RTC_ALARM_SECOND     0x0400
.................... #define RTC_ALARM_10_SECONDS 0x0800
.................... #define RTC_ALARM_MINUTE     0x0C00
.................... #define RTC_ALARM_10_MINUTES 0x1000
.................... #define RTC_ALARM_HOUR       0x1400
.................... #define RTC_ALARM_DAY        0x1800
.................... #define RTC_ALARM_WEEK       0x1C00
.................... #define RTC_ALARM_MONTH      0x2000
.................... #define RTC_ALARM_YEAR       0x2400
.................... 
.................... ////////////////////////////////////////////////////////////////// QEI
.................... // QEI Functions: setup_qei(), qei_set_count(), qei_get_count(),
.................... //                qei_status()
.................... // QEI Prototypes:
.................... _bif void setup_qei(unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void setup_qei(unsigned int8 unit, unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void qei_set_count(unsigned int16 count);
.................... _bif void qei_set_count(unsigned int8 unit, unsigned int16 count);
.................... _bif unsigned int16 qei_get_count(void);
.................... _bif unsigned int16 qei_get_count(unsigned int8 unit);
.................... _bif unsigned int16 qei_status(void);
.................... _bif unsigned int16 qei_status(unsigned int8 unit);
.................... // Constants used in setup_qei() first param are:
.................... #define QEI_DISABLED        0
.................... #define QEI_MODE_X2         0x0400
.................... #define QEI_MODE_X4         0x0600
.................... #define QEI_MODE_TIMER      0x0100
.................... #define QEI_STOP_WHEN_IDLE  0x2000
.................... #define QEI_SWAP_AB         0x0080
.................... #define QEI_OUTPUT_ENABLE   0x0040
.................... #define QEI_RESET_WHEN_MAXCOUNT  0x0100
.................... #define QEI_RESET_WHEN_IDX_PULSE 0x0004
.................... #define QEI_TIMER_GATED      0x0020
.................... #define QEI_TIMER_INTERNAL   0x0000
.................... #define QEI_TIMER_EXTERNAL   0x0002
.................... #define QEI_TIMER_DIV_BY_1   0x0000
.................... #define QEI_TIMER_DIV_BY_8   0x0008
.................... #define QEI_TIMER_DIV_BY_64  0x0010
.................... #define QEI_TIMER_DIV_BY_256 0x0018
.................... // Constants used in setup_qei() second param are:   // Third param is MAXCOUNT
.................... #define QEI_FILTER_DIV_1     0x0000
.................... #define QEI_FILTER_DIV_2     0x0010
.................... #define QEI_FILTER_DIV_4     0x0020
.................... #define QEI_FILTER_DIV_16    0x0030
.................... #define QEI_FILTER_DIV_32    0x0040
.................... #define QEI_FILTER_DIV_64    0x0050
.................... #define QEI_FILTER_DIV_128   0x0060
.................... #define QEI_FILTER_DIV_256   0x0070
.................... #define QEI_FILTER_OUTPUT    0x0080
.................... #define QEI_NO_ERROR_INTS    0x0100
.................... #define QEI_IDX_WHEN_A0      0x0000  // for 2X mode
.................... #define QEI_IDX_WHEN_A1      0x0200  // for 2X mode
.................... #define QEI_IDX_WHEN_B0      0x0400  // for 2X mode
.................... #define QEI_IDX_WHEN_B1      0x0600  // for 2X mode
.................... #define QEI_IDX_WHEN_A0_B0   0x0000  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B0   0x0200  // for 4X mode
.................... #define QEI_IDX_WHEN_A0_B1   0x0400  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B1   0x0600  // for 4X mode
.................... // Constants returned from qei_status() are:
.................... #define QEI_POS_ERROR        0x8000
.................... #define QEI_FORWARD          0x0800
.................... #define QEI_INDEX_PIN        0x1000
.................... 
.................... ////////////////////////////////////////////////////////////////// MOTOR PWM
.................... // MPWM Functions: setup_motor_pwm(), set_motor_unit(),
.................... //                 set_motor_pwm_duty(), set_motor_pwm_event(),
.................... //                 get_motor_pwm_count()
.................... // MPWM Prototypes:
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int32 timebase);
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int8 prescale, unsigned int8 postscale, unsigned int16 period);
.................... _bif void set_motor_unit(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 mode, unsigned int8 active_deadtime, unsigned int8 inactive_deadtime);
.................... _bif void set_motor_pwm_duty(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 duty);
.................... _bif void set_motor_pmw_event(unsigned int8, signed int16 time);
.................... _bif unsigned int16 get_motor_pwm_count(unsigned int8 pwm);
.................... // Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):
.................... #define MPWM_DISABLED          0
.................... #define MPWM_FREE_RUN          0x8000
.................... #define MPWM_SINGLE_PULSE      0x8001
.................... #define MPWM_UP_DOWN           0x8002
.................... #define MPWM_UP_DOWN_WITH_INTS 0x8003
.................... // OR in any of the following:
.................... #define MPWM_HALT_WHEN_IDLE            0x2000
.................... #define MPWM_DUTY_UPDATES_IMMEADIATE  0x40000
.................... #define MPWM_SYNC_OVERRIDES           0x20000
.................... #define MPWM_DISABLE_UPDATES          0x10000
.................... #define MPWM_LATCH_FAULTS            0x100000
.................... 
.................... // Constants used in set_motor_unit() third param are:  (first param is unit number 1,2... and second param is pwm pin pair 1,2,3 or 4)
.................... #define MPWM_INDEPENDENT     0x0001
.................... #define MPWM_ENABLE          0x0006  // both H and L
.................... #define MPWM_ENABLE_H        0x0004
.................... #define MPWM_ENABLE_L        0x0002
.................... 
.................... #define MPWM_FORCE_L_0       0x0010
.................... #define MPWM_FORCE_L_1       0x0050
.................... #define MPWM_FORCE_H_0       0x0020
.................... #define MPWM_FORCE_H_1       0x00A0
.................... 
.................... #define MPWM_FAULTA_LA_HA     0x0700
.................... #define MPWM_FAULTA_LA_HI     0x0500
.................... #define MPWM_FAULTA_LI_HA     0x0600
.................... #define MPWM_FAULTA_LI_HI     0x0400
.................... #define MPWM_FAULTB_LA_HA     0x7000
.................... #define MPWM_FAULTB_LA_HI     0x5000
.................... #define MPWM_FAULTB_LI_HA     0x6000
.................... #define MPWM_FAULTB_LI_HI     0x4000
.................... #define MPWM_FAULT_NO_CHANGE 0x0000
.................... 
.................... ////////////////////////////////////////////////////////////////// DCI
.................... // DCI Functions: setup_dci(), dci_start(), dci_read(), dci_write(),
.................... //                dci_data_received(), dci_transmit_ready()
.................... // DCI Prototypes:
.................... _bif void setup_dci(unsigned int16 mode, unsigned int16 size, unsigned int16 receive_slot, unsigned int16 transmit_slot, unsigned int16 sample_rate);
.................... _bif void dci_start(void);
.................... _bif signed int16 dci_read(void);
.................... _bif void dci_write(signed int16);
.................... _bif int1 dci_data_received(void);
.................... _bif int1 dci_transmit_ready(void);
.................... // Constants used in setup_dci() first param are:
.................... #define MULTICHANNEL_MODE  0x0000
.................... #define I2S_MODE           0x0001
.................... #define AC97_16BIT_MODE    0x0002
.................... #define AC97_20BIT_MODE    0x0003
.................... 
.................... #define JUSTIFY_DATA       0x0020 //Start data transmission on the same clock cycle as COFS pulses (multichannel)
.................... #define MULTI_DEVICE_BUS   0x0040 //Tri-states the CSDO pin during unused time slots, normally drives '0'
.................... 
.................... #define UNDERFLOW_LAST     0x0080 //Transmits the last written value to the dci when data underflow occurs. Default is undeflow silence.
.................... #define UNDERFLOW_SILENCE  0x0000 //Transmit '0's on data undeflow. This will cause a clicking noise if you are underflowing data while outputing to a codec.
.................... 
.................... #define DCI_SLAVE          0x0100 //Default is master
.................... #define DCI_MASTER         0x0000
.................... 
.................... #define SAMPLE_FALLING_EDGE 0x0000 //Default is Sample on the rising edge of the clock
.................... #define SAMPLE_RISING_EDGE 0x0200
.................... 
.................... #define DCI_CLOCK_INPUT    0x0400 //SCLK is an input (supplied by codec or external source)
.................... #define DCI_CLOCK_OUTPUT   0x0000 //Default is clock output
.................... 
.................... #define ENABLE_LOOPBACK    0x0800 //Connect the CSDI/CSDO internally; loops all of the sound back onto the bus
.................... 
.................... #define CODEC_MULTICHANNEL  0x0000  //enables multichannel (generic) codec support
.................... #define CODEC_I2S           0x0001  //enables the I2S protocol
.................... #define CODEC_AC16          0x0002  //enables the AC-16 protocol, setupCodecTransmission has no effect
.................... #define CODEC_AC20          0x0003  //enables the AC-20 protocol, setupCodecTransmission has no effect
.................... 
.................... #define BUS_MASTER          0x0000  //designates this device as the bus master
.................... #define BUS_SLAVE           0x0300  //designates this device as a slave on a bus controlled by another codec
.................... 
.................... #define TRISTATE_BUS        0x0040        //when in master mode, the module will be in high impedance
....................                                     //during disabled frames (default drives 0's onto bus)
.................... #define SYNC_COFS_DATA_PULSE 0x0020 //signifies that data starts transmitting on the same SCK pulse as the edge of the COFS pulse
....................                                     //(default data starts on the clock after the rising edge of COFS
.................... /* Determines when a sample is taken */
.................... #define SAMPLE_RISING        0x0200 //sample data on the rising edge of the clock
.................... #define SAMPLE_FALLING       0x0000 //sample data on the falling edge of the clock
.................... 
.................... // Constants used in setup_dci() second param are:
.................... #define DCI_4BIT_WORD      0x0003
.................... #define DCI_5BIT_WORD      0x0004
.................... #define DCI_6BIT_WORD      0x0005
.................... #define DCI_7BIT_WORD      0x0006
.................... #define DCI_8BIT_WORD      0x0007
.................... #define DCI_9BIT_WORD      0x0008
.................... #define DCI_10BIT_WORD     0x0009
.................... #define DCI_11BIT_WORD     0x000A
.................... #define DCI_12BIT_WORD     0x000B
.................... #define DCI_13BIT_WORD     0x000C
.................... #define DCI_14BIT_WORD     0x000D
.................... #define DCI_15BIT_WORD     0x000E
.................... #define DCI_16BIT_WORD     0x000F
.................... 
.................... #define DCI_1WORD_FRAME    0x0000
.................... #define DCI_2WORD_FRAME    0x0010 << 1
.................... #define DCI_3WORD_FRAME    0x0020 << 1
.................... #define DCI_4WORD_FRAME    0x0030 << 1
.................... #define DCI_5WORD_FRAME    0x0040 << 1
.................... #define DCI_6WORD_FRAME    0x0050 << 1
.................... #define DCI_7WORD_FRAME    0x0060 << 1
.................... #define DCI_8WORD_FRAME    0x0070 << 1
.................... #define DCI_9WORD_FRAME    0x0080 << 1
.................... #define DCI_10WORD_FRAME   0x0090 << 1
.................... #define DCI_11WORD_FRAME   0x00A0 << 1
.................... #define DCI_12WORD_FRAME   0x00B0 << 1
.................... #define DCI_13WORD_FRAME   0x00C0 << 1
.................... #define DCI_14WORD_FRAME   0x00D0 << 1
.................... #define DCI_15WORD_FRAME   0x00E0 << 1
.................... #define DCI_16WORD_FRAME   0x00F0 << 1
.................... 
.................... #define DCI_1WORD_INTERRUPT 0x0000
.................... #define DCI_2WORD_INTERRUPT 0x0400
.................... #define DCI_3WORD_INTERRUPT 0x0800
.................... #define DCI_4WORD_INTERRUPT 0x0C00
.................... 
.................... // Constants used in setup_dci() third param are:
.................... #define RECEIVE_NONE    0x0000
.................... #define RECEIVE_ALL     0xFFFF
.................... #define RECEIVE_SLOT0   0x0001
.................... #define RECEIVE_SLOT1   0x0002
.................... #define RECEIVE_SLOT2   0x0004
.................... #define RECEIVE_SLOT3   0x0008
.................... #define RECEIVE_SLOT4   0x0010
.................... #define RECEIVE_SLOT5   0x0020
.................... #define RECEIVE_SLOT6   0x0040
.................... #define RECEIVE_SLOT7   0x0080
.................... #define RECEIVE_SLOT8   0x0100
.................... #define RECEIVE_SLOT9   0x0200
.................... #define RECEIVE_SLOT10  0x0400
.................... #define RECEIVE_SLOT11  0x0800
.................... #define RECEIVE_SLOT12  0x1000
.................... #define RECEIVE_SLOT13  0x2000
.................... #define RECEIVE_SLOT14  0x4000
.................... #define RECEIVE_SLOT15  0x8000
.................... 
.................... // Constants used in setup_dci() forth param are:
.................... #define TRANSMIT_NONE   0x0000
.................... #define TRANSMIT_ALL    0xFFFF
.................... #define TRANSMIT_SLOT0  0x0001
.................... #define TRANSMIT_SLOT1  0x0002
.................... #define TRANSMIT_SLOT2  0x0004
.................... #define TRANSMIT_SLOT3  0x0008
.................... #define TRANSMIT_SLOT4  0x0010
.................... #define TRANSMIT_SLOT5  0x0020
.................... #define TRANSMIT_SLOT6  0x0040
.................... #define TRANSMIT_SLOT7  0x0080
.................... #define TRANSMIT_SLOT8  0x0100
.................... #define TRANSMIT_SLOT9  0x0200
.................... #define TRANSMIT_SLOT10 0x0400
.................... #define TRANSMIT_SLOT11 0x0800
.................... #define TRANSMIT_SLOT12 0x1000
.................... #define TRANSMIT_SLOT13 0x2000
.................... #define TRANSMIT_SLOT14 0x4000
.................... #define TRANSMIT_SLOT15 0x8000
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////// DMA
.................... // DMA Functions: setup_dma(), dma_start(), dma_status()
.................... // DMA Prototypes:
.................... _bif void setup_dma(unsigned int8 channel, unsigned int32 pheripheral, unsigned int8 mode);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 count);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb, unsigned int16 count);
.................... _bif unsigned int8 dma_status(unsigned int8 channel);
.................... // Constants used in setup_dma() second param are:
.................... #define DMA_IN_SPI1      (0x0A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_OUT_SPI1     (0x8A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_IN_SPI2      (0x210000|getenv("sfr:SPI2BUF"))
.................... #define DMA_OUT_SPI2     (0xA10000|getenv("sfr:SPI2BUF"))
.................... #define DMA_IN_UART1     (0x0B0000|getenv("sfr:U1RXREG"))
.................... #define DMA_OUT_UART1    (0x8C0000|getenv("sfr:U1TXREG"))
.................... #define DMA_IN_UART2     (0x1E0000|getenv("sfr:U2RXREG"))
.................... #define DMA_OUT_UART2    (0x9F0000|getenv("sfr:U2TXREG"))
.................... #define DMA_IN_ADC1      (0x0D0000|getenv("sfr:ADC1BUF0"))
.................... ////////////////////////////////////////////////////////////////// DAC
.................... // Digital to Analog Functions: SETUP_DAC(), DAC_WRITE()
.................... // DAC Prototypes:
.................... _bif void setup_dac(unsigned int32 mode);
.................... _bif void setup_dac(unsigned int32 mode, unsigned int8 divisor);
.................... _bif void dac_write(unsigned int8 channel, unsigned value);
.................... // Constants used in SETUP_DAC() are:
.................... #define DAC_OFF  0
.................... #define DAC_RIGHT_ON   0x00808000
.................... #define DAC_LEFT_ON    0x80008000
.................... #define DAC_RIGHT_MIDPOINT 0x00A08000
.................... #define DAC_LEFT_MIDPOINT  0xA0008000
.................... #define DAC_SIGNED   0x100
.................... #define DAC_SLEEP_ON 0x1000
.................... #define DAC_IDLE_OFF 0x2000
.................... // Constants used as the first param in DAC_WRITE() are:
.................... #define DAC_DEFAULT  0
.................... #define DAC_RIGHT    1
.................... #define DAC_LEFT     2
.................... 
.................... #define DMA_IN_ECAN1     (0x220000|getenv("sfr:C1RXD"))
.................... #define DMA_OUT_ECAN1    (0xC60000|getenv("sfr:C1TXD"))
.................... #define DMA_INT0         0x000000 // or in direction and perif address
.................... #define DMA_IC1          0x010000 // or in direction and perif address
.................... #define DMA_IN_IC1       (0x010000|getenv("sfr:IC1BUF"))
.................... #define DMA_IC2          0x050000 // or in direction and perif address
.................... #define DMA_IN_IC2       (0x050000|getenv("sfr:IC2BUF"))
.................... #define DMA_OC1          0x020000 // or in direction and perif address
.................... #define DMA_OC2          0x060000 // or in direction and perif address
.................... #define DMA_TIMER2       0x070000 // or in direction and perif address
.................... #define DMA_TIMER3       0x080000 // or in direction and perif address
.................... #define DMA_OUT_DCI      (0xBC0000|getenv("sfr:TXBUF0"))
.................... #define DMA_IN_DCI       (0x3C0000|getenv("sfr:RXBUF0"))
.................... #define DMA_OUT_DACR     (0xCE0000|getenv("sfr:DAC1RDAT"))
.................... #define DMA_OUT_DACL     (0xCF0000|getenv("sfr:DAC1LDAT"))
.................... #define DMA_IN          0x00
.................... #define DMA_OUT         0x800000
.................... // Constants used in setup_dma() third param are:
.................... #define DMA_BYTE        0x40
.................... #define DMA_WORD        0x00  // default
.................... #define DMA_HALF_INT    0x10  // interrupt when half full
.................... #define DMA_WRITE_NULL  0x08
.................... // Constants used in dma_start() second param are:
.................... #define DMA_CONTINOUS   0x00
.................... #define DMA_ONE_SHOT    0x01
.................... #define DMA_PING_PONG   0x02
.................... #define DMA_NO_INC      0x10
.................... #define DMA_PERIF_ADDR  0x20 // Device supplies address
.................... #define DMA_FORCE_NOW  0x100
.................... // Constants returned from dma_status() are:
.................... #define DMA_IN_ERROR    0x01
.................... #define DMA_OUT_ERROR   0x02
.................... #define DMA_B_SELECT    0x04
.................... 
.................... ////////////////////////////////////////////////////////////////// BIF
.................... // Built In Functions Prototypes
.................... //
.................... // Math Prototypes:
.................... _bif signed int8 abs(signed int8 x);
.................... _bif signed int16 abs(signed int16 x);
.................... _bif signed int32 abs(signed int32 x);
.................... _bif float32 abs(float32 x);
.................... _bif unsigned int16 _mul(unsigned int8, unsigned int8);
.................... _bif signed int16 _mul(signed int8, signed int8);
.................... _bif unsigned int32 _mul(unsigned int16, unsigned int16);
.................... _bif signed int32 _mul(signed int16, signed int16);
.................... _bif signed int48 abs(signed int48 x);
.................... _bif signed int64 abs(signed int64 x);
.................... _bif float48 abs(float48 x);
.................... _bif float64 abs(float64 x);
.................... _bif unsigned int64 _mul(unsigned int32, unsigned int32);
.................... _bif signed int64 _mul(signed int32, signed int32);
.................... _bif unsigned int64 _mul(unsigned int48, unsigned int48);
.................... _bif signed int64 _mul(signed int48, signed int48);
.................... 
.................... // Memory Manipulation Prototypes:
.................... _bif void strcpy(char* dest, char* src);
.................... _bif void memset(unsigned int8* destination, unsigned int8 value, unsigned int16 num);
.................... _bif void memcpy(unsigned int8* destination, unsigned int8* source, unsigned int16 num);
.................... 
.................... // Data Manipulators Prototypes:
.................... _bif int1 shift_left(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif int1 shift_right(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif void rotate_left(unsigned int8* address, unsigned int8 bytes);
.................... _bif void rotate_right(unsigned int8* address, unsigned int8 bytes);
.................... _bif void swap(unsigned int8 value);
.................... _bif unsigned int8 make8(unsigned int16 var, unsigned int8 offset);
.................... _bif unsigned int8 make8(unsigned int32 var, unsigned int8 offset);
.................... _bif unsigned int16 make16(unsigned int8 varhigh, unsigned int8 varlow);
.................... _bif unsigned int32 make32(unsigned int16 var1);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3, unsigned int8 var4);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int16 var3);
.................... _bif void bit_set(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int32 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int8 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int16 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int64 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int64 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int48 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int64 var, unsigned int8 bit);
.................... _bif unsigned int8 bit_first(int1 value, unsigned int16 var);
.................... _bif unsigned int8 bit_last(int16 var);
.................... _bif unsigned int8 bit_last(int1 value, int16 var);
.................... 
.................... // #use delay() Prototypes:
.................... _bif void delay_cycles(unsigned int16 count);
.................... _bif void delay_ms(unsigned int16 time);
.................... _bif void delay_us(unsigned int16 time);
.................... 
.................... // #use rs232() Prototypes:
.................... _bif void putchar(char cdata);
.................... _bif void putchar(char cdata, unsigned int8 stream);
.................... _bif void puts(char* string);
.................... _bif void puts(char* string, unsigned int8 stream);
.................... _bif char getch(void);
.................... _bif char getch(unsigned int8 stream);
.................... _bif void gets(char* string);
.................... _bif void gets(char* string, unsigned int8 stream);
.................... _bif int1 kbhit(void);
.................... _bif int1 kbhit(unsigned int8 stream);
.................... _bif void printf(char* string, ...);
.................... _bif void fprintf(unsigned int8 stream, char* string, ...);
.................... _bif void putc_send(void);
.................... _bif void fputc_send(unsigned int8 stream);
.................... _bif int1 rcv_buffer_full(void);
.................... _bif int1 rcv_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 rcv_buffer_bytes(void);
.................... _bif unsigned int16 rcv_buffer_bytes(unsigned int8 stream);
.................... _bif int1 tx_buffer_full(void);
.................... _bif int1 tx_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 tx_buffer_bytes(void);
.................... _bif unsigned int16 tx_buffer_bytes(unsigned int8 stream);
.................... 
.................... // #use i2c() Prototypes:
.................... _bif unsigned int8 i2c_read(void);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream, int1 ack);
.................... _bif int1 i2c_write(unsigned int8 data);
.................... _bif int1 i2c_write(unsigned int8 stream, unsigned int8 data);
.................... _bif void i2c_start(void);
.................... _bif void i2c_start(unsigned int8 stream);
.................... _bif void i2c_start(unsigned int8 stream, unsigned int8 restart);
.................... _bif void i2c_stop(void);
.................... _bif void i2c_stop(unsigned int8 stream);
.................... _bif int8 i2c_isr_state(void);
.................... _bif void i2c_slaveaddr(unsigned int8 addr);
.................... _bif void i2c_slaveaddr(unsigned int8 stream, unsigned int8 addr);
.................... _bif int1 i2c_poll(void);
.................... _bif int1 i2c_poll(unsigned int8 stream);
.................... _bif void i2c_init(unsigned int32 baud);
.................... _bif void i2c_init(unsigned int8 stream, unsigned int32 baud);
.................... 
.................... // #use spi() Prototypes:
.................... _bif unsigned int8 spi_xfer(void);
.................... _bif unsigned int16 spi_xfer(void);
.................... _bif unsigned int32 spi_xfer(void);
.................... _bif unsigned int8 spi_xfer(unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data, unsigned int8 bits);
.................... _bif void spi_init(unsigned int32 baud);
.................... _bif void spi_init(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud, unsigned int32 clock);
.................... _bif void spi_prewrite(unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int32 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer_in(void);
.................... _bif unsigned int16 spi_xfer_in(void);
.................... _bif unsigned int32 spi_xfer_in(void);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... 
.................... // #use rtos() Prototypes:
.................... _bif void rtos_run(void);
.................... _bif void rtos_yield(void);
.................... _bif void rtos_enable(unsigned int8 task);
.................... _bif void rtos_disable(unsigned int8 task);
.................... _bif void rtos_terminate(void);
.................... _bif void rtos_await(int1 flag);
.................... _bif void rtos_wait(unsigned int8 sem);
.................... _bif void rtos_signal(unsigned int8 sem);
.................... _bif void rtos_msg_send(unsigned int8 task, unsigned int8 msg);
.................... _bif unsigned int8 rtos_msg_read(void);
.................... _bif unsigned int8 rtos_msg_poll(void);
.................... _bif int1 rtos_overrun(unsigned int8 task);
.................... _bif void rtos_stats(unsigned int8 task, unsigned int8* stat);
.................... 
.................... // #use timer() Prototypes:
.................... _bif unsigned int8 get_ticks(void);
.................... _bif unsigned int16 get_ticks(void);
.................... _bif unsigned int32 get_ticks(void);
.................... _bif unsigned int64 get_ticks(void);
.................... _bif unsigned int8 get_ticks(unsigned int8 stream);
.................... _bif unsigned int16 get_ticks(unsigned int8 stream);
.................... _bif unsigned int32 get_ticks(unsigned int8 stream);
.................... _bif unsigned int64 get_ticks(unsigned int8 stream);
.................... _bif void set_ticks(unsigned int8 value);
.................... _bif void set_ticks(unsigned int16 value);
.................... _bif void set_ticks(unsigned int32 value);
.................... _bif void set_ticks(unsigned int64 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int8 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int16 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int32 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int64 value);
.................... 
.................... // #use pwm() Prototypes:
.................... _bif void pwm_on(void);
.................... _bif void pwm_on(unsigned int8 stream);
.................... _bif void pwm_off(void);
.................... _bif void pwm_off(unsigned int8 stream);
.................... _bif void pwm_set_duty(unsigned int16 duty);
.................... _bif void pwm_set_duty(unsigned int8 stream, unsigned int16 duty);
.................... _bif void pwm_set_duty_percent(unsigned int16 percent);
.................... _bif void pwm_set_duty_percent(unsigned int8 stream, unsigned int16 percent);
.................... _bif void pwm_set_frequency(unsigned int32 frequency);
.................... _bif void pwm_set_frequency(unsigned int8 stream, unsigned int32 frequency);
.................... 
.................... // #use capture() Prototypes:
.................... _bif unsigned int16 get_capture_time(void);
.................... _bif unsigned int16 get_capture_time(unsigned int8 stream);
.................... _bif int1 get_capture_event(void);
.................... _bif int1 get_capture_event(unsigned int8 stream);
.................... 
.................... // Environment Prototypes:
.................... //_bif unsigned int8 getenv(char* cstring);
.................... 
.................... // Address Prototypes:
.................... #ifndef __ADDRESS__
.................... #define __ADDRESS__ unsigned int32
.................... #endif
.................... _bif void goto_address(__ADDRESS__ address);
.................... _bif __ADDRESS__ label_address(__ADDRESS__ label);
.................... 
.................... // Program Memory Prototypes:
.................... _bif void read_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void erase_program_memory(__ADDRESS__ address);
.................... _bif void write_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void read_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... _bif void write_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// INT
.................... // Interrupt Functions: ENABLE_INTERRUPTS(), DISABLE_INTERRUPTS(),
.................... //                      CLEAR_INTERRUPT(), INTERRUPT_ACTIVE(),
.................... //                      EXT_INT_EDGE()
.................... // INT Prototypes:
.................... _bif void enable_interrupts(unsigned int16 interrupt);
.................... _bif void disable_interrupts(unsigned int16 interrupt);
.................... _bif void clear_interrupt(unsigned int16 interrupt);
.................... _bif int1 interrupt_active(unsigned int16 interrupt);
.................... _bif int1 interrupt_enabled(unsigned int16 interrupt);
.................... _bif void ext_int_edge(unsigned int8 source, unsigned int8 edge);
.................... _bif void jump_to_isr(unsigned int16 address);
.................... // Constants used in EXT_INT_EDGE() are:
.................... #define L_TO_H              0x40
.................... #define H_TO_L                 0
.................... //
.................... // Constants used in other interrupt functions are:
.................... #define INTR_GLOBAL               0x400
.................... #define GLOBAL                    0x400  // For compatibility with PIC16/18
.................... #define INTR_NORMAL               0x100
.................... #define INTR_ALTERNATE            0x200
.................... #define INTR_LEVEL0               0x500
.................... #define INTR_LEVEL1               0x501
.................... #define INTR_LEVEL2               0x502
.................... #define INTR_LEVEL3               0x503
.................... #define INTR_LEVEL4               0x504
.................... #define INTR_LEVEL5               0x505
.................... #define INTR_LEVEL6               0x506
.................... #define INTR_LEVEL7               0x507
.................... 
.................... #define INTR_CN_PIN              0x8000  // or in a PIN_xx constant
.................... 
.................... #define INT_OSCFAIL               1
.................... #define INT_ADDRERR               2
.................... #define INT_STACKERR              3
.................... #define INT_MATHERR               4
.................... #define INT_DMAERR                5
.................... #define INT_EXT0                  6
.................... #define INT_IC1                   7
.................... #define INT_OC1                   8
.................... #define INT_TIMER1                9
.................... #define INT_DMA0                  69
.................... #define INT_IC2                   70
.................... #define INT_OC2                   71
.................... #define INT_TIMER2                72
.................... #define INT_TIMER3                73
.................... #define INT_SPI1E                 74
.................... #define INT_SPI1                  75
.................... #define INT_RDA                   76
.................... #define INT_TBE                   77
.................... #define INT_ADC1                  78
.................... #define INT_DMA1                  79
.................... #define INT_SI2C                  81
.................... #define INT_MI2C                  82
.................... #define INT_CNI                   84
.................... #define INT_EXT1                  85
.................... #define INT_IC7                   87
.................... #define INT_IC8                   88
.................... #define INT_DMA2                  89
.................... #define INT_OC3                   90
.................... #define INT_OC4                   91
.................... #define INT_TIMER4                92
.................... #define INT_TIMER5                93
.................... #define INT_EXT2                  94
.................... #define INT_RDA2                  95
.................... #define INT_TBE2                  96
.................... #define INT_SPI2E                 97
.................... #define INT_SPI2                  98
.................... #define INT_C1RX                  99
.................... #define INT_CAN1                  100
.................... #define INT_DMA3                  101
.................... #define INT_PWM1                  110
.................... #define INT_DMA4                  111
.................... #define INT_QEI                   123
.................... #define INT_DMA5                  126
.................... #define INT_PWM2                  127
.................... #define INT_FAULTA                128
.................... #define INT_UART1E                130
.................... #define INT_UART2E                131
.................... #define INT_QEI2                  132
.................... #define INT_DMA6                  133
.................... #define INT_DMA7                  134
.................... #define INT_C1TX                  135
.................... #define INT_FAULTA2               139
.................... #define INT_COMP                  152
.................... #define INT_PMP                   164
.................... #define INT_RTC                   173
.................... #define INT_CRC                   174
.................... #define INT_DAC1R                 177
.................... #define INT_DAC1L                 178
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... #include "algoritmo.h"
.................... /**
....................  @file    ALGORITMO.h
....................  @author  Ricardo Gomez, Klaudija Ziliute
....................  @brief   PanTompkins header file
.................... */
.................... 
.................... 
.................... #ifndef __ALGORITMO_H
.................... #define __ALGORITMO_H
.................... 
.................... #include "common.h"
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #include "adc.h"
.................... #include "BEEP.h"
.................... 
.................... int PPM; // variable global
.................... 
.................... void algoritmo();
.................... void init_algoritmo(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ALGORITMO_H
.................... 
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "BEEP.h"
.................... /**
....................  @file    BEEP.h
....................  @author  Julio Gomis-Tena
....................  @brief   Generate n "beeps" of variable frequency
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __BEEP_H
.................... #define __BEEP_H
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #pin_select OC2 = BUZZER
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP_Init(void); //Inicializa las frecuencias de los beeps y la separaciÃ³n entre ellos
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP(unsigned int8); //Realiza n beeps
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __BEEP_H
.................... 
.................... 
.................... int PPM; // variable global
.................... 
.................... void algoritmo();
.................... void init_algoritmo(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ALGORITMO_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... signed int yECG[5]; // 5 Ãºltimos valores
.................... unsigned int der, maximo, maximo_ant;
.................... unsigned int flag, k, umbral;
.................... float BCL, BCL2; // contador interno (1 BCL=4ms)
.................... 
.................... #INT_TIMER2
.................... 
.................... void timer2_isr()
*
00200:  PUSH    42
00202:  PUSH    36
00204:  PUSH    32
00206:  MOV     W0,[W15++]
00208:  MOV     #2,W0
0020A:  REPEAT  #C
0020C:  MOV     [W0++],[W15++]
.................... {
.................... 	//algoritmo();
.................... 	output_toggle(PIN_B10);
0020E:  BCLR.B  2C9.2
00210:  BTG.B   2CD.2
00212:  BCLR.B  84.7
00214:  MOV     #1A,W0
00216:  REPEAT  #C
00218:  MOV     [--W15],[W0--]
0021A:  MOV     [--W15],W0
0021C:  POP     32
0021E:  POP     36
00220:  POP     42
00222:  RETFIE  
.................... }
.................... 
.................... void init_algoritmo()
*
00482:  MOV     W5,[W15++]
.................... {
.................... 	BCL=0;
00484:  CLR     874
00486:  CLR     876
.................... 	k=0;
00488:  CLR     870
.................... 	umbral=0;
0048A:  CLR     872
.................... 	flag=0;
0048C:  CLR     86E
.................... 	maximo=0;
0048E:  CLR     86A
.................... 	maximo_ant=0;
00490:  CLR     86C
.................... 	for(int e=0; e<5; e++)
00492:  CLR     8C4
00494:  MOV     8C4,W4
00496:  CP      W4,#5
00498:  BRA     GE,4B8
.................... 	{
.................... 		yECG[e]=read_adc();
0049A:  MOV     8C4,W4
0049C:  MUL.UU  W4,#2,W0
0049E:  MOV     #85E,W4
004A0:  ADD     W0,W4,W5
004A2:  BCLR.B  320.0
004A4:  BSET.B  320.1
004A6:  BTSS.B  320.0
004A8:  BRA     4A6
004AA:  MOV     300,W4
004AC:  MOV     W4,[W5+#0]
.................... 		delay_ms(4);
004AE:  REPEAT  #3992
004B0:  NOP     
004B2:  INC     08C4
004B4:  GOTO    494
.................... 	}
.................... 	enable_interrupts(INT_TIMER2);
*
004B8:  BSET.B  94.7
004BA:  MOV     [--W15],W5
004BC:  RETURN  
.................... }
.................... 
.................... // Bucle principal del programa. Debe ejecutarse cada 4ms (250Hz).
.................... void algoritmo()
.................... {
.................... 
.................... 	yECG[4] = yECG[3];
.................... 	yECG[3] = yECG[2];
.................... 	yECG[2] = yECG[1];
.................... 	yECG[1] = yECG[0];
.................... 	yECG[0] = read_adc();
.................... 
.................... 	//Valor absoluto de la derivada
.................... 	der = (yECG[4] > yECG[0]) ? (yECG[4] - yECG[0]) : (yECG[0] - yECG[4]);
.................... 
.................... 	if(der > maximo) maximo = der;
.................... 
.................... 	if(flag == 0)
.................... 	{
.................... 		if(der > umbral)
.................... 		{
.................... 			flag = 1;
.................... 			// basal cycle length
.................... 			BCL2 = BCL;
.................... 			BCL = 0;
.................... 			BEEP(1);
.................... 		}
.................... 	}
.................... 
.................... 	if (flag == 1)
.................... 	{
.................... 		k++;
.................... 	}
.................... 
.................... 	//Durante 60 puntos = RR min = 0.24seg = 250 bpm
.................... 	//no se puede detectar otro punto RR
.................... 	//solo pasado ese tiempo se hace el calculo
.................... 
.................... 	if(k >60) // hay que calcular el tiempo que son 0.24s para nuestra freq (60 no)
.................... 	{
.................... 		k = 0;
.................... 		flag = 0;
.................... 
.................... 		//Me quedo con la Media del incremento MAX
.................... 		//De estos 200 puntos y del incremento de los anteriores
.................... 
.................... 		umbral = (maximo + maximo_ant)/2;
.................... 		maximo_ant = maximo;
.................... 		maximo = 0;
.................... 
.................... 		//Reduzco el umbral al 66%
.................... 
.................... 		umbral = umbral -(umbral/3);
.................... 	}
.................... 
.................... 	//Si pasa un rato
.................... 	//equivaldria a un pulso de 15bpm si se detectara punto R
.................... 	//y no se ha superado el umbral se reinicia
.................... 
.................... 	if(BCL > 1000)
.................... 	{
.................... 		maximo = 0;
.................... 		umbral = 0;
.................... 		flag = 1;
.................... 		BCL = 0;
.................... 	}
.................... 	//Calculo el ritmo cardiaco (si esta en rango fisiologico)
.................... 	//y si no permanece el valor anteriore
.................... 	//15000 son las muestras de 1 minuto (60000[ms]/4[ms/muestra])
.................... 
.................... 	if((BCL2 > 65) && (BCL2 < 500))
.................... 	{
.................... 		PPM = (int)(15000/BCL2);
.................... 	}
.................... 
.................... BCL=BCL+4;
.................... }
.................... 
.................... #include "BEEP.h"
.................... #include "BEEP.h"
.................... /**
....................  @file    BEEP.h
....................  @author  Julio Gomis-Tena
....................  @brief   Generate n "beeps" of variable frequency
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __BEEP_H
.................... #define __BEEP_H
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #pin_select OC2 = BUZZER
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP_Init(void); //Inicializa las frecuencias de los beeps y la separaciÃ³n entre ellos
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP(unsigned int8); //Realiza n beeps
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __BEEP_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #nolist
.................... //////// Program memory: 44032x24  Data RAM: 16384  Stack: 31
.................... //////// I/O: 35   Analog Pins: 9
.................... //////// Fuses: WRTB,NOWRTB,BSSHL,BSSHM,BSSHS,BSSSL,BSSSM,BSSSS,NOBSS
.................... //////// Fuses: RBS1024,RBS256,RBS128,NORBS,WRTSS,NOWRTSS,SSSHL,SSSHM,SSSHS
.................... //////// Fuses: SSSSL,SSSSM,SSSSS,NOSSS,RSS4096,RSS2048,RSS256,NORSS,WRT
.................... //////// Fuses: NOWRT,PROTECT_HIGH,PROTECT,NOPROTECT,FRC,FRC_PLL,PR,PR_PLL
.................... //////// Fuses: SOSC,LPRC,FRC_DIV_BY_16,FRC_PS,NOIESO,IESO,EC,XT,HS,NOPR
.................... //////// Fuses: OSCIO,NOOSCIO,NOIOL1WAY,IOL1WAY,CKSFSM,CKSNOFSM,NOCKSFSM
.................... //////// Fuses: WPOSTS1,WPOSTS2,WPOSTS3,WPOSTS4,WPOSTS5,WPOSTS6,WPOSTS7
.................... //////// Fuses: WPOSTS8,WPOSTS9,WPOSTS10,WPOSTS11,WPOSTS12,WPOSTS13,WPOSTS14
.................... //////// Fuses: WPOSTS15,WPOSTS16,WPRES32,WPRES128,NOWINDIS,WINDIS,NOWDT,WDT
.................... //////// Fuses: NOPUT,PUT2,PUT4,PUT8,PUT16,PUT32,PUT64,PUT128,ALTI2C1
.................... //////// Fuses: NOALTI2C1,LPOL_LOW,LPOL_HIGH,HPOL_LOW,HPOL_HIGH,PWMPIN
.................... //////// Fuses: NOPWMPIN,ICSP3,ICSP2,ICSP1,NOJTAG,JTAG,DEBUG,NODEBUG
.................... ////////
.................... #if (!defined(__PCD__)||defined(__ISNT_CCS__))
.................... #define _bif
.................... #define int8 char
.................... #define int16 int
.................... #define int32 long
.................... #define int48 long
.................... #define int64 long long
.................... #define float32 float
.................... #define float48 float
.................... #define float64 double
.................... #define int1 char
.................... 
.................... #endif
.................... ////////////////////////////////////////////////////////////////// PIN_SELECT
.................... // #pin_select function=pin
.................... // Valid Pins:
.................... //    PIN_B0,PIN_B1,PIN_B2,PIN_B3,PIN_B4,PIN_B5,PIN_B6,PIN_B7,PIN_B8,PIN_B9,
.................... //    PIN_B10,PIN_B11,PIN_B12,PIN_B13,PIN_B14,PIN_B15,PIN_C0,PIN_C1,PIN_C2,
.................... //    PIN_C3,PIN_C4,PIN_C5,PIN_C6,PIN_C7,PIN_C8,PIN_C9
.................... // Input Functions:
.................... //    INT1,INT2,T2CK,T3CK,T4CK,T5CK,IC1,IC2,IC3,IC4,IC5,OCFA,OCFB,U1RX,U1CTS,
.................... //    U2RX,U2CTS,SDI1,SCK1IN,SS1IN,SDI2,SCK2IN,SS2IN,C1RX,IC7,IC8,CSDI,CSCK,COFS,
.................... //    FLTA1,FLTA2,QEA1,QEB1,INDX1,QEA2,QEB2,INDX2,T1CK,FLT1,FLT2,FLT3,FLT4,FLT5,
.................... //    FLT6,FLT7,FLT8,SYNCI1,SYNCI2
.................... // Output Functions:
.................... //    NULL,C1OUT,C2OUT,U1TX,U1RTS,U2TX,U2RTS,SDO1,SCK1OUT,SS1OUT,SDO2,SCK2OUT,
.................... //    SS2OUT,OC1,OC2,OC3,OC4,OC5,C1TX,CSDO,CSCKOUT,COFSOUT,UPDN1,UPDN2,CTPLS,
.................... //    C3OUT,SYNCO1,REFCLKO,CMP1,CMP2,CMP3,CMP4,PWM4H,PWM4L
.................... //
.................... 
.................... ////////////////////////////////////////////////////////////////// I/O
.................... // Discrete I/O Functions: SET_TRIS_x(), OUTPUT_x(), INPUT_x(),
.................... //                         SET_PULLUP(), INPUT(),
.................... //                         OUTPUT_LOW(), OUTPUT_HIGH(),
.................... //                         OUTPUT_FLOAT(), OUTPUT_BIT()
.................... // Discrete I/O Prototypes:
.................... _bif void set_tris_a(unsigned int16 value);
.................... _bif void set_tris_b(unsigned int16 value);
.................... _bif void set_tris_c(unsigned int16 value);
.................... _bif unsigned int16 get_tris_a(void);
.................... _bif unsigned int16 get_tris_b(void);
.................... _bif unsigned int16 get_tris_c(void);
.................... _bif void output_a(unsigned int16 value);
.................... _bif void output_b(unsigned int16 value);
.................... _bif void output_c(unsigned int16 value);
.................... _bif unsigned int16 input_a(void);
.................... _bif unsigned int16 input_b(void);
.................... _bif unsigned int16 input_c(void);
.................... _bif int16 input_change_a(void);
.................... _bif int16 input_change_b(void);
.................... _bif int16 input_change_c(void);
.................... _bif void set_pullup(int1 state);
.................... _bif void set_pullup(int1 state, unsigned int16 pin);
.................... _bif void set_pulldown(int1 state);
.................... _bif void set_pulldown(int1 state, unsigned int16 pin);
.................... _bif int1 input(unsigned int16 pin);
.................... _bif int1 input_state(unsigned int16 pin);
.................... _bif void output_low(unsigned int16 pin);
.................... _bif void output_high(unsigned int16 pin);
.................... _bif void output_toggle(unsigned int16 pin);
.................... _bif void output_bit(unsigned int16 pin, int1 level);
.................... _bif void output_float(unsigned int16 pin);
.................... _bif void output_drive(unsigned int16 pin);
.................... // Constants used to identify pins in the above are:
.................... 
.................... #define PIN_A0  5648
.................... #define PIN_A1  5649
.................... #define PIN_A2  5650
.................... #define PIN_A3  5651
.................... #define PIN_A4  5652
.................... #define PIN_A7  5655
.................... #define PIN_A8  5656
.................... #define PIN_A9  5657
.................... #define PIN_A10  5658
.................... 
.................... #define PIN_B0  5712
.................... #define PIN_B1  5713
.................... #define PIN_B2  5714
.................... #define PIN_B3  5715
.................... #define PIN_B4  5716
.................... #define PIN_B5  5717
.................... #define PIN_B6  5718
.................... #define PIN_B7  5719
.................... #define PIN_B8  5720
.................... #define PIN_B9  5721
.................... #define PIN_B10  5722
.................... #define PIN_B11  5723
.................... #define PIN_B12  5724
.................... #define PIN_B13  5725
.................... #define PIN_B14  5726
.................... #define PIN_B15  5727
.................... 
.................... #define PIN_C0  5776
.................... #define PIN_C1  5777
.................... #define PIN_C2  5778
.................... #define PIN_C3  5779
.................... #define PIN_C4  5780
.................... #define PIN_C5  5781
.................... #define PIN_C6  5782
.................... #define PIN_C7  5783
.................... #define PIN_C8  5784
.................... #define PIN_C9  5785
.................... 
.................... ////////////////////////////////////////////////////////////////// Useful defines
.................... #define FALSE 0
.................... #define TRUE 1
.................... 
.................... #define BYTE unsigned int8
.................... #define BOOLEAN int1
.................... 
.................... #define getc getch
.................... #define fgetc getch
.................... #define getchar getch
.................... #define putc putchar
.................... #define fputc putchar
.................... #define fgets gets
.................... #define fputs puts
.................... 
.................... ////////////////////////////////////////////////////////////////// UART
.................... // UART Prototypes:
.................... _bif void setup_uart(unsigned int32 baud);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... _bif void set_uart_speed(unsigned int32 baud);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... // Constants used in setup_uart() are:
.................... // FALSE - Turn UART off
.................... // TRUE  - Turn UART on
.................... #define UART_ADDRESS           2
.................... #define UART_DATA              4
.................... #define UART_AUTODETECT        8
.................... #define UART_AUTODETECT_NOWAIT 9
.................... #define UART_WAKEUP_ON_RDA     10
.................... #define UART_SEND_BREAK        13
.................... 
.................... ////////////////////////////////////////////////////////////////// WDT
.................... // Watch Dog Timer Functions: SETUP_WDT() and RESTART_WDT()
.................... // WDT Prototypes:
.................... _bif void setup_wdt(unsigned int8 mode);
.................... _bif void restart_wdt(void);
.................... // Constants used for SETUP_WDT() are:
.................... #define WDT_ON      1
.................... #define WDT_OFF     0
.................... 
.................... #define  WDT_1MS    0x002
.................... #define  WDT_2MS    0x003
.................... #define  WDT_4MS    0x004
.................... #define  WDT_8MS    0x005
.................... #define  WDT_16MS   0x006
.................... #define  WDT_32MS   0x007
.................... #define  WDT_64MS   0x008
.................... #define  WDT_128MS  0x009
.................... #define  WDT_256MS  0x00A
.................... #define  WDT_512MS  0x00B
.................... #define  WDT_1S     0x00C
.................... #define  WDT_2S     0x00D
.................... #define  WDT_4S     0x00E
.................... #define  WDT_8S     0x00F
.................... #define  WDT_16S    0x010
.................... #define  WDT_33S    0x011
.................... #define  WDT_65S    0x030
.................... #define  WDT_131S   0x031
.................... 
.................... ////////////////////////////////////////////////////////////////// Control
.................... // Control Functions:  RESET_CPU(), SLEEP(), RESTART_CAUSE()
.................... // Prototypes:
.................... _bif unsigned int8 restart_cause(void);
.................... _bif void reset_cpu(void);
.................... _bif void sleep(void);
.................... _bif void sleep(unsigned int8 mode);
.................... // Constants passed into RESTART_CAUSE() are:
.................... #define RESTART_POWER_UP      0
.................... #define RESTART_BROWNOUT      1
.................... #define RESTART_WATCHDOG      4
.................... #define RESTART_SOFTWARE      6
.................... #define RESTART_MCLR          7
.................... #define RESTART_ILLEGAL_OP    14
.................... #define RESTART_TRAP_CONFLICT 15
.................... //
.................... // Constants passed into SLEEP() are:
.................... #define SLEEP_FULL      0  // Default
.................... #define SLEEP_IDLE      1  // Clock and peripherals don't stop
.................... 
.................... ////////////////////////////////////////////////////////////////// INTERNAL RC
.................... // Oscillator Prototypes:
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target);
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target, unsigned int32 source);
.................... // Constants used in setup_oscillator() are:
.................... #define OSC_INTERNAL     32
.................... #define OSC_CRYSTAL       1
.................... #define OSC_CLOCK         2
.................... #define OSC_RC            3
.................... #define OSC_SECONDARY    16
.................... 
.................... ////////////////////////////////////////////////////////////////// Timer
.................... // Timer Functions: SETUP_TIMERx, GET_TIMERx, GET_TIMERxy,
.................... // SET_TIMERx, SET_TIMERxy
.................... // Timer x Prototypes:
.................... _bif void setup_timer1(unsigned int16 mode);
.................... _bif void setup_timer1(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer1(void);
.................... _bif void set_timer1(unsigned int16 value);
.................... _bif void setup_timer2(unsigned int16 mode);
.................... _bif void setup_timer2(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer2(void);
.................... _bif void set_timer2(unsigned int16 value);
.................... _bif void setup_timer3(unsigned int16 mode);
.................... _bif void setup_timer3(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer3(void);
.................... _bif void set_timer3(unsigned int16 value);
.................... _bif unsigned int32 get_timer23(void);
.................... _bif void set_timer23(unsigned int32 value);
.................... _bif void setup_timer4(unsigned int16 mode);
.................... _bif void setup_timer4(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer4(void);
.................... _bif void set_timer4(unsigned int16 value);
.................... _bif void setup_timer5(unsigned int16 mode);
.................... _bif void setup_timer5(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer5(void);
.................... _bif void set_timer5(unsigned int16 value);
.................... _bif unsigned int32 get_timer45(void);
.................... _bif void set_timer45(unsigned int32 value);
.................... // Constants used for SETUP_TIMERx() are:
.................... //      (or (via |) together constants from each group)
.................... #define TMR_DISABLED 0x0000
.................... #define TMR_INTERNAL 0x8000
.................... #define TMR_EXTERNAL 0x8002
.................... #define TMR_GATE     0x0040
.................... 
.................... #define TMR_DIV_BY_1   0x0000
.................... #define TMR_DIV_BY_8   0x0010
.................... #define TMR_DIV_BY_64  0x0020
.................... #define TMR_DIV_BY_256 0x0030
.................... #define TMR_32_BIT     0x0008 // Only for even numbered timers
.................... 
.................... #define TMR_HALT_IDLE      0x2000
.................... #define TMR_CONTINUE_IDLE  0x0000
.................... 
.................... #define T1_EXTERNAL_SYNC  0x8006 //This only applies to Timer1
.................... #define T1_EXTERNAL_RTC   0xC002 //This only applies to Timer1
.................... /////////////////////////////////////////////////////////// INPUT CAPTURE
.................... // Functions: SETUP_CAPTURE, GET_CAPTURE,
.................... // IC Prototypes:
.................... _bif void setup_capture(unsigned int8 module, unsigned int16 mode);
.................... _bif unsigned int16 get_capture(unsigned int8 module);
.................... _bif unsigned int16 get_capture(unsigned int8 module, int1 wait);
.................... // Constants used for SETUP_CAPTURE() are:
.................... #define CAPTURE_OFF               0x0000  // Capture OFF
.................... #define CAPTURE_EE                0x0001  // Capture Every Edge
.................... #define CAPTURE_FE                0x0002  // Capture Falling Edge
.................... #define CAPTURE_RE                0x0003  // Capture Rising Edge
.................... #define CAPTURE_DIV_4             0x0004  // Capture Every 4th Rising Edge
.................... #define CAPTURE_DIV_16            0x0005  // Capture Every 16th Rising Edge
.................... #define CAPTURE_INTERRUPT_ONLY    0x0007  // Interrupt on Rising Edge when in Sleep or Idle
.................... 
.................... // The following defines can be ORed | with above to configure interrupts
.................... #define INTERRUPT_EVERY_CAPTURE   0x0000  // Interrupt on every capture event
.................... #define INTERRUPT_SECOND_CAPTURE  0x0020  // Interrupt on every second capture event
.................... #define INTERRUPT_THIRD_CAPTURE   0x0040  // Interrupt on every third capture event
.................... #define INTERRUPT_FOURTH_CAPTURE  0x0060  // Interrupt on every fourth capture event
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define CAPTURE_TIMER2            0x0080  // On capture event Timer 2 is captured
.................... #define CAPTURE_TIMER3            0x0000  // On capture event Timer 3 is captured
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define CAPTURE_HALT_IDLE         0x2000  // Capture module halts during idle mode
.................... #define CAPTURE_CONTINUE_IDLE     0x0000  // Capture module continues during idle mode
.................... 
.................... /////////////////////////////////////////////////////////// OUTPUT COMPARE
.................... // Functions: SETUP_COMPARE, SET_PWM_DUTY, SET_COMPARE_TIME
.................... // OC Prototypes:
.................... _bif void setup_compare(unsigned int8 module, unsigned int16 mode);
.................... _bif void set_pwm_duty(unsigned int8 module, unsigned int16 duty);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr, unsigned int16 ocrs);
.................... // Constants used for SETUP_COMPARE() are:
.................... #define COMPARE_OFF               0x0000  // Compare OFF
.................... #define COMPARE_SET_ON_MATCH      0x0001  // Pin from low to high on match
.................... #define COMPARE_CLR_ON_MATCH      0x0002  // Pin from high to low on match
.................... #define COMPARE_TOGGLE            0x0003  // Pin will toggle on every match occurrence
.................... #define COMPARE_SINGLE_PULSE      0x0004  // Pin will generate single pulse on first match
.................... #define COMPARE_CONT_PULSE        0x0005  // Pin will pulse for every match
.................... #define COMPARE_PWM               0x0006  // Compare operates as PWM with fault pin disabled
.................... #define COMPARE_PWM_FAULT         0x0007  // Compare operates as PWM with fault pin enabled
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define COMPARE_TIMER2            0x0000  // Timer 2 is the base timer
.................... #define COMPARE_TIMER3            0x0008  // Timer 3 is the base timer
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define COMPARE_HALT_IDLE         0x2000  // Compare module halts during idle mode
.................... #define COMPARE_CONTINUE_IDLE     0x0000  // Compare module continues during idle mode
.................... 
.................... ////////////////////////////////////////////////////////////////// SPI
.................... // SPI Functions: SETUP_SPI, SPI_WRITE, SPI_READ, SPI_DATA_IN
.................... // SPI Prototypes:
.................... _bif void setup_spi(unsigned int16 mode);
.................... _bif void spi_write(unsigned int8 data);
.................... _bif void spi_write(int1 wait, unsigned int8 data);
.................... _bif void spi_write_16(unsigned int16 data);
.................... _bif void spi_write_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read(void);
.................... _bif unsigned int8 spi_read(unsigned int8 data);
.................... _bif unsigned int16 spi_read_16(void);
.................... _bif unsigned int16 spi_read_16(unsigned int16 data);
.................... _bif int1 spi_data_in(void);
.................... _bif void setup_spi2(unsigned int16 mode);
.................... _bif void spi_write2(unsigned int8 data);
.................... _bif void spi_write2(int1 wait, unsigned int8 data);
.................... _bif void spi_write2_16(unsigned int16 data);
.................... _bif void spi_write2_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read2(void);
.................... _bif unsigned int8 spi_read2(unsigned int8 data);
.................... _bif unsigned int16 spi_read2_16(void);
.................... _bif unsigned int16 spi_read2_16(unsigned int16 data);
.................... _bif int1 spi_data_in2(void);
.................... // Constants used in SETUP_SPI() are:
.................... //      (or (via |) together constants from each group)
.................... #define SPI_MASTER                 0x0020
.................... #define SPI_SLAVE                  0x0000
.................... 
.................... #define SPI_SCK_IDLE_HIGH          0x0040
.................... #define SPI_SCK_IDLE_LOW           0x0000
.................... 
.................... #define SPI_XMIT_L_TO_H            0x0100
.................... #define SPI_XMIT_H_TO_L            0x0000
.................... 
.................... #define SPI_MODE_16B               0x0400
.................... #define SPI_MODE_8B                0x0000
.................... 
.................... #define SPI_SAMPLE_AT_END          0x0200
.................... #define SPI_SAMPLE_AT_MIDDLE       0x0000
.................... 
.................... #define SPI_SS_ENABLED             0x0000
.................... #define SPI_SS_DISABLED            0x0080
.................... 
.................... //or (via |) one of the following when operating as MASTER
.................... #define SPI_CLK_DIV_1              0x001F
.................... #define SPI_CLK_DIV_2              0x001B
.................... #define SPI_CLK_DIV_3              0x0017
.................... #define SPI_CLK_DIV_4              0x001E
.................... #define SPI_CLK_DIV_5              0x000F
.................... #define SPI_CLK_DIV_6              0x000B
.................... #define SPI_CLK_DIV_7              0x0007
.................... #define SPI_CLK_DIV_8              0x0003
.................... #define SPI_CLK_DIV_12             0x0016
.................... #define SPI_CLK_DIV_16             0x001D
.................... #define SPI_CLK_DIV_20             0x000E
.................... #define SPI_CLK_DIV_24             0x000A
.................... #define SPI_CLK_DIV_28             0x0006
.................... #define SPI_CLK_DIV_32             0x0002
.................... #define SPI_CLK_DIV_48             0x0015
.................... #define SPI_CLK_DIV_64             0x001C
.................... #define SPI_CLK_DIV_80             0x000D
.................... #define SPI_CLK_DIV_96             0x0009
.................... #define SPI_CLK_DIV_112            0x0005
.................... #define SPI_CLK_DIV_128            0x0001
.................... #define SPI_CLK_DIV_192            0x0014
.................... #define SPI_CLK_DIV_256            0x0010
.................... #define SPI_CLK_DIV_320            0x000C
.................... #define SPI_CLK_DIV_384            0x0008
.................... #define SPI_CLK_DIV_448            0x0004
.................... #define SPI_CLK_DIV_512            0x0000
.................... 
.................... //The following defines are provided for compatibility
.................... #define SPI_L_TO_H         SPI_SCK_IDLE_LOW
.................... #define SPI_H_TO_L         SPI_SCK_IDLE_HIGH
.................... 
.................... ////////////////////////////////////////////////////////////////// ADC
.................... // ADC Functions: SETUP_ADC(), SETUP_ADC_PORTS()
.................... //                SET_ADC_CHANNEL(), READ_ADC()
.................... // ADC Prototypes:
.................... _bif void setup_adc(unsigned int32 mode);
.................... _bif void setup_adc_ports(unsigned int32 pins);
.................... _bif void setup_adc_ports(unsigned int32 pins, unsigned int16 reference);
.................... _bif void set_adc_channel(unsigned int8 channel);
.................... _bif void set_adc_channel(unsigned int8 channel, unsigned int8 neg_channel);
.................... _bif unsigned int16 read_adc(void);
.................... _bif unsigned int16 read_adc(unsigned int8 mode);
.................... _bif int1 adc_done(void);
.................... // Constants used for SETUP_ADC() are:
.................... // Clock is at ADCS<5:0> of ADCON3 Reg. (0x02A4)
.................... // Tad = (Tcy/2)*(ADCS<5:0>+1)
.................... #define ADC_OFF                 0x10000
.................... #define ADC_CLOCK                0x0000
.................... #define ADC_CLOCK_DIV_2          0x0001
.................... #define ADC_CLOCK_DIV_4          0x0003
.................... #define ADC_CLOCK_DIV_8          0x0007
.................... #define ADC_CLOCK_DIV_16         0x000F
.................... #define ADC_CLOCK_DIV_32         0x001F
.................... #define ADC_CLOCK_DIV_64         0x003F
.................... #define ADC_CLOCK_INTERNAL       0x8000     // Internal
.................... 
.................... // One of the following may be OR'ed in with the above using |
.................... // Auto-Sample Time bits
.................... #define ADC_TAD_MUL_0            0x1F00
.................... #define ADC_TAD_MUL_2            0x1D00
.................... #define ADC_TAD_MUL_4            0x1B00
.................... #define ADC_TAD_MUL_8            0x1700
.................... #define ADC_TAD_MUL_16           0x0F00
.................... #define ADC_TAD_MUL_31           0x0000
.................... 
.................... // Constants used in READ_ADC() are:
.................... #define ADC_START_AND_READ       0x07
.................... #define ADC_START_ONLY           0x01
.................... #define ADC_READ_ONLY            0x06
.................... 
.................... // Constants used in SET_ADC_CHANNEL() second parameter are:
.................... #define VSS                      0
.................... 
.................... // Constants used in SETUP_ADC_PORTS() are:
.................... // First argument:
.................... // OR together desired pins
.................... #define NO_ANALOGS      0           // None
.................... #define ALL_ANALOG      0xFFFFFFFF  // All
.................... #define sAN0      0x00000001 //| A0
.................... #define sAN1      0x00000002 //| A1
.................... #define sAN2      0x00000004 //| B0
.................... #define sAN3      0x00000008 //| B1
.................... #define sAN4      0x00000010 //| B2
.................... #define sAN5      0x00000020 //| B3
.................... #define sAN6      0x00000040 //| C0
.................... #define sAN7      0x00000080 //| C1
.................... #define sAN8      0x00000100 //| C2
.................... 
.................... // Optional Second argument:
.................... #define VSS_VDD            0x0000 // Range 0-Vdd
.................... #define VREF_VREF          0x6000 // Range VrefL-VrefH
.................... #define VREF_VDD           0x4000 // Range VrefL-Vdd
.................... #define VSS_VREF           0x2000 // Range 0-VrefH
.................... 
.................... ////////////////////////////////////////////////////////////////// COMP
.................... // Comparator Functions: setup_comparator()
.................... // Comparator Variables: C1OUT, C2OUT
.................... // Comparator Prototypes:
.................... _bif void setup_comparator(unsigned int16 mode);
.................... // Constants used in setup_comparator() are:
.................... #define NC_NC_NC_NC      0
.................... #define B2_B3_NC_NC      0x401
.................... #define B2_VR_NC_NC      0x400
.................... #define B3_VR_NC_NC      0x402
.................... #define NC_NC_B0_B1      0x804
.................... #define NC_NC_B0_VR      0x800
.................... #define NC_NC_B1_VR      0x808
.................... #define B2_B3_B0_B1      B2_B3_NC_NC | NC_NC_B0_B1
.................... #define B2_VR_B0_VR      B2_VR_NC_NC | NC_NC_B0_VR
.................... #define B3_VR_B1_VR      B3_VR_NC_NC | NC_NC_B1_VR
.................... 
.................... #define C1_INVERT     0x10
.................... #define C2_INVERT     0x20
.................... #define C1_OUTPUT     0x100
.................... #define C2_OUTPUT     0x200
.................... 
.................... #bit C1OUT = getenv("SFR:CMCON").6
.................... #bit C2OUT = getenv("SFR:CMCON").7
.................... 
.................... ////////////////////////////////////////////////////////////////// VREF
.................... // VREF Prototypes:
.................... _bif void setup_vref(unsigned int16 mode);
.................... // Constants used in setup_vref() are:
.................... #define VREF_DISABLED  0x0000
.................... #define VREF_VSS_VDD   0x0080
.................... #define VREF_ANALOG    0x0090
.................... // One of the following maybe OR'ed in with the above using |
.................... #define VREF_HIGH      0x0080
.................... #define VREF_LOW       0x00A0
.................... // The following maybe OR'ed in with the above using |
.................... #define VREF_OUTPUT    0x0040
.................... // Or (with |) the above with a number 0-15
.................... 
.................... ////////////////////////////////////////////////////////////////// PMP
.................... // PMP Functions: setup_pmp(), pmp_address(), psp_read(), pmp_read(),
.................... // psp_write(), pmp_write(), psp_output_full(),psp_input_full(),
.................... // psp_overflow(), pmp_output_full(), pmp_input_full(),
.................... // pmp_overflow()
.................... // PMP Prototypes:
.................... _bif void setup_pmp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif void pmp_address(unsigned int16 address);
.................... _bif unsigned int8 pmp_read(void);
.................... _bif void pmp_write(unsigned int8 data);
.................... _bif int1 pmp_output_full(void);
.................... _bif int1 pmp_input_full(void);
.................... _bif int1 pmp_overflow(void);
.................... _bif void setup_psp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif unsigned int8 psp_read(void);
.................... _bif unsigned int8 psp_read(unsigned int16 address);
.................... _bif void psp_write(unsigned int8 data);
.................... _bif void psp_write(unsigned int8 data, unsigned int16 address);
.................... _bif int1 psp_output_full(void);
.................... _bif int1 psp_input_full(void);
.................... _bif int1 psp_overflow(void);
.................... // Constants used in SETUP_PMP() and SETUP_PSP() are:
.................... #define PAR_ENABLE                0x8000
.................... #define PAR_DISABLE               0x0000    // Module enable/disable options
.................... #define PAR_STOP_IN_IDLE          0x2000
.................... #define PAR_CONTINUE_IN_IDLE      0x0000
.................... #define PAR_ADDR_NOT_MULTIPLEXED  0x0000    // Address multiplexing options
.................... #define PAR_LOW_ADDR_MULTIPLEXED  0x0800    // Address multiplexing options
.................... #define PAR_FULL_ADDR_MULTIPLEXED 0x1000    // Address multiplexing options
.................... #define PAR_PTBEEN_ENABLE         0x0400  // Byte Enable Port Enable bit
.................... #define PAR_PTWREN_ENABLE         0x0200  // Write Enable Strobe bit
.................... #define PAR_PTRDEN_ENABLE         0x0100  // Read/Write Strobe Port bit
.................... #define PAR_ALP_ACTIVE_HIGH       0x0020 // Address latch polarity high
.................... #define PAR_BEP_ACTIVE_HIGH       0x0004 // Byte Enable Polarity
.................... #define PAR_WRSP_ACTIVE_HIGH      0x0002 // Write strobe Polarity bit
.................... #define PAR_RDSP_ACTIVE_HIGH      0x0001 // Read strobe Polarity bit
.................... #define PAR_CS_XX                 0x0000   // Chip select pins used for address
.................... #define PAR_CS_X1                 0x0008   // Chip select pin 1 used, active high
.................... #define PAR_CS_X0                 0x0000   // Chip select pin 1 used, active low
.................... #define PAR_CS_1X                 0x0050   // Chip select pin 2 used, active high
.................... #define PAR_CS_0X                 0x0040   // Chip select pin 2 used, active low
.................... #define PAR_CS_00                 0x0080   // Chip select pins 1,2 used, active low
.................... #define PAR_CS_11                 0x0098   // Chip select pins 1,2 used, active high
.................... #define PAR_CS_10                 0x0090   // Chip select pins 1,2 used, 1 is active low, 2 is high
.................... #define PAR_CS_01                 0x0088   // Chip select pins 1,2 used, 1 is active high, 2 is low
.................... #define PAR_INTR_ON_RW                0x20000000  // Interrupt on read write
.................... #define PAR_NO_INTR_STALL_ACTIVATED   0x40000000  // No interrupt, processor stall activated
.................... #define PAR_INTR_ON_3_RW_BUF          0x60000000 // Interrupt on write to Buffer 3 or read from Buffer 3
.................... #define PAR_PSP_AUTO_INC              0x18000000 // Read write buffers auto increment
.................... #define PAR_DEC_ADDR                  0x10000000 // Increment the address
.................... #define PAR_INC_ADDR                  0x08000000 // Decrement the address
.................... #define PAR_MASTER_MODE_1             0x03000000  // Master mode 1
.................... #define PAR_MASTER_MODE_2             0x02000000  // Master mode 2
.................... #define PAR_WAITB1                    0x00000000 // 1 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB2                    0x00400000 // 2 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB3                    0x00800000 // 3 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB4                    0x00C00000 // 4 Tcy Wait state for data setup R/W
.................... #define PAR_WAITM0                    0x00000000 // 0 wait state for Read to byte
.................... #define PAR_WAITM1                    0x00040000 // 1 Tcy wait state for Read to byte
.................... #define PAR_WAITM2                    0x00080000 // 2 Tcy wait state for Read to byte
.................... #define PAR_WAITM3                    0x000C0000 // 3 Tcy wait state for Read to byte
.................... #define PAR_WAITM15                   0x003C0000 // 15 wait states
.................... #define PAR_WAITE1                    0x00000000  // 1 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE2                    0x00010000 // 2 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE3                    0x00020000 // 3 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE4                    0x00030000 // 4 Tcy Wait for data hold after strobe
.................... 
.................... ////////////////////////////////////////////////////////////////// CRC
.................... // CRC Functions: setup_crc(), crc_init(), crc_calc(), crc_calc8()
.................... // CRC Prototypes:
.................... _bif void setup_crc(unsigned int8 poly_terms, ...);
.................... _bif void crc_init(unsigned int16 value);
.................... _bif unsigned int16 crc_calc(unsigned int16 data);
.................... _bif unsigned int16 crc_calc(unsigned int16 *ptr, unsigned int16 count);
.................... _bif unsigned int8 crc_calc8(unsigned int8 data);
.................... _bif unsigned int8 crc_calc8(unsigned int8 *ptr, unsigned int16 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// RTC
.................... // RTC Functions: setup_rtc(), setup_rtc_alarm(), rtc_read(),
.................... //                rtc_write(), rtc_alarm_read(), rtc_alarm_write()
.................... // Structure used in read and write functions (pass pointer):
.................... typedef struct {
....................    unsigned int8 tm_year;
....................    unsigned int8 tm_temp;  // Not used by built in functions, place holder only do not use
....................    unsigned int8 tm_mday;
....................    unsigned int8 tm_mon;
....................    unsigned int8 tm_hour;
....................    unsigned int8 tm_wday;
....................    unsigned int8 tm_sec;
....................    unsigned int8 tm_min;
....................    unsigned int8 tm_isdst; // Not used by built in functions
.................... } rtc_time_t;
.................... // RTC Prototypes:
.................... _bif void setup_rtc(unsigned int16 mode, unsigned int8 calibration);
.................... _bif void setup_rtc_alarm(unsigned int16 mode, unsigned int16 mask, unsigned int8 repeat);
.................... _bif void rtc_read(rtc_time_t *time);
.................... _bif void rtc_write(rtc_time_t *time);
.................... _bif void rtc_alarm_read(rtc_time_t *time);
.................... _bif void rtc_alarm_write(rtc_time_t *time);
.................... // Constants used in setup_rtc() are:  // Second param is calibration
.................... #define RTC_ENABLE           0x8000
.................... #define RTC_DISABLE          0
.................... #define RTC_OUTPUT_SECONDS   0x20400
.................... #define RTC_OUTPUT_ALARM     0x00400
.................... //
.................... // Constants used in setup_rtc_alarm() first param are:
.................... #define RTC_ALARM_ENABLE     0x8000
.................... #define RTC_ALARM_DISABLE    0
.................... #define RTC_CHIME_ENABLE     0x4000
.................... #define RTC_CHIME_DISABLE    0
.................... // Constants used in setup_rtc_alarm() second param are:  // Third param is repeat#
.................... #define RTC_ALARM_HALFSECOND 0x0000
.................... #define RTC_ALARM_SECOND     0x0400
.................... #define RTC_ALARM_10_SECONDS 0x0800
.................... #define RTC_ALARM_MINUTE     0x0C00
.................... #define RTC_ALARM_10_MINUTES 0x1000
.................... #define RTC_ALARM_HOUR       0x1400
.................... #define RTC_ALARM_DAY        0x1800
.................... #define RTC_ALARM_WEEK       0x1C00
.................... #define RTC_ALARM_MONTH      0x2000
.................... #define RTC_ALARM_YEAR       0x2400
.................... 
.................... ////////////////////////////////////////////////////////////////// QEI
.................... // QEI Functions: setup_qei(), qei_set_count(), qei_get_count(),
.................... //                qei_status()
.................... // QEI Prototypes:
.................... _bif void setup_qei(unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void setup_qei(unsigned int8 unit, unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void qei_set_count(unsigned int16 count);
.................... _bif void qei_set_count(unsigned int8 unit, unsigned int16 count);
.................... _bif unsigned int16 qei_get_count(void);
.................... _bif unsigned int16 qei_get_count(unsigned int8 unit);
.................... _bif unsigned int16 qei_status(void);
.................... _bif unsigned int16 qei_status(unsigned int8 unit);
.................... // Constants used in setup_qei() first param are:
.................... #define QEI_DISABLED        0
.................... #define QEI_MODE_X2         0x0400
.................... #define QEI_MODE_X4         0x0600
.................... #define QEI_MODE_TIMER      0x0100
.................... #define QEI_STOP_WHEN_IDLE  0x2000
.................... #define QEI_SWAP_AB         0x0080
.................... #define QEI_OUTPUT_ENABLE   0x0040
.................... #define QEI_RESET_WHEN_MAXCOUNT  0x0100
.................... #define QEI_RESET_WHEN_IDX_PULSE 0x0004
.................... #define QEI_TIMER_GATED      0x0020
.................... #define QEI_TIMER_INTERNAL   0x0000
.................... #define QEI_TIMER_EXTERNAL   0x0002
.................... #define QEI_TIMER_DIV_BY_1   0x0000
.................... #define QEI_TIMER_DIV_BY_8   0x0008
.................... #define QEI_TIMER_DIV_BY_64  0x0010
.................... #define QEI_TIMER_DIV_BY_256 0x0018
.................... // Constants used in setup_qei() second param are:   // Third param is MAXCOUNT
.................... #define QEI_FILTER_DIV_1     0x0000
.................... #define QEI_FILTER_DIV_2     0x0010
.................... #define QEI_FILTER_DIV_4     0x0020
.................... #define QEI_FILTER_DIV_16    0x0030
.................... #define QEI_FILTER_DIV_32    0x0040
.................... #define QEI_FILTER_DIV_64    0x0050
.................... #define QEI_FILTER_DIV_128   0x0060
.................... #define QEI_FILTER_DIV_256   0x0070
.................... #define QEI_FILTER_OUTPUT    0x0080
.................... #define QEI_NO_ERROR_INTS    0x0100
.................... #define QEI_IDX_WHEN_A0      0x0000  // for 2X mode
.................... #define QEI_IDX_WHEN_A1      0x0200  // for 2X mode
.................... #define QEI_IDX_WHEN_B0      0x0400  // for 2X mode
.................... #define QEI_IDX_WHEN_B1      0x0600  // for 2X mode
.................... #define QEI_IDX_WHEN_A0_B0   0x0000  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B0   0x0200  // for 4X mode
.................... #define QEI_IDX_WHEN_A0_B1   0x0400  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B1   0x0600  // for 4X mode
.................... // Constants returned from qei_status() are:
.................... #define QEI_POS_ERROR        0x8000
.................... #define QEI_FORWARD          0x0800
.................... #define QEI_INDEX_PIN        0x1000
.................... 
.................... ////////////////////////////////////////////////////////////////// MOTOR PWM
.................... // MPWM Functions: setup_motor_pwm(), set_motor_unit(),
.................... //                 set_motor_pwm_duty(), set_motor_pwm_event(),
.................... //                 get_motor_pwm_count()
.................... // MPWM Prototypes:
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int32 timebase);
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int8 prescale, unsigned int8 postscale, unsigned int16 period);
.................... _bif void set_motor_unit(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 mode, unsigned int8 active_deadtime, unsigned int8 inactive_deadtime);
.................... _bif void set_motor_pwm_duty(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 duty);
.................... _bif void set_motor_pmw_event(unsigned int8, signed int16 time);
.................... _bif unsigned int16 get_motor_pwm_count(unsigned int8 pwm);
.................... // Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):
.................... #define MPWM_DISABLED          0
.................... #define MPWM_FREE_RUN          0x8000
.................... #define MPWM_SINGLE_PULSE      0x8001
.................... #define MPWM_UP_DOWN           0x8002
.................... #define MPWM_UP_DOWN_WITH_INTS 0x8003
.................... // OR in any of the following:
.................... #define MPWM_HALT_WHEN_IDLE            0x2000
.................... #define MPWM_DUTY_UPDATES_IMMEADIATE  0x40000
.................... #define MPWM_SYNC_OVERRIDES           0x20000
.................... #define MPWM_DISABLE_UPDATES          0x10000
.................... #define MPWM_LATCH_FAULTS            0x100000
.................... 
.................... // Constants used in set_motor_unit() third param are:  (first param is unit number 1,2... and second param is pwm pin pair 1,2,3 or 4)
.................... #define MPWM_INDEPENDENT     0x0001
.................... #define MPWM_ENABLE          0x0006  // both H and L
.................... #define MPWM_ENABLE_H        0x0004
.................... #define MPWM_ENABLE_L        0x0002
.................... 
.................... #define MPWM_FORCE_L_0       0x0010
.................... #define MPWM_FORCE_L_1       0x0050
.................... #define MPWM_FORCE_H_0       0x0020
.................... #define MPWM_FORCE_H_1       0x00A0
.................... 
.................... #define MPWM_FAULTA_LA_HA     0x0700
.................... #define MPWM_FAULTA_LA_HI     0x0500
.................... #define MPWM_FAULTA_LI_HA     0x0600
.................... #define MPWM_FAULTA_LI_HI     0x0400
.................... #define MPWM_FAULTB_LA_HA     0x7000
.................... #define MPWM_FAULTB_LA_HI     0x5000
.................... #define MPWM_FAULTB_LI_HA     0x6000
.................... #define MPWM_FAULTB_LI_HI     0x4000
.................... #define MPWM_FAULT_NO_CHANGE 0x0000
.................... 
.................... ////////////////////////////////////////////////////////////////// DCI
.................... // DCI Functions: setup_dci(), dci_start(), dci_read(), dci_write(),
.................... //                dci_data_received(), dci_transmit_ready()
.................... // DCI Prototypes:
.................... _bif void setup_dci(unsigned int16 mode, unsigned int16 size, unsigned int16 receive_slot, unsigned int16 transmit_slot, unsigned int16 sample_rate);
.................... _bif void dci_start(void);
.................... _bif signed int16 dci_read(void);
.................... _bif void dci_write(signed int16);
.................... _bif int1 dci_data_received(void);
.................... _bif int1 dci_transmit_ready(void);
.................... // Constants used in setup_dci() first param are:
.................... #define MULTICHANNEL_MODE  0x0000
.................... #define I2S_MODE           0x0001
.................... #define AC97_16BIT_MODE    0x0002
.................... #define AC97_20BIT_MODE    0x0003
.................... 
.................... #define JUSTIFY_DATA       0x0020 //Start data transmission on the same clock cycle as COFS pulses (multichannel)
.................... #define MULTI_DEVICE_BUS   0x0040 //Tri-states the CSDO pin during unused time slots, normally drives '0'
.................... 
.................... #define UNDERFLOW_LAST     0x0080 //Transmits the last written value to the dci when data underflow occurs. Default is undeflow silence.
.................... #define UNDERFLOW_SILENCE  0x0000 //Transmit '0's on data undeflow. This will cause a clicking noise if you are underflowing data while outputing to a codec.
.................... 
.................... #define DCI_SLAVE          0x0100 //Default is master
.................... #define DCI_MASTER         0x0000
.................... 
.................... #define SAMPLE_FALLING_EDGE 0x0000 //Default is Sample on the rising edge of the clock
.................... #define SAMPLE_RISING_EDGE 0x0200
.................... 
.................... #define DCI_CLOCK_INPUT    0x0400 //SCLK is an input (supplied by codec or external source)
.................... #define DCI_CLOCK_OUTPUT   0x0000 //Default is clock output
.................... 
.................... #define ENABLE_LOOPBACK    0x0800 //Connect the CSDI/CSDO internally; loops all of the sound back onto the bus
.................... 
.................... #define CODEC_MULTICHANNEL  0x0000  //enables multichannel (generic) codec support
.................... #define CODEC_I2S           0x0001  //enables the I2S protocol
.................... #define CODEC_AC16          0x0002  //enables the AC-16 protocol, setupCodecTransmission has no effect
.................... #define CODEC_AC20          0x0003  //enables the AC-20 protocol, setupCodecTransmission has no effect
.................... 
.................... #define BUS_MASTER          0x0000  //designates this device as the bus master
.................... #define BUS_SLAVE           0x0300  //designates this device as a slave on a bus controlled by another codec
.................... 
.................... #define TRISTATE_BUS        0x0040        //when in master mode, the module will be in high impedance
....................                                     //during disabled frames (default drives 0's onto bus)
.................... #define SYNC_COFS_DATA_PULSE 0x0020 //signifies that data starts transmitting on the same SCK pulse as the edge of the COFS pulse
....................                                     //(default data starts on the clock after the rising edge of COFS
.................... /* Determines when a sample is taken */
.................... #define SAMPLE_RISING        0x0200 //sample data on the rising edge of the clock
.................... #define SAMPLE_FALLING       0x0000 //sample data on the falling edge of the clock
.................... 
.................... // Constants used in setup_dci() second param are:
.................... #define DCI_4BIT_WORD      0x0003
.................... #define DCI_5BIT_WORD      0x0004
.................... #define DCI_6BIT_WORD      0x0005
.................... #define DCI_7BIT_WORD      0x0006
.................... #define DCI_8BIT_WORD      0x0007
.................... #define DCI_9BIT_WORD      0x0008
.................... #define DCI_10BIT_WORD     0x0009
.................... #define DCI_11BIT_WORD     0x000A
.................... #define DCI_12BIT_WORD     0x000B
.................... #define DCI_13BIT_WORD     0x000C
.................... #define DCI_14BIT_WORD     0x000D
.................... #define DCI_15BIT_WORD     0x000E
.................... #define DCI_16BIT_WORD     0x000F
.................... 
.................... #define DCI_1WORD_FRAME    0x0000
.................... #define DCI_2WORD_FRAME    0x0010 << 1
.................... #define DCI_3WORD_FRAME    0x0020 << 1
.................... #define DCI_4WORD_FRAME    0x0030 << 1
.................... #define DCI_5WORD_FRAME    0x0040 << 1
.................... #define DCI_6WORD_FRAME    0x0050 << 1
.................... #define DCI_7WORD_FRAME    0x0060 << 1
.................... #define DCI_8WORD_FRAME    0x0070 << 1
.................... #define DCI_9WORD_FRAME    0x0080 << 1
.................... #define DCI_10WORD_FRAME   0x0090 << 1
.................... #define DCI_11WORD_FRAME   0x00A0 << 1
.................... #define DCI_12WORD_FRAME   0x00B0 << 1
.................... #define DCI_13WORD_FRAME   0x00C0 << 1
.................... #define DCI_14WORD_FRAME   0x00D0 << 1
.................... #define DCI_15WORD_FRAME   0x00E0 << 1
.................... #define DCI_16WORD_FRAME   0x00F0 << 1
.................... 
.................... #define DCI_1WORD_INTERRUPT 0x0000
.................... #define DCI_2WORD_INTERRUPT 0x0400
.................... #define DCI_3WORD_INTERRUPT 0x0800
.................... #define DCI_4WORD_INTERRUPT 0x0C00
.................... 
.................... // Constants used in setup_dci() third param are:
.................... #define RECEIVE_NONE    0x0000
.................... #define RECEIVE_ALL     0xFFFF
.................... #define RECEIVE_SLOT0   0x0001
.................... #define RECEIVE_SLOT1   0x0002
.................... #define RECEIVE_SLOT2   0x0004
.................... #define RECEIVE_SLOT3   0x0008
.................... #define RECEIVE_SLOT4   0x0010
.................... #define RECEIVE_SLOT5   0x0020
.................... #define RECEIVE_SLOT6   0x0040
.................... #define RECEIVE_SLOT7   0x0080
.................... #define RECEIVE_SLOT8   0x0100
.................... #define RECEIVE_SLOT9   0x0200
.................... #define RECEIVE_SLOT10  0x0400
.................... #define RECEIVE_SLOT11  0x0800
.................... #define RECEIVE_SLOT12  0x1000
.................... #define RECEIVE_SLOT13  0x2000
.................... #define RECEIVE_SLOT14  0x4000
.................... #define RECEIVE_SLOT15  0x8000
.................... 
.................... // Constants used in setup_dci() forth param are:
.................... #define TRANSMIT_NONE   0x0000
.................... #define TRANSMIT_ALL    0xFFFF
.................... #define TRANSMIT_SLOT0  0x0001
.................... #define TRANSMIT_SLOT1  0x0002
.................... #define TRANSMIT_SLOT2  0x0004
.................... #define TRANSMIT_SLOT3  0x0008
.................... #define TRANSMIT_SLOT4  0x0010
.................... #define TRANSMIT_SLOT5  0x0020
.................... #define TRANSMIT_SLOT6  0x0040
.................... #define TRANSMIT_SLOT7  0x0080
.................... #define TRANSMIT_SLOT8  0x0100
.................... #define TRANSMIT_SLOT9  0x0200
.................... #define TRANSMIT_SLOT10 0x0400
.................... #define TRANSMIT_SLOT11 0x0800
.................... #define TRANSMIT_SLOT12 0x1000
.................... #define TRANSMIT_SLOT13 0x2000
.................... #define TRANSMIT_SLOT14 0x4000
.................... #define TRANSMIT_SLOT15 0x8000
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////// DMA
.................... // DMA Functions: setup_dma(), dma_start(), dma_status()
.................... // DMA Prototypes:
.................... _bif void setup_dma(unsigned int8 channel, unsigned int32 pheripheral, unsigned int8 mode);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 count);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb, unsigned int16 count);
.................... _bif unsigned int8 dma_status(unsigned int8 channel);
.................... // Constants used in setup_dma() second param are:
.................... #define DMA_IN_SPI1      (0x0A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_OUT_SPI1     (0x8A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_IN_SPI2      (0x210000|getenv("sfr:SPI2BUF"))
.................... #define DMA_OUT_SPI2     (0xA10000|getenv("sfr:SPI2BUF"))
.................... #define DMA_IN_UART1     (0x0B0000|getenv("sfr:U1RXREG"))
.................... #define DMA_OUT_UART1    (0x8C0000|getenv("sfr:U1TXREG"))
.................... #define DMA_IN_UART2     (0x1E0000|getenv("sfr:U2RXREG"))
.................... #define DMA_OUT_UART2    (0x9F0000|getenv("sfr:U2TXREG"))
.................... #define DMA_IN_ADC1      (0x0D0000|getenv("sfr:ADC1BUF0"))
.................... ////////////////////////////////////////////////////////////////// DAC
.................... // Digital to Analog Functions: SETUP_DAC(), DAC_WRITE()
.................... // DAC Prototypes:
.................... _bif void setup_dac(unsigned int32 mode);
.................... _bif void setup_dac(unsigned int32 mode, unsigned int8 divisor);
.................... _bif void dac_write(unsigned int8 channel, unsigned value);
.................... // Constants used in SETUP_DAC() are:
.................... #define DAC_OFF  0
.................... #define DAC_RIGHT_ON   0x00808000
.................... #define DAC_LEFT_ON    0x80008000
.................... #define DAC_RIGHT_MIDPOINT 0x00A08000
.................... #define DAC_LEFT_MIDPOINT  0xA0008000
.................... #define DAC_SIGNED   0x100
.................... #define DAC_SLEEP_ON 0x1000
.................... #define DAC_IDLE_OFF 0x2000
.................... // Constants used as the first param in DAC_WRITE() are:
.................... #define DAC_DEFAULT  0
.................... #define DAC_RIGHT    1
.................... #define DAC_LEFT     2
.................... 
.................... #define DMA_IN_ECAN1     (0x220000|getenv("sfr:C1RXD"))
.................... #define DMA_OUT_ECAN1    (0xC60000|getenv("sfr:C1TXD"))
.................... #define DMA_INT0         0x000000 // or in direction and perif address
.................... #define DMA_IC1          0x010000 // or in direction and perif address
.................... #define DMA_IN_IC1       (0x010000|getenv("sfr:IC1BUF"))
.................... #define DMA_IC2          0x050000 // or in direction and perif address
.................... #define DMA_IN_IC2       (0x050000|getenv("sfr:IC2BUF"))
.................... #define DMA_OC1          0x020000 // or in direction and perif address
.................... #define DMA_OC2          0x060000 // or in direction and perif address
.................... #define DMA_TIMER2       0x070000 // or in direction and perif address
.................... #define DMA_TIMER3       0x080000 // or in direction and perif address
.................... #define DMA_OUT_DCI      (0xBC0000|getenv("sfr:TXBUF0"))
.................... #define DMA_IN_DCI       (0x3C0000|getenv("sfr:RXBUF0"))
.................... #define DMA_OUT_DACR     (0xCE0000|getenv("sfr:DAC1RDAT"))
.................... #define DMA_OUT_DACL     (0xCF0000|getenv("sfr:DAC1LDAT"))
.................... #define DMA_IN          0x00
.................... #define DMA_OUT         0x800000
.................... // Constants used in setup_dma() third param are:
.................... #define DMA_BYTE        0x40
.................... #define DMA_WORD        0x00  // default
.................... #define DMA_HALF_INT    0x10  // interrupt when half full
.................... #define DMA_WRITE_NULL  0x08
.................... // Constants used in dma_start() second param are:
.................... #define DMA_CONTINOUS   0x00
.................... #define DMA_ONE_SHOT    0x01
.................... #define DMA_PING_PONG   0x02
.................... #define DMA_NO_INC      0x10
.................... #define DMA_PERIF_ADDR  0x20 // Device supplies address
.................... #define DMA_FORCE_NOW  0x100
.................... // Constants returned from dma_status() are:
.................... #define DMA_IN_ERROR    0x01
.................... #define DMA_OUT_ERROR   0x02
.................... #define DMA_B_SELECT    0x04
.................... 
.................... ////////////////////////////////////////////////////////////////// BIF
.................... // Built In Functions Prototypes
.................... //
.................... // Math Prototypes:
.................... _bif signed int8 abs(signed int8 x);
.................... _bif signed int16 abs(signed int16 x);
.................... _bif signed int32 abs(signed int32 x);
.................... _bif float32 abs(float32 x);
.................... _bif unsigned int16 _mul(unsigned int8, unsigned int8);
.................... _bif signed int16 _mul(signed int8, signed int8);
.................... _bif unsigned int32 _mul(unsigned int16, unsigned int16);
.................... _bif signed int32 _mul(signed int16, signed int16);
.................... _bif signed int48 abs(signed int48 x);
.................... _bif signed int64 abs(signed int64 x);
.................... _bif float48 abs(float48 x);
.................... _bif float64 abs(float64 x);
.................... _bif unsigned int64 _mul(unsigned int32, unsigned int32);
.................... _bif signed int64 _mul(signed int32, signed int32);
.................... _bif unsigned int64 _mul(unsigned int48, unsigned int48);
.................... _bif signed int64 _mul(signed int48, signed int48);
.................... 
.................... // Memory Manipulation Prototypes:
.................... _bif void strcpy(char* dest, char* src);
.................... _bif void memset(unsigned int8* destination, unsigned int8 value, unsigned int16 num);
.................... _bif void memcpy(unsigned int8* destination, unsigned int8* source, unsigned int16 num);
.................... 
.................... // Data Manipulators Prototypes:
.................... _bif int1 shift_left(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif int1 shift_right(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif void rotate_left(unsigned int8* address, unsigned int8 bytes);
.................... _bif void rotate_right(unsigned int8* address, unsigned int8 bytes);
.................... _bif void swap(unsigned int8 value);
.................... _bif unsigned int8 make8(unsigned int16 var, unsigned int8 offset);
.................... _bif unsigned int8 make8(unsigned int32 var, unsigned int8 offset);
.................... _bif unsigned int16 make16(unsigned int8 varhigh, unsigned int8 varlow);
.................... _bif unsigned int32 make32(unsigned int16 var1);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3, unsigned int8 var4);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int16 var3);
.................... _bif void bit_set(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int32 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int8 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int16 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int64 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int64 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int48 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int64 var, unsigned int8 bit);
.................... _bif unsigned int8 bit_first(int1 value, unsigned int16 var);
.................... _bif unsigned int8 bit_last(int16 var);
.................... _bif unsigned int8 bit_last(int1 value, int16 var);
.................... 
.................... // #use delay() Prototypes:
.................... _bif void delay_cycles(unsigned int16 count);
.................... _bif void delay_ms(unsigned int16 time);
.................... _bif void delay_us(unsigned int16 time);
.................... 
.................... // #use rs232() Prototypes:
.................... _bif void putchar(char cdata);
.................... _bif void putchar(char cdata, unsigned int8 stream);
.................... _bif void puts(char* string);
.................... _bif void puts(char* string, unsigned int8 stream);
.................... _bif char getch(void);
.................... _bif char getch(unsigned int8 stream);
.................... _bif void gets(char* string);
.................... _bif void gets(char* string, unsigned int8 stream);
.................... _bif int1 kbhit(void);
.................... _bif int1 kbhit(unsigned int8 stream);
.................... _bif void printf(char* string, ...);
.................... _bif void fprintf(unsigned int8 stream, char* string, ...);
.................... _bif void putc_send(void);
.................... _bif void fputc_send(unsigned int8 stream);
.................... _bif int1 rcv_buffer_full(void);
.................... _bif int1 rcv_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 rcv_buffer_bytes(void);
.................... _bif unsigned int16 rcv_buffer_bytes(unsigned int8 stream);
.................... _bif int1 tx_buffer_full(void);
.................... _bif int1 tx_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 tx_buffer_bytes(void);
.................... _bif unsigned int16 tx_buffer_bytes(unsigned int8 stream);
.................... 
.................... // #use i2c() Prototypes:
.................... _bif unsigned int8 i2c_read(void);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream, int1 ack);
.................... _bif int1 i2c_write(unsigned int8 data);
.................... _bif int1 i2c_write(unsigned int8 stream, unsigned int8 data);
.................... _bif void i2c_start(void);
.................... _bif void i2c_start(unsigned int8 stream);
.................... _bif void i2c_start(unsigned int8 stream, unsigned int8 restart);
.................... _bif void i2c_stop(void);
.................... _bif void i2c_stop(unsigned int8 stream);
.................... _bif int8 i2c_isr_state(void);
.................... _bif void i2c_slaveaddr(unsigned int8 addr);
.................... _bif void i2c_slaveaddr(unsigned int8 stream, unsigned int8 addr);
.................... _bif int1 i2c_poll(void);
.................... _bif int1 i2c_poll(unsigned int8 stream);
.................... _bif void i2c_init(unsigned int32 baud);
.................... _bif void i2c_init(unsigned int8 stream, unsigned int32 baud);
.................... 
.................... // #use spi() Prototypes:
.................... _bif unsigned int8 spi_xfer(void);
.................... _bif unsigned int16 spi_xfer(void);
.................... _bif unsigned int32 spi_xfer(void);
.................... _bif unsigned int8 spi_xfer(unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data, unsigned int8 bits);
.................... _bif void spi_init(unsigned int32 baud);
.................... _bif void spi_init(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud, unsigned int32 clock);
.................... _bif void spi_prewrite(unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int32 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer_in(void);
.................... _bif unsigned int16 spi_xfer_in(void);
.................... _bif unsigned int32 spi_xfer_in(void);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... 
.................... // #use rtos() Prototypes:
.................... _bif void rtos_run(void);
.................... _bif void rtos_yield(void);
.................... _bif void rtos_enable(unsigned int8 task);
.................... _bif void rtos_disable(unsigned int8 task);
.................... _bif void rtos_terminate(void);
.................... _bif void rtos_await(int1 flag);
.................... _bif void rtos_wait(unsigned int8 sem);
.................... _bif void rtos_signal(unsigned int8 sem);
.................... _bif void rtos_msg_send(unsigned int8 task, unsigned int8 msg);
.................... _bif unsigned int8 rtos_msg_read(void);
.................... _bif unsigned int8 rtos_msg_poll(void);
.................... _bif int1 rtos_overrun(unsigned int8 task);
.................... _bif void rtos_stats(unsigned int8 task, unsigned int8* stat);
.................... 
.................... // #use timer() Prototypes:
.................... _bif unsigned int8 get_ticks(void);
.................... _bif unsigned int16 get_ticks(void);
.................... _bif unsigned int32 get_ticks(void);
.................... _bif unsigned int64 get_ticks(void);
.................... _bif unsigned int8 get_ticks(unsigned int8 stream);
.................... _bif unsigned int16 get_ticks(unsigned int8 stream);
.................... _bif unsigned int32 get_ticks(unsigned int8 stream);
.................... _bif unsigned int64 get_ticks(unsigned int8 stream);
.................... _bif void set_ticks(unsigned int8 value);
.................... _bif void set_ticks(unsigned int16 value);
.................... _bif void set_ticks(unsigned int32 value);
.................... _bif void set_ticks(unsigned int64 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int8 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int16 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int32 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int64 value);
.................... 
.................... // #use pwm() Prototypes:
.................... _bif void pwm_on(void);
.................... _bif void pwm_on(unsigned int8 stream);
.................... _bif void pwm_off(void);
.................... _bif void pwm_off(unsigned int8 stream);
.................... _bif void pwm_set_duty(unsigned int16 duty);
.................... _bif void pwm_set_duty(unsigned int8 stream, unsigned int16 duty);
.................... _bif void pwm_set_duty_percent(unsigned int16 percent);
.................... _bif void pwm_set_duty_percent(unsigned int8 stream, unsigned int16 percent);
.................... _bif void pwm_set_frequency(unsigned int32 frequency);
.................... _bif void pwm_set_frequency(unsigned int8 stream, unsigned int32 frequency);
.................... 
.................... // #use capture() Prototypes:
.................... _bif unsigned int16 get_capture_time(void);
.................... _bif unsigned int16 get_capture_time(unsigned int8 stream);
.................... _bif int1 get_capture_event(void);
.................... _bif int1 get_capture_event(unsigned int8 stream);
.................... 
.................... // Environment Prototypes:
.................... //_bif unsigned int8 getenv(char* cstring);
.................... 
.................... // Address Prototypes:
.................... #ifndef __ADDRESS__
.................... #define __ADDRESS__ unsigned int32
.................... #endif
.................... _bif void goto_address(__ADDRESS__ address);
.................... _bif __ADDRESS__ label_address(__ADDRESS__ label);
.................... 
.................... // Program Memory Prototypes:
.................... _bif void read_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void erase_program_memory(__ADDRESS__ address);
.................... _bif void write_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void read_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... _bif void write_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// INT
.................... // Interrupt Functions: ENABLE_INTERRUPTS(), DISABLE_INTERRUPTS(),
.................... //                      CLEAR_INTERRUPT(), INTERRUPT_ACTIVE(),
.................... //                      EXT_INT_EDGE()
.................... // INT Prototypes:
.................... _bif void enable_interrupts(unsigned int16 interrupt);
.................... _bif void disable_interrupts(unsigned int16 interrupt);
.................... _bif void clear_interrupt(unsigned int16 interrupt);
.................... _bif int1 interrupt_active(unsigned int16 interrupt);
.................... _bif int1 interrupt_enabled(unsigned int16 interrupt);
.................... _bif void ext_int_edge(unsigned int8 source, unsigned int8 edge);
.................... _bif void jump_to_isr(unsigned int16 address);
.................... // Constants used in EXT_INT_EDGE() are:
.................... #define L_TO_H              0x40
.................... #define H_TO_L                 0
.................... //
.................... // Constants used in other interrupt functions are:
.................... #define INTR_GLOBAL               0x400
.................... #define GLOBAL                    0x400  // For compatibility with PIC16/18
.................... #define INTR_NORMAL               0x100
.................... #define INTR_ALTERNATE            0x200
.................... #define INTR_LEVEL0               0x500
.................... #define INTR_LEVEL1               0x501
.................... #define INTR_LEVEL2               0x502
.................... #define INTR_LEVEL3               0x503
.................... #define INTR_LEVEL4               0x504
.................... #define INTR_LEVEL5               0x505
.................... #define INTR_LEVEL6               0x506
.................... #define INTR_LEVEL7               0x507
.................... 
.................... #define INTR_CN_PIN              0x8000  // or in a PIN_xx constant
.................... 
.................... #define INT_OSCFAIL               1
.................... #define INT_ADDRERR               2
.................... #define INT_STACKERR              3
.................... #define INT_MATHERR               4
.................... #define INT_DMAERR                5
.................... #define INT_EXT0                  6
.................... #define INT_IC1                   7
.................... #define INT_OC1                   8
.................... #define INT_TIMER1                9
.................... #define INT_DMA0                  69
.................... #define INT_IC2                   70
.................... #define INT_OC2                   71
.................... #define INT_TIMER2                72
.................... #define INT_TIMER3                73
.................... #define INT_SPI1E                 74
.................... #define INT_SPI1                  75
.................... #define INT_RDA                   76
.................... #define INT_TBE                   77
.................... #define INT_ADC1                  78
.................... #define INT_DMA1                  79
.................... #define INT_SI2C                  81
.................... #define INT_MI2C                  82
.................... #define INT_CNI                   84
.................... #define INT_EXT1                  85
.................... #define INT_IC7                   87
.................... #define INT_IC8                   88
.................... #define INT_DMA2                  89
.................... #define INT_OC3                   90
.................... #define INT_OC4                   91
.................... #define INT_TIMER4                92
.................... #define INT_TIMER5                93
.................... #define INT_EXT2                  94
.................... #define INT_RDA2                  95
.................... #define INT_TBE2                  96
.................... #define INT_SPI2E                 97
.................... #define INT_SPI2                  98
.................... #define INT_C1RX                  99
.................... #define INT_CAN1                  100
.................... #define INT_DMA3                  101
.................... #define INT_PWM1                  110
.................... #define INT_DMA4                  111
.................... #define INT_QEI                   123
.................... #define INT_DMA5                  126
.................... #define INT_PWM2                  127
.................... #define INT_FAULTA                128
.................... #define INT_UART1E                130
.................... #define INT_UART2E                131
.................... #define INT_QEI2                  132
.................... #define INT_DMA6                  133
.................... #define INT_DMA7                  134
.................... #define INT_C1TX                  135
.................... #define INT_FAULTA2               139
.................... #define INT_COMP                  152
.................... #define INT_PMP                   164
.................... #define INT_RTC                   173
.................... #define INT_CRC                   174
.................... #define INT_DAC1R                 177
.................... #define INT_DAC1L                 178
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "lcd.h"
.................... /**
....................  @file    lcd.h
....................  @author  Ricardo Gï¿½mez
....................  @brief   LCD management
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __LCD_H
.................... #define __LCD_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... /* SECTION 1: Included header files to compile this file           */
.................... 
.................... /* SECTION 2: Public macros                                        */
.................... 
.................... #define _CLEAR_DISPLAY 				0x01
.................... #define _8BIT_4LINES_NORMAL_RE1_IS0		0x3A
.................... #define _8BIT_4LINES_REVERSE_RE1_IS0		0x3B
.................... #define _8BIT_4LINES_RE0_IS1			0x39
.................... #define _8BIT_4LINES_RE0_IS0			0x38
.................... 
.................... #define _BS1_1					0x1E
.................... #define _POWER_DOWN_DISABLE			0x02
.................... #define _SEGMENT_NORMAL_WAY			0x05
.................... #define _NW					0x09
.................... 
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_ON		0x0F
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_OFF		0x0E
.................... #define _DISPLAY_ON_CURSOR_OFF_BLINK_OFF	0x0C
.................... #define _BS0_1					0x1C
.................... #define _INTERNAL_DIVIDER			0x13
.................... #define _CONTRAST				0x77
.................... #define _POWER_ICON_CONTRAST			0x5C
.................... #define _FOLLOWER_CONTROL			0x6E
.................... 
.................... #define ADDRESS_DDRAM				0x80
.................... 
.................... 
.................... /* SECTION 3: Public types                                         */
.................... 
.................... 
.................... /* SECTION 4: Public variables :: declarations, extern mandatory   */
.................... 
.................... 
.................... /* SECTION 5: Public functions :: declarations, extern optional
....................    Rule exception (callbacks)  :: declarations, extern recommended */
.................... void display_valueADC_title(void);
.................... void LCD_command(unsigned int8);
.................... void lcdi2cinit(void);
.................... void LCD_write(char*);
.................... void initmenu(void);                                      //Inicializa el menu principal
.................... void display_frecuencia(void);       // Muestra frecuencia
.................... void LCD_cursor_at(unsigned int8 line, unsigned int8 column);
.................... 
.................... 
.................... #endif // __LCD_H
.................... // Do not write below this line!
.................... 
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... #include "algoritmo.h"
.................... /**
....................  @file    ALGORITMO.h
....................  @author  Ricardo Gomez, Klaudija Ziliute
....................  @brief   PanTompkins header file
.................... */
.................... 
.................... 
.................... #ifndef __ALGORITMO_H
.................... #define __ALGORITMO_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "BEEP.h"
.................... /**
....................  @file    BEEP.h
....................  @author  Julio Gomis-Tena
....................  @brief   Generate n "beeps" of variable frequency
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __BEEP_H
.................... #define __BEEP_H
.................... #include "Header.h"
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #pin_select OC2 = BUZZER
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP_Init(void); //Inicializa las frecuencias de los beeps y la separaciÃ³n entre ellos
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP(unsigned int8); //Realiza n beeps
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __BEEP_H
.................... 
.................... 
.................... int PPM; // variable global
.................... 
.................... void algoritmo();
.................... void init_algoritmo(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ALGORITMO_H
.................... 
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP_Init(void)		//4kHz -> T/2= 125us
.................... {
.................... 	setup_timer3(TMR_INTERNAL|TMR_DIV_BY_1, 1035); // 3kHz. Frecuencia de los beeps
*
00352:  CLR     112
00354:  MOV     #40B,W4
00356:  MOV     W4,10E
00358:  MOV     #8000,W4
0035A:  MOV     W4,112
.................... 	set_compare_time(2, 0);
0035C:  CLR     188
.................... 	setup_compare(2, COMPARE_OFF);
0035E:  CLR     18A
.................... 
.................... 		// (11059200/2)/256/432 = 50 Hz  <-> 100ms
.................... 	setup_timer4(TMR_INTERNAL|TMR_DIV_BY_256, 2160);
00360:  CLR     11E
00362:  MOV     #870,W4
00364:  MOV     W4,11A
00366:  MOV     #8030,W4
00368:  MOV     W4,11E
0036A:  RETURN  
.................... }
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... unsigned int8 N_beep;
.................... 
.................... void BEEP(unsigned int8 n)
.................... {
.................... 	if(n<127)
.................... 		N_beep = 2*n;
.................... 	else
.................... 		N_beep = 255;
.................... 
.................... 	enable_interrupts(INT_TIMER4);
.................... }
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #INT_TIMER4
.................... void isr_TIMER4()			// Cada 100 ms. Espaciado entre beeps. Habra que asociarlo a una interrupcion por software
*
00224:  PUSH    42
00226:  PUSH    36
00228:  PUSH    32
0022A:  MOV     W0,[W15++]
0022C:  MOV     #2,W0
0022E:  REPEAT  #C
00230:  MOV     [W0++],[W15++]
.................... {
.................... 		if((N_beep%2)==1)
00232:  MOV.B   87E,W0L
00234:  CLR.B   1
00236:  AND     W0,#1,W5
00238:  CP      W5,#1
0023A:  BRA     NZ,244
.................... 		{
.................... 			setup_compare(2, COMPARE_TOGGLE | COMPARE_TIMER3);
0023C:  MOV     #B,W4
0023E:  MOV     W4,18A
.................... 		}
00240:  GOTO    24A
.................... 		else
.................... 		{
.................... 			setup_compare(2, COMPARE_OFF);
*
00244:  CLR     18A
.................... 			OFF(BUZZER);
00246:  BCLR.B  2D0.6
00248:  BCLR.B  2D4.6
.................... 		}
.................... 
.................... 		if( N_beep>0 )
0024A:  CP0.B   87E
0024C:  BRA     Z,258
.................... 		{
.................... 		   	N_beep-=1;
0024E:  MOV     87E,W4
00250:  SUB.B   W4L,#1,W0L
00252:  MOV.B   W0L,87E
.................... 		}
00254:  GOTO    25C
.................... 		else
.................... 		{
.................... 			disable_interrupts(INT_TIMER4);
*
00258:  BCLR.B  97.3
0025A:  NOP     
.................... 		}
0025C:  BCLR.B  87.3
0025E:  MOV     #1A,W0
00260:  REPEAT  #C
00262:  MOV     [--W15],[W0--]
00264:  MOV     [--W15],W0
00266:  POP     32
00268:  POP     36
0026A:  POP     42
0026C:  RETFIE  
.................... }
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "BLUETOOTH.h"
.................... #include "BLUETOOTH.h"
.................... #ifndef Bluetooth_h
.................... #define Bluetooth_h
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use rs232(UART1,baud=115200,STREAM=BT)
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void init_BT(void); //inits and enables uart isr
.................... void enviar_datos();
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... float phase = 0;
.................... unsigned int8 snd;
.................... 
.................... void init_BT(void)
.................... {
....................   	fprintf(BT,"$$$");	     delay_ms(500); // command mode
....................   	fprintf(BT,"SF,1\r");      delay_ms(500); // factory defaults
....................   	fprintf(BT,"SA,0\r");      delay_ms(500); // authentication 'Open'
....................   	fprintf(BT,"R,1\r");       delay_ms(500); // Run device
.................... }
.................... 
.................... void enviar_datos()
.................... {
.................... 	COM:
.................... 	while(!input(COMM));
.................... 		fprintf(BT,"$Representacion grafica,Funcion,datos 1\n");
....................  		fprintf(BT,"&0,1000,0,1,0\n");
....................  		fprintf(BT,"#0,200,0,1,0\n");
.................... 
.................... 	// while(1)
.................... 	// {
....................  	// 	phase= (phase < 2*3.1416) ? (phase + 0.01) : 0;
....................  	// 	snd = (unsigned int8)(100+50*sin(phase)+30*sin(2*phase+0.5)-20*sin(7*phase+1));
....................  	// 	fprintf(BT, "%3u\n", snd);
.................... 	// 	delay_ms(10);
.................... 	// 	if(!input(COMM))
.................... 	// 	goto COM;
.................... 	// }
.................... }
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... /**
.................... /**
....................  @file    led.c
....................  @author  Ricardo Gomez
.................... 
....................  @brief   LCD functions
.................... */
.................... // Do not write above this line (except comments)!
.................... /* SECTION 1: Included header files to compile this file           */
.................... 
.................... #include "lcd.h"
.................... /**
....................  @file    lcd.h
....................  @author  Ricardo Gï¿½mez
....................  @brief   LCD management
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __LCD_H
.................... #define __LCD_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "lcd.h"
.................... /**
....................  @file    lcd.h
....................  @author  Ricardo Gï¿½mez
....................  @brief   LCD management
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __LCD_H
.................... #define __LCD_H
.................... 
.................... #include "common.h"
.................... 
.................... /* SECTION 1: Included header files to compile this file           */
.................... 
.................... /* SECTION 2: Public macros                                        */
.................... 
.................... #define _CLEAR_DISPLAY 				0x01
.................... #define _8BIT_4LINES_NORMAL_RE1_IS0		0x3A
.................... #define _8BIT_4LINES_REVERSE_RE1_IS0		0x3B
.................... #define _8BIT_4LINES_RE0_IS1			0x39
.................... #define _8BIT_4LINES_RE0_IS0			0x38
.................... 
.................... #define _BS1_1					0x1E
.................... #define _POWER_DOWN_DISABLE			0x02
.................... #define _SEGMENT_NORMAL_WAY			0x05
.................... #define _NW					0x09
.................... 
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_ON		0x0F
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_OFF		0x0E
.................... #define _DISPLAY_ON_CURSOR_OFF_BLINK_OFF	0x0C
.................... #define _BS0_1					0x1C
.................... #define _INTERNAL_DIVIDER			0x13
.................... #define _CONTRAST				0x77
.................... #define _POWER_ICON_CONTRAST			0x5C
.................... #define _FOLLOWER_CONTROL			0x6E
.................... 
.................... #define ADDRESS_DDRAM				0x80
.................... 
.................... 
.................... /* SECTION 3: Public types                                         */
.................... 
.................... 
.................... /* SECTION 4: Public variables :: declarations, extern mandatory   */
.................... 
.................... 
.................... /* SECTION 5: Public functions :: declarations, extern optional
....................    Rule exception (callbacks)  :: declarations, extern recommended */
.................... void display_valueADC_title(void);
.................... void LCD_command(unsigned int8);
.................... void lcdi2cinit(void);
.................... void LCD_write(char*);
.................... void initmenu(void);                                      //Inicializa el menu principal
.................... void display_frecuencia(void);       // Muestra frecuencia
.................... void LCD_cursor_at(unsigned int8 line, unsigned int8 column);
.................... 
.................... 
.................... #endif // __LCD_H
.................... // Do not write below this line!
.................... 
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #nolist
.................... //////// Program memory: 44032x24  Data RAM: 16384  Stack: 31
.................... //////// I/O: 35   Analog Pins: 9
.................... //////// Fuses: WRTB,NOWRTB,BSSHL,BSSHM,BSSHS,BSSSL,BSSSM,BSSSS,NOBSS
.................... //////// Fuses: RBS1024,RBS256,RBS128,NORBS,WRTSS,NOWRTSS,SSSHL,SSSHM,SSSHS
.................... //////// Fuses: SSSSL,SSSSM,SSSSS,NOSSS,RSS4096,RSS2048,RSS256,NORSS,WRT
.................... //////// Fuses: NOWRT,PROTECT_HIGH,PROTECT,NOPROTECT,FRC,FRC_PLL,PR,PR_PLL
.................... //////// Fuses: SOSC,LPRC,FRC_DIV_BY_16,FRC_PS,NOIESO,IESO,EC,XT,HS,NOPR
.................... //////// Fuses: OSCIO,NOOSCIO,NOIOL1WAY,IOL1WAY,CKSFSM,CKSNOFSM,NOCKSFSM
.................... //////// Fuses: WPOSTS1,WPOSTS2,WPOSTS3,WPOSTS4,WPOSTS5,WPOSTS6,WPOSTS7
.................... //////// Fuses: WPOSTS8,WPOSTS9,WPOSTS10,WPOSTS11,WPOSTS12,WPOSTS13,WPOSTS14
.................... //////// Fuses: WPOSTS15,WPOSTS16,WPRES32,WPRES128,NOWINDIS,WINDIS,NOWDT,WDT
.................... //////// Fuses: NOPUT,PUT2,PUT4,PUT8,PUT16,PUT32,PUT64,PUT128,ALTI2C1
.................... //////// Fuses: NOALTI2C1,LPOL_LOW,LPOL_HIGH,HPOL_LOW,HPOL_HIGH,PWMPIN
.................... //////// Fuses: NOPWMPIN,ICSP3,ICSP2,ICSP1,NOJTAG,JTAG,DEBUG,NODEBUG
.................... ////////
.................... #if (!defined(__PCD__)||defined(__ISNT_CCS__))
.................... #define _bif
.................... #define int8 char
.................... #define int16 int
.................... #define int32 long
.................... #define int48 long
.................... #define int64 long long
.................... #define float32 float
.................... #define float48 float
.................... #define float64 double
.................... #define int1 char
.................... 
.................... #endif
.................... ////////////////////////////////////////////////////////////////// PIN_SELECT
.................... // #pin_select function=pin
.................... // Valid Pins:
.................... //    PIN_B0,PIN_B1,PIN_B2,PIN_B3,PIN_B4,PIN_B5,PIN_B6,PIN_B7,PIN_B8,PIN_B9,
.................... //    PIN_B10,PIN_B11,PIN_B12,PIN_B13,PIN_B14,PIN_B15,PIN_C0,PIN_C1,PIN_C2,
.................... //    PIN_C3,PIN_C4,PIN_C5,PIN_C6,PIN_C7,PIN_C8,PIN_C9
.................... // Input Functions:
.................... //    INT1,INT2,T2CK,T3CK,T4CK,T5CK,IC1,IC2,IC3,IC4,IC5,OCFA,OCFB,U1RX,U1CTS,
.................... //    U2RX,U2CTS,SDI1,SCK1IN,SS1IN,SDI2,SCK2IN,SS2IN,C1RX,IC7,IC8,CSDI,CSCK,COFS,
.................... //    FLTA1,FLTA2,QEA1,QEB1,INDX1,QEA2,QEB2,INDX2,T1CK,FLT1,FLT2,FLT3,FLT4,FLT5,
.................... //    FLT6,FLT7,FLT8,SYNCI1,SYNCI2
.................... // Output Functions:
.................... //    NULL,C1OUT,C2OUT,U1TX,U1RTS,U2TX,U2RTS,SDO1,SCK1OUT,SS1OUT,SDO2,SCK2OUT,
.................... //    SS2OUT,OC1,OC2,OC3,OC4,OC5,C1TX,CSDO,CSCKOUT,COFSOUT,UPDN1,UPDN2,CTPLS,
.................... //    C3OUT,SYNCO1,REFCLKO,CMP1,CMP2,CMP3,CMP4,PWM4H,PWM4L
.................... //
.................... 
.................... ////////////////////////////////////////////////////////////////// I/O
.................... // Discrete I/O Functions: SET_TRIS_x(), OUTPUT_x(), INPUT_x(),
.................... //                         SET_PULLUP(), INPUT(),
.................... //                         OUTPUT_LOW(), OUTPUT_HIGH(),
.................... //                         OUTPUT_FLOAT(), OUTPUT_BIT()
.................... // Discrete I/O Prototypes:
.................... _bif void set_tris_a(unsigned int16 value);
.................... _bif void set_tris_b(unsigned int16 value);
.................... _bif void set_tris_c(unsigned int16 value);
.................... _bif unsigned int16 get_tris_a(void);
.................... _bif unsigned int16 get_tris_b(void);
.................... _bif unsigned int16 get_tris_c(void);
.................... _bif void output_a(unsigned int16 value);
.................... _bif void output_b(unsigned int16 value);
.................... _bif void output_c(unsigned int16 value);
.................... _bif unsigned int16 input_a(void);
.................... _bif unsigned int16 input_b(void);
.................... _bif unsigned int16 input_c(void);
.................... _bif int16 input_change_a(void);
.................... _bif int16 input_change_b(void);
.................... _bif int16 input_change_c(void);
.................... _bif void set_pullup(int1 state);
.................... _bif void set_pullup(int1 state, unsigned int16 pin);
.................... _bif void set_pulldown(int1 state);
.................... _bif void set_pulldown(int1 state, unsigned int16 pin);
.................... _bif int1 input(unsigned int16 pin);
.................... _bif int1 input_state(unsigned int16 pin);
.................... _bif void output_low(unsigned int16 pin);
.................... _bif void output_high(unsigned int16 pin);
.................... _bif void output_toggle(unsigned int16 pin);
.................... _bif void output_bit(unsigned int16 pin, int1 level);
.................... _bif void output_float(unsigned int16 pin);
.................... _bif void output_drive(unsigned int16 pin);
.................... // Constants used to identify pins in the above are:
.................... 
.................... #define PIN_A0  5648
.................... #define PIN_A1  5649
.................... #define PIN_A2  5650
.................... #define PIN_A3  5651
.................... #define PIN_A4  5652
.................... #define PIN_A7  5655
.................... #define PIN_A8  5656
.................... #define PIN_A9  5657
.................... #define PIN_A10  5658
.................... 
.................... #define PIN_B0  5712
.................... #define PIN_B1  5713
.................... #define PIN_B2  5714
.................... #define PIN_B3  5715
.................... #define PIN_B4  5716
.................... #define PIN_B5  5717
.................... #define PIN_B6  5718
.................... #define PIN_B7  5719
.................... #define PIN_B8  5720
.................... #define PIN_B9  5721
.................... #define PIN_B10  5722
.................... #define PIN_B11  5723
.................... #define PIN_B12  5724
.................... #define PIN_B13  5725
.................... #define PIN_B14  5726
.................... #define PIN_B15  5727
.................... 
.................... #define PIN_C0  5776
.................... #define PIN_C1  5777
.................... #define PIN_C2  5778
.................... #define PIN_C3  5779
.................... #define PIN_C4  5780
.................... #define PIN_C5  5781
.................... #define PIN_C6  5782
.................... #define PIN_C7  5783
.................... #define PIN_C8  5784
.................... #define PIN_C9  5785
.................... 
.................... ////////////////////////////////////////////////////////////////// Useful defines
.................... #define FALSE 0
.................... #define TRUE 1
.................... 
.................... #define BYTE unsigned int8
.................... #define BOOLEAN int1
.................... 
.................... #define getc getch
.................... #define fgetc getch
.................... #define getchar getch
.................... #define putc putchar
.................... #define fputc putchar
.................... #define fgets gets
.................... #define fputs puts
.................... 
.................... ////////////////////////////////////////////////////////////////// UART
.................... // UART Prototypes:
.................... _bif void setup_uart(unsigned int32 baud);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... _bif void set_uart_speed(unsigned int32 baud);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... // Constants used in setup_uart() are:
.................... // FALSE - Turn UART off
.................... // TRUE  - Turn UART on
.................... #define UART_ADDRESS           2
.................... #define UART_DATA              4
.................... #define UART_AUTODETECT        8
.................... #define UART_AUTODETECT_NOWAIT 9
.................... #define UART_WAKEUP_ON_RDA     10
.................... #define UART_SEND_BREAK        13
.................... 
.................... ////////////////////////////////////////////////////////////////// WDT
.................... // Watch Dog Timer Functions: SETUP_WDT() and RESTART_WDT()
.................... // WDT Prototypes:
.................... _bif void setup_wdt(unsigned int8 mode);
.................... _bif void restart_wdt(void);
.................... // Constants used for SETUP_WDT() are:
.................... #define WDT_ON      1
.................... #define WDT_OFF     0
.................... 
.................... #define  WDT_1MS    0x002
.................... #define  WDT_2MS    0x003
.................... #define  WDT_4MS    0x004
.................... #define  WDT_8MS    0x005
.................... #define  WDT_16MS   0x006
.................... #define  WDT_32MS   0x007
.................... #define  WDT_64MS   0x008
.................... #define  WDT_128MS  0x009
.................... #define  WDT_256MS  0x00A
.................... #define  WDT_512MS  0x00B
.................... #define  WDT_1S     0x00C
.................... #define  WDT_2S     0x00D
.................... #define  WDT_4S     0x00E
.................... #define  WDT_8S     0x00F
.................... #define  WDT_16S    0x010
.................... #define  WDT_33S    0x011
.................... #define  WDT_65S    0x030
.................... #define  WDT_131S   0x031
.................... 
.................... ////////////////////////////////////////////////////////////////// Control
.................... // Control Functions:  RESET_CPU(), SLEEP(), RESTART_CAUSE()
.................... // Prototypes:
.................... _bif unsigned int8 restart_cause(void);
.................... _bif void reset_cpu(void);
.................... _bif void sleep(void);
.................... _bif void sleep(unsigned int8 mode);
.................... // Constants passed into RESTART_CAUSE() are:
.................... #define RESTART_POWER_UP      0
.................... #define RESTART_BROWNOUT      1
.................... #define RESTART_WATCHDOG      4
.................... #define RESTART_SOFTWARE      6
.................... #define RESTART_MCLR          7
.................... #define RESTART_ILLEGAL_OP    14
.................... #define RESTART_TRAP_CONFLICT 15
.................... //
.................... // Constants passed into SLEEP() are:
.................... #define SLEEP_FULL      0  // Default
.................... #define SLEEP_IDLE      1  // Clock and peripherals don't stop
.................... 
.................... ////////////////////////////////////////////////////////////////// INTERNAL RC
.................... // Oscillator Prototypes:
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target);
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target, unsigned int32 source);
.................... // Constants used in setup_oscillator() are:
.................... #define OSC_INTERNAL     32
.................... #define OSC_CRYSTAL       1
.................... #define OSC_CLOCK         2
.................... #define OSC_RC            3
.................... #define OSC_SECONDARY    16
.................... 
.................... ////////////////////////////////////////////////////////////////// Timer
.................... // Timer Functions: SETUP_TIMERx, GET_TIMERx, GET_TIMERxy,
.................... // SET_TIMERx, SET_TIMERxy
.................... // Timer x Prototypes:
.................... _bif void setup_timer1(unsigned int16 mode);
.................... _bif void setup_timer1(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer1(void);
.................... _bif void set_timer1(unsigned int16 value);
.................... _bif void setup_timer2(unsigned int16 mode);
.................... _bif void setup_timer2(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer2(void);
.................... _bif void set_timer2(unsigned int16 value);
.................... _bif void setup_timer3(unsigned int16 mode);
.................... _bif void setup_timer3(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer3(void);
.................... _bif void set_timer3(unsigned int16 value);
.................... _bif unsigned int32 get_timer23(void);
.................... _bif void set_timer23(unsigned int32 value);
.................... _bif void setup_timer4(unsigned int16 mode);
.................... _bif void setup_timer4(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer4(void);
.................... _bif void set_timer4(unsigned int16 value);
.................... _bif void setup_timer5(unsigned int16 mode);
.................... _bif void setup_timer5(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer5(void);
.................... _bif void set_timer5(unsigned int16 value);
.................... _bif unsigned int32 get_timer45(void);
.................... _bif void set_timer45(unsigned int32 value);
.................... // Constants used for SETUP_TIMERx() are:
.................... //      (or (via |) together constants from each group)
.................... #define TMR_DISABLED 0x0000
.................... #define TMR_INTERNAL 0x8000
.................... #define TMR_EXTERNAL 0x8002
.................... #define TMR_GATE     0x0040
.................... 
.................... #define TMR_DIV_BY_1   0x0000
.................... #define TMR_DIV_BY_8   0x0010
.................... #define TMR_DIV_BY_64  0x0020
.................... #define TMR_DIV_BY_256 0x0030
.................... #define TMR_32_BIT     0x0008 // Only for even numbered timers
.................... 
.................... #define TMR_HALT_IDLE      0x2000
.................... #define TMR_CONTINUE_IDLE  0x0000
.................... 
.................... #define T1_EXTERNAL_SYNC  0x8006 //This only applies to Timer1
.................... #define T1_EXTERNAL_RTC   0xC002 //This only applies to Timer1
.................... /////////////////////////////////////////////////////////// INPUT CAPTURE
.................... // Functions: SETUP_CAPTURE, GET_CAPTURE,
.................... // IC Prototypes:
.................... _bif void setup_capture(unsigned int8 module, unsigned int16 mode);
.................... _bif unsigned int16 get_capture(unsigned int8 module);
.................... _bif unsigned int16 get_capture(unsigned int8 module, int1 wait);
.................... // Constants used for SETUP_CAPTURE() are:
.................... #define CAPTURE_OFF               0x0000  // Capture OFF
.................... #define CAPTURE_EE                0x0001  // Capture Every Edge
.................... #define CAPTURE_FE                0x0002  // Capture Falling Edge
.................... #define CAPTURE_RE                0x0003  // Capture Rising Edge
.................... #define CAPTURE_DIV_4             0x0004  // Capture Every 4th Rising Edge
.................... #define CAPTURE_DIV_16            0x0005  // Capture Every 16th Rising Edge
.................... #define CAPTURE_INTERRUPT_ONLY    0x0007  // Interrupt on Rising Edge when in Sleep or Idle
.................... 
.................... // The following defines can be ORed | with above to configure interrupts
.................... #define INTERRUPT_EVERY_CAPTURE   0x0000  // Interrupt on every capture event
.................... #define INTERRUPT_SECOND_CAPTURE  0x0020  // Interrupt on every second capture event
.................... #define INTERRUPT_THIRD_CAPTURE   0x0040  // Interrupt on every third capture event
.................... #define INTERRUPT_FOURTH_CAPTURE  0x0060  // Interrupt on every fourth capture event
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define CAPTURE_TIMER2            0x0080  // On capture event Timer 2 is captured
.................... #define CAPTURE_TIMER3            0x0000  // On capture event Timer 3 is captured
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define CAPTURE_HALT_IDLE         0x2000  // Capture module halts during idle mode
.................... #define CAPTURE_CONTINUE_IDLE     0x0000  // Capture module continues during idle mode
.................... 
.................... /////////////////////////////////////////////////////////// OUTPUT COMPARE
.................... // Functions: SETUP_COMPARE, SET_PWM_DUTY, SET_COMPARE_TIME
.................... // OC Prototypes:
.................... _bif void setup_compare(unsigned int8 module, unsigned int16 mode);
.................... _bif void set_pwm_duty(unsigned int8 module, unsigned int16 duty);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr, unsigned int16 ocrs);
.................... // Constants used for SETUP_COMPARE() are:
.................... #define COMPARE_OFF               0x0000  // Compare OFF
.................... #define COMPARE_SET_ON_MATCH      0x0001  // Pin from low to high on match
.................... #define COMPARE_CLR_ON_MATCH      0x0002  // Pin from high to low on match
.................... #define COMPARE_TOGGLE            0x0003  // Pin will toggle on every match occurrence
.................... #define COMPARE_SINGLE_PULSE      0x0004  // Pin will generate single pulse on first match
.................... #define COMPARE_CONT_PULSE        0x0005  // Pin will pulse for every match
.................... #define COMPARE_PWM               0x0006  // Compare operates as PWM with fault pin disabled
.................... #define COMPARE_PWM_FAULT         0x0007  // Compare operates as PWM with fault pin enabled
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define COMPARE_TIMER2            0x0000  // Timer 2 is the base timer
.................... #define COMPARE_TIMER3            0x0008  // Timer 3 is the base timer
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define COMPARE_HALT_IDLE         0x2000  // Compare module halts during idle mode
.................... #define COMPARE_CONTINUE_IDLE     0x0000  // Compare module continues during idle mode
.................... 
.................... ////////////////////////////////////////////////////////////////// SPI
.................... // SPI Functions: SETUP_SPI, SPI_WRITE, SPI_READ, SPI_DATA_IN
.................... // SPI Prototypes:
.................... _bif void setup_spi(unsigned int16 mode);
.................... _bif void spi_write(unsigned int8 data);
.................... _bif void spi_write(int1 wait, unsigned int8 data);
.................... _bif void spi_write_16(unsigned int16 data);
.................... _bif void spi_write_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read(void);
.................... _bif unsigned int8 spi_read(unsigned int8 data);
.................... _bif unsigned int16 spi_read_16(void);
.................... _bif unsigned int16 spi_read_16(unsigned int16 data);
.................... _bif int1 spi_data_in(void);
.................... _bif void setup_spi2(unsigned int16 mode);
.................... _bif void spi_write2(unsigned int8 data);
.................... _bif void spi_write2(int1 wait, unsigned int8 data);
.................... _bif void spi_write2_16(unsigned int16 data);
.................... _bif void spi_write2_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read2(void);
.................... _bif unsigned int8 spi_read2(unsigned int8 data);
.................... _bif unsigned int16 spi_read2_16(void);
.................... _bif unsigned int16 spi_read2_16(unsigned int16 data);
.................... _bif int1 spi_data_in2(void);
.................... // Constants used in SETUP_SPI() are:
.................... //      (or (via |) together constants from each group)
.................... #define SPI_MASTER                 0x0020
.................... #define SPI_SLAVE                  0x0000
.................... 
.................... #define SPI_SCK_IDLE_HIGH          0x0040
.................... #define SPI_SCK_IDLE_LOW           0x0000
.................... 
.................... #define SPI_XMIT_L_TO_H            0x0100
.................... #define SPI_XMIT_H_TO_L            0x0000
.................... 
.................... #define SPI_MODE_16B               0x0400
.................... #define SPI_MODE_8B                0x0000
.................... 
.................... #define SPI_SAMPLE_AT_END          0x0200
.................... #define SPI_SAMPLE_AT_MIDDLE       0x0000
.................... 
.................... #define SPI_SS_ENABLED             0x0000
.................... #define SPI_SS_DISABLED            0x0080
.................... 
.................... //or (via |) one of the following when operating as MASTER
.................... #define SPI_CLK_DIV_1              0x001F
.................... #define SPI_CLK_DIV_2              0x001B
.................... #define SPI_CLK_DIV_3              0x0017
.................... #define SPI_CLK_DIV_4              0x001E
.................... #define SPI_CLK_DIV_5              0x000F
.................... #define SPI_CLK_DIV_6              0x000B
.................... #define SPI_CLK_DIV_7              0x0007
.................... #define SPI_CLK_DIV_8              0x0003
.................... #define SPI_CLK_DIV_12             0x0016
.................... #define SPI_CLK_DIV_16             0x001D
.................... #define SPI_CLK_DIV_20             0x000E
.................... #define SPI_CLK_DIV_24             0x000A
.................... #define SPI_CLK_DIV_28             0x0006
.................... #define SPI_CLK_DIV_32             0x0002
.................... #define SPI_CLK_DIV_48             0x0015
.................... #define SPI_CLK_DIV_64             0x001C
.................... #define SPI_CLK_DIV_80             0x000D
.................... #define SPI_CLK_DIV_96             0x0009
.................... #define SPI_CLK_DIV_112            0x0005
.................... #define SPI_CLK_DIV_128            0x0001
.................... #define SPI_CLK_DIV_192            0x0014
.................... #define SPI_CLK_DIV_256            0x0010
.................... #define SPI_CLK_DIV_320            0x000C
.................... #define SPI_CLK_DIV_384            0x0008
.................... #define SPI_CLK_DIV_448            0x0004
.................... #define SPI_CLK_DIV_512            0x0000
.................... 
.................... //The following defines are provided for compatibility
.................... #define SPI_L_TO_H         SPI_SCK_IDLE_LOW
.................... #define SPI_H_TO_L         SPI_SCK_IDLE_HIGH
.................... 
.................... ////////////////////////////////////////////////////////////////// ADC
.................... // ADC Functions: SETUP_ADC(), SETUP_ADC_PORTS()
.................... //                SET_ADC_CHANNEL(), READ_ADC()
.................... // ADC Prototypes:
.................... _bif void setup_adc(unsigned int32 mode);
.................... _bif void setup_adc_ports(unsigned int32 pins);
.................... _bif void setup_adc_ports(unsigned int32 pins, unsigned int16 reference);
.................... _bif void set_adc_channel(unsigned int8 channel);
.................... _bif void set_adc_channel(unsigned int8 channel, unsigned int8 neg_channel);
.................... _bif unsigned int16 read_adc(void);
.................... _bif unsigned int16 read_adc(unsigned int8 mode);
.................... _bif int1 adc_done(void);
.................... // Constants used for SETUP_ADC() are:
.................... // Clock is at ADCS<5:0> of ADCON3 Reg. (0x02A4)
.................... // Tad = (Tcy/2)*(ADCS<5:0>+1)
.................... #define ADC_OFF                 0x10000
.................... #define ADC_CLOCK                0x0000
.................... #define ADC_CLOCK_DIV_2          0x0001
.................... #define ADC_CLOCK_DIV_4          0x0003
.................... #define ADC_CLOCK_DIV_8          0x0007
.................... #define ADC_CLOCK_DIV_16         0x000F
.................... #define ADC_CLOCK_DIV_32         0x001F
.................... #define ADC_CLOCK_DIV_64         0x003F
.................... #define ADC_CLOCK_INTERNAL       0x8000     // Internal
.................... 
.................... // One of the following may be OR'ed in with the above using |
.................... // Auto-Sample Time bits
.................... #define ADC_TAD_MUL_0            0x1F00
.................... #define ADC_TAD_MUL_2            0x1D00
.................... #define ADC_TAD_MUL_4            0x1B00
.................... #define ADC_TAD_MUL_8            0x1700
.................... #define ADC_TAD_MUL_16           0x0F00
.................... #define ADC_TAD_MUL_31           0x0000
.................... 
.................... // Constants used in READ_ADC() are:
.................... #define ADC_START_AND_READ       0x07
.................... #define ADC_START_ONLY           0x01
.................... #define ADC_READ_ONLY            0x06
.................... 
.................... // Constants used in SET_ADC_CHANNEL() second parameter are:
.................... #define VSS                      0
.................... 
.................... // Constants used in SETUP_ADC_PORTS() are:
.................... // First argument:
.................... // OR together desired pins
.................... #define NO_ANALOGS      0           // None
.................... #define ALL_ANALOG      0xFFFFFFFF  // All
.................... #define sAN0      0x00000001 //| A0
.................... #define sAN1      0x00000002 //| A1
.................... #define sAN2      0x00000004 //| B0
.................... #define sAN3      0x00000008 //| B1
.................... #define sAN4      0x00000010 //| B2
.................... #define sAN5      0x00000020 //| B3
.................... #define sAN6      0x00000040 //| C0
.................... #define sAN7      0x00000080 //| C1
.................... #define sAN8      0x00000100 //| C2
.................... 
.................... // Optional Second argument:
.................... #define VSS_VDD            0x0000 // Range 0-Vdd
.................... #define VREF_VREF          0x6000 // Range VrefL-VrefH
.................... #define VREF_VDD           0x4000 // Range VrefL-Vdd
.................... #define VSS_VREF           0x2000 // Range 0-VrefH
.................... 
.................... ////////////////////////////////////////////////////////////////// COMP
.................... // Comparator Functions: setup_comparator()
.................... // Comparator Variables: C1OUT, C2OUT
.................... // Comparator Prototypes:
.................... _bif void setup_comparator(unsigned int16 mode);
.................... // Constants used in setup_comparator() are:
.................... #define NC_NC_NC_NC      0
.................... #define B2_B3_NC_NC      0x401
.................... #define B2_VR_NC_NC      0x400
.................... #define B3_VR_NC_NC      0x402
.................... #define NC_NC_B0_B1      0x804
.................... #define NC_NC_B0_VR      0x800
.................... #define NC_NC_B1_VR      0x808
.................... #define B2_B3_B0_B1      B2_B3_NC_NC | NC_NC_B0_B1
.................... #define B2_VR_B0_VR      B2_VR_NC_NC | NC_NC_B0_VR
.................... #define B3_VR_B1_VR      B3_VR_NC_NC | NC_NC_B1_VR
.................... 
.................... #define C1_INVERT     0x10
.................... #define C2_INVERT     0x20
.................... #define C1_OUTPUT     0x100
.................... #define C2_OUTPUT     0x200
.................... 
.................... #bit C1OUT = getenv("SFR:CMCON").6
.................... #bit C2OUT = getenv("SFR:CMCON").7
.................... 
.................... ////////////////////////////////////////////////////////////////// VREF
.................... // VREF Prototypes:
.................... _bif void setup_vref(unsigned int16 mode);
.................... // Constants used in setup_vref() are:
.................... #define VREF_DISABLED  0x0000
.................... #define VREF_VSS_VDD   0x0080
.................... #define VREF_ANALOG    0x0090
.................... // One of the following maybe OR'ed in with the above using |
.................... #define VREF_HIGH      0x0080
.................... #define VREF_LOW       0x00A0
.................... // The following maybe OR'ed in with the above using |
.................... #define VREF_OUTPUT    0x0040
.................... // Or (with |) the above with a number 0-15
.................... 
.................... ////////////////////////////////////////////////////////////////// PMP
.................... // PMP Functions: setup_pmp(), pmp_address(), psp_read(), pmp_read(),
.................... // psp_write(), pmp_write(), psp_output_full(),psp_input_full(),
.................... // psp_overflow(), pmp_output_full(), pmp_input_full(),
.................... // pmp_overflow()
.................... // PMP Prototypes:
.................... _bif void setup_pmp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif void pmp_address(unsigned int16 address);
.................... _bif unsigned int8 pmp_read(void);
.................... _bif void pmp_write(unsigned int8 data);
.................... _bif int1 pmp_output_full(void);
.................... _bif int1 pmp_input_full(void);
.................... _bif int1 pmp_overflow(void);
.................... _bif void setup_psp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif unsigned int8 psp_read(void);
.................... _bif unsigned int8 psp_read(unsigned int16 address);
.................... _bif void psp_write(unsigned int8 data);
.................... _bif void psp_write(unsigned int8 data, unsigned int16 address);
.................... _bif int1 psp_output_full(void);
.................... _bif int1 psp_input_full(void);
.................... _bif int1 psp_overflow(void);
.................... // Constants used in SETUP_PMP() and SETUP_PSP() are:
.................... #define PAR_ENABLE                0x8000
.................... #define PAR_DISABLE               0x0000    // Module enable/disable options
.................... #define PAR_STOP_IN_IDLE          0x2000
.................... #define PAR_CONTINUE_IN_IDLE      0x0000
.................... #define PAR_ADDR_NOT_MULTIPLEXED  0x0000    // Address multiplexing options
.................... #define PAR_LOW_ADDR_MULTIPLEXED  0x0800    // Address multiplexing options
.................... #define PAR_FULL_ADDR_MULTIPLEXED 0x1000    // Address multiplexing options
.................... #define PAR_PTBEEN_ENABLE         0x0400  // Byte Enable Port Enable bit
.................... #define PAR_PTWREN_ENABLE         0x0200  // Write Enable Strobe bit
.................... #define PAR_PTRDEN_ENABLE         0x0100  // Read/Write Strobe Port bit
.................... #define PAR_ALP_ACTIVE_HIGH       0x0020 // Address latch polarity high
.................... #define PAR_BEP_ACTIVE_HIGH       0x0004 // Byte Enable Polarity
.................... #define PAR_WRSP_ACTIVE_HIGH      0x0002 // Write strobe Polarity bit
.................... #define PAR_RDSP_ACTIVE_HIGH      0x0001 // Read strobe Polarity bit
.................... #define PAR_CS_XX                 0x0000   // Chip select pins used for address
.................... #define PAR_CS_X1                 0x0008   // Chip select pin 1 used, active high
.................... #define PAR_CS_X0                 0x0000   // Chip select pin 1 used, active low
.................... #define PAR_CS_1X                 0x0050   // Chip select pin 2 used, active high
.................... #define PAR_CS_0X                 0x0040   // Chip select pin 2 used, active low
.................... #define PAR_CS_00                 0x0080   // Chip select pins 1,2 used, active low
.................... #define PAR_CS_11                 0x0098   // Chip select pins 1,2 used, active high
.................... #define PAR_CS_10                 0x0090   // Chip select pins 1,2 used, 1 is active low, 2 is high
.................... #define PAR_CS_01                 0x0088   // Chip select pins 1,2 used, 1 is active high, 2 is low
.................... #define PAR_INTR_ON_RW                0x20000000  // Interrupt on read write
.................... #define PAR_NO_INTR_STALL_ACTIVATED   0x40000000  // No interrupt, processor stall activated
.................... #define PAR_INTR_ON_3_RW_BUF          0x60000000 // Interrupt on write to Buffer 3 or read from Buffer 3
.................... #define PAR_PSP_AUTO_INC              0x18000000 // Read write buffers auto increment
.................... #define PAR_DEC_ADDR                  0x10000000 // Increment the address
.................... #define PAR_INC_ADDR                  0x08000000 // Decrement the address
.................... #define PAR_MASTER_MODE_1             0x03000000  // Master mode 1
.................... #define PAR_MASTER_MODE_2             0x02000000  // Master mode 2
.................... #define PAR_WAITB1                    0x00000000 // 1 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB2                    0x00400000 // 2 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB3                    0x00800000 // 3 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB4                    0x00C00000 // 4 Tcy Wait state for data setup R/W
.................... #define PAR_WAITM0                    0x00000000 // 0 wait state for Read to byte
.................... #define PAR_WAITM1                    0x00040000 // 1 Tcy wait state for Read to byte
.................... #define PAR_WAITM2                    0x00080000 // 2 Tcy wait state for Read to byte
.................... #define PAR_WAITM3                    0x000C0000 // 3 Tcy wait state for Read to byte
.................... #define PAR_WAITM15                   0x003C0000 // 15 wait states
.................... #define PAR_WAITE1                    0x00000000  // 1 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE2                    0x00010000 // 2 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE3                    0x00020000 // 3 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE4                    0x00030000 // 4 Tcy Wait for data hold after strobe
.................... 
.................... ////////////////////////////////////////////////////////////////// CRC
.................... // CRC Functions: setup_crc(), crc_init(), crc_calc(), crc_calc8()
.................... // CRC Prototypes:
.................... _bif void setup_crc(unsigned int8 poly_terms, ...);
.................... _bif void crc_init(unsigned int16 value);
.................... _bif unsigned int16 crc_calc(unsigned int16 data);
.................... _bif unsigned int16 crc_calc(unsigned int16 *ptr, unsigned int16 count);
.................... _bif unsigned int8 crc_calc8(unsigned int8 data);
.................... _bif unsigned int8 crc_calc8(unsigned int8 *ptr, unsigned int16 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// RTC
.................... // RTC Functions: setup_rtc(), setup_rtc_alarm(), rtc_read(),
.................... //                rtc_write(), rtc_alarm_read(), rtc_alarm_write()
.................... // Structure used in read and write functions (pass pointer):
.................... typedef struct {
....................    unsigned int8 tm_year;
....................    unsigned int8 tm_temp;  // Not used by built in functions, place holder only do not use
....................    unsigned int8 tm_mday;
....................    unsigned int8 tm_mon;
....................    unsigned int8 tm_hour;
....................    unsigned int8 tm_wday;
....................    unsigned int8 tm_sec;
....................    unsigned int8 tm_min;
....................    unsigned int8 tm_isdst; // Not used by built in functions
.................... } rtc_time_t;
.................... // RTC Prototypes:
.................... _bif void setup_rtc(unsigned int16 mode, unsigned int8 calibration);
.................... _bif void setup_rtc_alarm(unsigned int16 mode, unsigned int16 mask, unsigned int8 repeat);
.................... _bif void rtc_read(rtc_time_t *time);
.................... _bif void rtc_write(rtc_time_t *time);
.................... _bif void rtc_alarm_read(rtc_time_t *time);
.................... _bif void rtc_alarm_write(rtc_time_t *time);
.................... // Constants used in setup_rtc() are:  // Second param is calibration
.................... #define RTC_ENABLE           0x8000
.................... #define RTC_DISABLE          0
.................... #define RTC_OUTPUT_SECONDS   0x20400
.................... #define RTC_OUTPUT_ALARM     0x00400
.................... //
.................... // Constants used in setup_rtc_alarm() first param are:
.................... #define RTC_ALARM_ENABLE     0x8000
.................... #define RTC_ALARM_DISABLE    0
.................... #define RTC_CHIME_ENABLE     0x4000
.................... #define RTC_CHIME_DISABLE    0
.................... // Constants used in setup_rtc_alarm() second param are:  // Third param is repeat#
.................... #define RTC_ALARM_HALFSECOND 0x0000
.................... #define RTC_ALARM_SECOND     0x0400
.................... #define RTC_ALARM_10_SECONDS 0x0800
.................... #define RTC_ALARM_MINUTE     0x0C00
.................... #define RTC_ALARM_10_MINUTES 0x1000
.................... #define RTC_ALARM_HOUR       0x1400
.................... #define RTC_ALARM_DAY        0x1800
.................... #define RTC_ALARM_WEEK       0x1C00
.................... #define RTC_ALARM_MONTH      0x2000
.................... #define RTC_ALARM_YEAR       0x2400
.................... 
.................... ////////////////////////////////////////////////////////////////// QEI
.................... // QEI Functions: setup_qei(), qei_set_count(), qei_get_count(),
.................... //                qei_status()
.................... // QEI Prototypes:
.................... _bif void setup_qei(unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void setup_qei(unsigned int8 unit, unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void qei_set_count(unsigned int16 count);
.................... _bif void qei_set_count(unsigned int8 unit, unsigned int16 count);
.................... _bif unsigned int16 qei_get_count(void);
.................... _bif unsigned int16 qei_get_count(unsigned int8 unit);
.................... _bif unsigned int16 qei_status(void);
.................... _bif unsigned int16 qei_status(unsigned int8 unit);
.................... // Constants used in setup_qei() first param are:
.................... #define QEI_DISABLED        0
.................... #define QEI_MODE_X2         0x0400
.................... #define QEI_MODE_X4         0x0600
.................... #define QEI_MODE_TIMER      0x0100
.................... #define QEI_STOP_WHEN_IDLE  0x2000
.................... #define QEI_SWAP_AB         0x0080
.................... #define QEI_OUTPUT_ENABLE   0x0040
.................... #define QEI_RESET_WHEN_MAXCOUNT  0x0100
.................... #define QEI_RESET_WHEN_IDX_PULSE 0x0004
.................... #define QEI_TIMER_GATED      0x0020
.................... #define QEI_TIMER_INTERNAL   0x0000
.................... #define QEI_TIMER_EXTERNAL   0x0002
.................... #define QEI_TIMER_DIV_BY_1   0x0000
.................... #define QEI_TIMER_DIV_BY_8   0x0008
.................... #define QEI_TIMER_DIV_BY_64  0x0010
.................... #define QEI_TIMER_DIV_BY_256 0x0018
.................... // Constants used in setup_qei() second param are:   // Third param is MAXCOUNT
.................... #define QEI_FILTER_DIV_1     0x0000
.................... #define QEI_FILTER_DIV_2     0x0010
.................... #define QEI_FILTER_DIV_4     0x0020
.................... #define QEI_FILTER_DIV_16    0x0030
.................... #define QEI_FILTER_DIV_32    0x0040
.................... #define QEI_FILTER_DIV_64    0x0050
.................... #define QEI_FILTER_DIV_128   0x0060
.................... #define QEI_FILTER_DIV_256   0x0070
.................... #define QEI_FILTER_OUTPUT    0x0080
.................... #define QEI_NO_ERROR_INTS    0x0100
.................... #define QEI_IDX_WHEN_A0      0x0000  // for 2X mode
.................... #define QEI_IDX_WHEN_A1      0x0200  // for 2X mode
.................... #define QEI_IDX_WHEN_B0      0x0400  // for 2X mode
.................... #define QEI_IDX_WHEN_B1      0x0600  // for 2X mode
.................... #define QEI_IDX_WHEN_A0_B0   0x0000  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B0   0x0200  // for 4X mode
.................... #define QEI_IDX_WHEN_A0_B1   0x0400  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B1   0x0600  // for 4X mode
.................... // Constants returned from qei_status() are:
.................... #define QEI_POS_ERROR        0x8000
.................... #define QEI_FORWARD          0x0800
.................... #define QEI_INDEX_PIN        0x1000
.................... 
.................... ////////////////////////////////////////////////////////////////// MOTOR PWM
.................... // MPWM Functions: setup_motor_pwm(), set_motor_unit(),
.................... //                 set_motor_pwm_duty(), set_motor_pwm_event(),
.................... //                 get_motor_pwm_count()
.................... // MPWM Prototypes:
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int32 timebase);
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int8 prescale, unsigned int8 postscale, unsigned int16 period);
.................... _bif void set_motor_unit(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 mode, unsigned int8 active_deadtime, unsigned int8 inactive_deadtime);
.................... _bif void set_motor_pwm_duty(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 duty);
.................... _bif void set_motor_pmw_event(unsigned int8, signed int16 time);
.................... _bif unsigned int16 get_motor_pwm_count(unsigned int8 pwm);
.................... // Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):
.................... #define MPWM_DISABLED          0
.................... #define MPWM_FREE_RUN          0x8000
.................... #define MPWM_SINGLE_PULSE      0x8001
.................... #define MPWM_UP_DOWN           0x8002
.................... #define MPWM_UP_DOWN_WITH_INTS 0x8003
.................... // OR in any of the following:
.................... #define MPWM_HALT_WHEN_IDLE            0x2000
.................... #define MPWM_DUTY_UPDATES_IMMEADIATE  0x40000
.................... #define MPWM_SYNC_OVERRIDES           0x20000
.................... #define MPWM_DISABLE_UPDATES          0x10000
.................... #define MPWM_LATCH_FAULTS            0x100000
.................... 
.................... // Constants used in set_motor_unit() third param are:  (first param is unit number 1,2... and second param is pwm pin pair 1,2,3 or 4)
.................... #define MPWM_INDEPENDENT     0x0001
.................... #define MPWM_ENABLE          0x0006  // both H and L
.................... #define MPWM_ENABLE_H        0x0004
.................... #define MPWM_ENABLE_L        0x0002
.................... 
.................... #define MPWM_FORCE_L_0       0x0010
.................... #define MPWM_FORCE_L_1       0x0050
.................... #define MPWM_FORCE_H_0       0x0020
.................... #define MPWM_FORCE_H_1       0x00A0
.................... 
.................... #define MPWM_FAULTA_LA_HA     0x0700
.................... #define MPWM_FAULTA_LA_HI     0x0500
.................... #define MPWM_FAULTA_LI_HA     0x0600
.................... #define MPWM_FAULTA_LI_HI     0x0400
.................... #define MPWM_FAULTB_LA_HA     0x7000
.................... #define MPWM_FAULTB_LA_HI     0x5000
.................... #define MPWM_FAULTB_LI_HA     0x6000
.................... #define MPWM_FAULTB_LI_HI     0x4000
.................... #define MPWM_FAULT_NO_CHANGE 0x0000
.................... 
.................... ////////////////////////////////////////////////////////////////// DCI
.................... // DCI Functions: setup_dci(), dci_start(), dci_read(), dci_write(),
.................... //                dci_data_received(), dci_transmit_ready()
.................... // DCI Prototypes:
.................... _bif void setup_dci(unsigned int16 mode, unsigned int16 size, unsigned int16 receive_slot, unsigned int16 transmit_slot, unsigned int16 sample_rate);
.................... _bif void dci_start(void);
.................... _bif signed int16 dci_read(void);
.................... _bif void dci_write(signed int16);
.................... _bif int1 dci_data_received(void);
.................... _bif int1 dci_transmit_ready(void);
.................... // Constants used in setup_dci() first param are:
.................... #define MULTICHANNEL_MODE  0x0000
.................... #define I2S_MODE           0x0001
.................... #define AC97_16BIT_MODE    0x0002
.................... #define AC97_20BIT_MODE    0x0003
.................... 
.................... #define JUSTIFY_DATA       0x0020 //Start data transmission on the same clock cycle as COFS pulses (multichannel)
.................... #define MULTI_DEVICE_BUS   0x0040 //Tri-states the CSDO pin during unused time slots, normally drives '0'
.................... 
.................... #define UNDERFLOW_LAST     0x0080 //Transmits the last written value to the dci when data underflow occurs. Default is undeflow silence.
.................... #define UNDERFLOW_SILENCE  0x0000 //Transmit '0's on data undeflow. This will cause a clicking noise if you are underflowing data while outputing to a codec.
.................... 
.................... #define DCI_SLAVE          0x0100 //Default is master
.................... #define DCI_MASTER         0x0000
.................... 
.................... #define SAMPLE_FALLING_EDGE 0x0000 //Default is Sample on the rising edge of the clock
.................... #define SAMPLE_RISING_EDGE 0x0200
.................... 
.................... #define DCI_CLOCK_INPUT    0x0400 //SCLK is an input (supplied by codec or external source)
.................... #define DCI_CLOCK_OUTPUT   0x0000 //Default is clock output
.................... 
.................... #define ENABLE_LOOPBACK    0x0800 //Connect the CSDI/CSDO internally; loops all of the sound back onto the bus
.................... 
.................... #define CODEC_MULTICHANNEL  0x0000  //enables multichannel (generic) codec support
.................... #define CODEC_I2S           0x0001  //enables the I2S protocol
.................... #define CODEC_AC16          0x0002  //enables the AC-16 protocol, setupCodecTransmission has no effect
.................... #define CODEC_AC20          0x0003  //enables the AC-20 protocol, setupCodecTransmission has no effect
.................... 
.................... #define BUS_MASTER          0x0000  //designates this device as the bus master
.................... #define BUS_SLAVE           0x0300  //designates this device as a slave on a bus controlled by another codec
.................... 
.................... #define TRISTATE_BUS        0x0040        //when in master mode, the module will be in high impedance
....................                                     //during disabled frames (default drives 0's onto bus)
.................... #define SYNC_COFS_DATA_PULSE 0x0020 //signifies that data starts transmitting on the same SCK pulse as the edge of the COFS pulse
....................                                     //(default data starts on the clock after the rising edge of COFS
.................... /* Determines when a sample is taken */
.................... #define SAMPLE_RISING        0x0200 //sample data on the rising edge of the clock
.................... #define SAMPLE_FALLING       0x0000 //sample data on the falling edge of the clock
.................... 
.................... // Constants used in setup_dci() second param are:
.................... #define DCI_4BIT_WORD      0x0003
.................... #define DCI_5BIT_WORD      0x0004
.................... #define DCI_6BIT_WORD      0x0005
.................... #define DCI_7BIT_WORD      0x0006
.................... #define DCI_8BIT_WORD      0x0007
.................... #define DCI_9BIT_WORD      0x0008
.................... #define DCI_10BIT_WORD     0x0009
.................... #define DCI_11BIT_WORD     0x000A
.................... #define DCI_12BIT_WORD     0x000B
.................... #define DCI_13BIT_WORD     0x000C
.................... #define DCI_14BIT_WORD     0x000D
.................... #define DCI_15BIT_WORD     0x000E
.................... #define DCI_16BIT_WORD     0x000F
.................... 
.................... #define DCI_1WORD_FRAME    0x0000
.................... #define DCI_2WORD_FRAME    0x0010 << 1
.................... #define DCI_3WORD_FRAME    0x0020 << 1
.................... #define DCI_4WORD_FRAME    0x0030 << 1
.................... #define DCI_5WORD_FRAME    0x0040 << 1
.................... #define DCI_6WORD_FRAME    0x0050 << 1
.................... #define DCI_7WORD_FRAME    0x0060 << 1
.................... #define DCI_8WORD_FRAME    0x0070 << 1
.................... #define DCI_9WORD_FRAME    0x0080 << 1
.................... #define DCI_10WORD_FRAME   0x0090 << 1
.................... #define DCI_11WORD_FRAME   0x00A0 << 1
.................... #define DCI_12WORD_FRAME   0x00B0 << 1
.................... #define DCI_13WORD_FRAME   0x00C0 << 1
.................... #define DCI_14WORD_FRAME   0x00D0 << 1
.................... #define DCI_15WORD_FRAME   0x00E0 << 1
.................... #define DCI_16WORD_FRAME   0x00F0 << 1
.................... 
.................... #define DCI_1WORD_INTERRUPT 0x0000
.................... #define DCI_2WORD_INTERRUPT 0x0400
.................... #define DCI_3WORD_INTERRUPT 0x0800
.................... #define DCI_4WORD_INTERRUPT 0x0C00
.................... 
.................... // Constants used in setup_dci() third param are:
.................... #define RECEIVE_NONE    0x0000
.................... #define RECEIVE_ALL     0xFFFF
.................... #define RECEIVE_SLOT0   0x0001
.................... #define RECEIVE_SLOT1   0x0002
.................... #define RECEIVE_SLOT2   0x0004
.................... #define RECEIVE_SLOT3   0x0008
.................... #define RECEIVE_SLOT4   0x0010
.................... #define RECEIVE_SLOT5   0x0020
.................... #define RECEIVE_SLOT6   0x0040
.................... #define RECEIVE_SLOT7   0x0080
.................... #define RECEIVE_SLOT8   0x0100
.................... #define RECEIVE_SLOT9   0x0200
.................... #define RECEIVE_SLOT10  0x0400
.................... #define RECEIVE_SLOT11  0x0800
.................... #define RECEIVE_SLOT12  0x1000
.................... #define RECEIVE_SLOT13  0x2000
.................... #define RECEIVE_SLOT14  0x4000
.................... #define RECEIVE_SLOT15  0x8000
.................... 
.................... // Constants used in setup_dci() forth param are:
.................... #define TRANSMIT_NONE   0x0000
.................... #define TRANSMIT_ALL    0xFFFF
.................... #define TRANSMIT_SLOT0  0x0001
.................... #define TRANSMIT_SLOT1  0x0002
.................... #define TRANSMIT_SLOT2  0x0004
.................... #define TRANSMIT_SLOT3  0x0008
.................... #define TRANSMIT_SLOT4  0x0010
.................... #define TRANSMIT_SLOT5  0x0020
.................... #define TRANSMIT_SLOT6  0x0040
.................... #define TRANSMIT_SLOT7  0x0080
.................... #define TRANSMIT_SLOT8  0x0100
.................... #define TRANSMIT_SLOT9  0x0200
.................... #define TRANSMIT_SLOT10 0x0400
.................... #define TRANSMIT_SLOT11 0x0800
.................... #define TRANSMIT_SLOT12 0x1000
.................... #define TRANSMIT_SLOT13 0x2000
.................... #define TRANSMIT_SLOT14 0x4000
.................... #define TRANSMIT_SLOT15 0x8000
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////// DMA
.................... // DMA Functions: setup_dma(), dma_start(), dma_status()
.................... // DMA Prototypes:
.................... _bif void setup_dma(unsigned int8 channel, unsigned int32 pheripheral, unsigned int8 mode);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 count);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb, unsigned int16 count);
.................... _bif unsigned int8 dma_status(unsigned int8 channel);
.................... // Constants used in setup_dma() second param are:
.................... #define DMA_IN_SPI1      (0x0A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_OUT_SPI1     (0x8A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_IN_SPI2      (0x210000|getenv("sfr:SPI2BUF"))
.................... #define DMA_OUT_SPI2     (0xA10000|getenv("sfr:SPI2BUF"))
.................... #define DMA_IN_UART1     (0x0B0000|getenv("sfr:U1RXREG"))
.................... #define DMA_OUT_UART1    (0x8C0000|getenv("sfr:U1TXREG"))
.................... #define DMA_IN_UART2     (0x1E0000|getenv("sfr:U2RXREG"))
.................... #define DMA_OUT_UART2    (0x9F0000|getenv("sfr:U2TXREG"))
.................... #define DMA_IN_ADC1      (0x0D0000|getenv("sfr:ADC1BUF0"))
.................... ////////////////////////////////////////////////////////////////// DAC
.................... // Digital to Analog Functions: SETUP_DAC(), DAC_WRITE()
.................... // DAC Prototypes:
.................... _bif void setup_dac(unsigned int32 mode);
.................... _bif void setup_dac(unsigned int32 mode, unsigned int8 divisor);
.................... _bif void dac_write(unsigned int8 channel, unsigned value);
.................... // Constants used in SETUP_DAC() are:
.................... #define DAC_OFF  0
.................... #define DAC_RIGHT_ON   0x00808000
.................... #define DAC_LEFT_ON    0x80008000
.................... #define DAC_RIGHT_MIDPOINT 0x00A08000
.................... #define DAC_LEFT_MIDPOINT  0xA0008000
.................... #define DAC_SIGNED   0x100
.................... #define DAC_SLEEP_ON 0x1000
.................... #define DAC_IDLE_OFF 0x2000
.................... // Constants used as the first param in DAC_WRITE() are:
.................... #define DAC_DEFAULT  0
.................... #define DAC_RIGHT    1
.................... #define DAC_LEFT     2
.................... 
.................... #define DMA_IN_ECAN1     (0x220000|getenv("sfr:C1RXD"))
.................... #define DMA_OUT_ECAN1    (0xC60000|getenv("sfr:C1TXD"))
.................... #define DMA_INT0         0x000000 // or in direction and perif address
.................... #define DMA_IC1          0x010000 // or in direction and perif address
.................... #define DMA_IN_IC1       (0x010000|getenv("sfr:IC1BUF"))
.................... #define DMA_IC2          0x050000 // or in direction and perif address
.................... #define DMA_IN_IC2       (0x050000|getenv("sfr:IC2BUF"))
.................... #define DMA_OC1          0x020000 // or in direction and perif address
.................... #define DMA_OC2          0x060000 // or in direction and perif address
.................... #define DMA_TIMER2       0x070000 // or in direction and perif address
.................... #define DMA_TIMER3       0x080000 // or in direction and perif address
.................... #define DMA_OUT_DCI      (0xBC0000|getenv("sfr:TXBUF0"))
.................... #define DMA_IN_DCI       (0x3C0000|getenv("sfr:RXBUF0"))
.................... #define DMA_OUT_DACR     (0xCE0000|getenv("sfr:DAC1RDAT"))
.................... #define DMA_OUT_DACL     (0xCF0000|getenv("sfr:DAC1LDAT"))
.................... #define DMA_IN          0x00
.................... #define DMA_OUT         0x800000
.................... // Constants used in setup_dma() third param are:
.................... #define DMA_BYTE        0x40
.................... #define DMA_WORD        0x00  // default
.................... #define DMA_HALF_INT    0x10  // interrupt when half full
.................... #define DMA_WRITE_NULL  0x08
.................... // Constants used in dma_start() second param are:
.................... #define DMA_CONTINOUS   0x00
.................... #define DMA_ONE_SHOT    0x01
.................... #define DMA_PING_PONG   0x02
.................... #define DMA_NO_INC      0x10
.................... #define DMA_PERIF_ADDR  0x20 // Device supplies address
.................... #define DMA_FORCE_NOW  0x100
.................... // Constants returned from dma_status() are:
.................... #define DMA_IN_ERROR    0x01
.................... #define DMA_OUT_ERROR   0x02
.................... #define DMA_B_SELECT    0x04
.................... 
.................... ////////////////////////////////////////////////////////////////// BIF
.................... // Built In Functions Prototypes
.................... //
.................... // Math Prototypes:
.................... _bif signed int8 abs(signed int8 x);
.................... _bif signed int16 abs(signed int16 x);
.................... _bif signed int32 abs(signed int32 x);
.................... _bif float32 abs(float32 x);
.................... _bif unsigned int16 _mul(unsigned int8, unsigned int8);
.................... _bif signed int16 _mul(signed int8, signed int8);
.................... _bif unsigned int32 _mul(unsigned int16, unsigned int16);
.................... _bif signed int32 _mul(signed int16, signed int16);
.................... _bif signed int48 abs(signed int48 x);
.................... _bif signed int64 abs(signed int64 x);
.................... _bif float48 abs(float48 x);
.................... _bif float64 abs(float64 x);
.................... _bif unsigned int64 _mul(unsigned int32, unsigned int32);
.................... _bif signed int64 _mul(signed int32, signed int32);
.................... _bif unsigned int64 _mul(unsigned int48, unsigned int48);
.................... _bif signed int64 _mul(signed int48, signed int48);
.................... 
.................... // Memory Manipulation Prototypes:
.................... _bif void strcpy(char* dest, char* src);
.................... _bif void memset(unsigned int8* destination, unsigned int8 value, unsigned int16 num);
.................... _bif void memcpy(unsigned int8* destination, unsigned int8* source, unsigned int16 num);
.................... 
.................... // Data Manipulators Prototypes:
.................... _bif int1 shift_left(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif int1 shift_right(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif void rotate_left(unsigned int8* address, unsigned int8 bytes);
.................... _bif void rotate_right(unsigned int8* address, unsigned int8 bytes);
.................... _bif void swap(unsigned int8 value);
.................... _bif unsigned int8 make8(unsigned int16 var, unsigned int8 offset);
.................... _bif unsigned int8 make8(unsigned int32 var, unsigned int8 offset);
.................... _bif unsigned int16 make16(unsigned int8 varhigh, unsigned int8 varlow);
.................... _bif unsigned int32 make32(unsigned int16 var1);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3, unsigned int8 var4);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int16 var3);
.................... _bif void bit_set(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int32 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int8 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int16 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int64 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int64 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int48 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int64 var, unsigned int8 bit);
.................... _bif unsigned int8 bit_first(int1 value, unsigned int16 var);
.................... _bif unsigned int8 bit_last(int16 var);
.................... _bif unsigned int8 bit_last(int1 value, int16 var);
.................... 
.................... // #use delay() Prototypes:
.................... _bif void delay_cycles(unsigned int16 count);
.................... _bif void delay_ms(unsigned int16 time);
.................... _bif void delay_us(unsigned int16 time);
.................... 
.................... // #use rs232() Prototypes:
.................... _bif void putchar(char cdata);
.................... _bif void putchar(char cdata, unsigned int8 stream);
.................... _bif void puts(char* string);
.................... _bif void puts(char* string, unsigned int8 stream);
.................... _bif char getch(void);
.................... _bif char getch(unsigned int8 stream);
.................... _bif void gets(char* string);
.................... _bif void gets(char* string, unsigned int8 stream);
.................... _bif int1 kbhit(void);
.................... _bif int1 kbhit(unsigned int8 stream);
.................... _bif void printf(char* string, ...);
.................... _bif void fprintf(unsigned int8 stream, char* string, ...);
.................... _bif void putc_send(void);
.................... _bif void fputc_send(unsigned int8 stream);
.................... _bif int1 rcv_buffer_full(void);
.................... _bif int1 rcv_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 rcv_buffer_bytes(void);
.................... _bif unsigned int16 rcv_buffer_bytes(unsigned int8 stream);
.................... _bif int1 tx_buffer_full(void);
.................... _bif int1 tx_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 tx_buffer_bytes(void);
.................... _bif unsigned int16 tx_buffer_bytes(unsigned int8 stream);
.................... 
.................... // #use i2c() Prototypes:
.................... _bif unsigned int8 i2c_read(void);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream, int1 ack);
.................... _bif int1 i2c_write(unsigned int8 data);
.................... _bif int1 i2c_write(unsigned int8 stream, unsigned int8 data);
.................... _bif void i2c_start(void);
.................... _bif void i2c_start(unsigned int8 stream);
.................... _bif void i2c_start(unsigned int8 stream, unsigned int8 restart);
.................... _bif void i2c_stop(void);
.................... _bif void i2c_stop(unsigned int8 stream);
.................... _bif int8 i2c_isr_state(void);
.................... _bif void i2c_slaveaddr(unsigned int8 addr);
.................... _bif void i2c_slaveaddr(unsigned int8 stream, unsigned int8 addr);
.................... _bif int1 i2c_poll(void);
.................... _bif int1 i2c_poll(unsigned int8 stream);
.................... _bif void i2c_init(unsigned int32 baud);
.................... _bif void i2c_init(unsigned int8 stream, unsigned int32 baud);
.................... 
.................... // #use spi() Prototypes:
.................... _bif unsigned int8 spi_xfer(void);
.................... _bif unsigned int16 spi_xfer(void);
.................... _bif unsigned int32 spi_xfer(void);
.................... _bif unsigned int8 spi_xfer(unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data, unsigned int8 bits);
.................... _bif void spi_init(unsigned int32 baud);
.................... _bif void spi_init(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud, unsigned int32 clock);
.................... _bif void spi_prewrite(unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int32 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer_in(void);
.................... _bif unsigned int16 spi_xfer_in(void);
.................... _bif unsigned int32 spi_xfer_in(void);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... 
.................... // #use rtos() Prototypes:
.................... _bif void rtos_run(void);
.................... _bif void rtos_yield(void);
.................... _bif void rtos_enable(unsigned int8 task);
.................... _bif void rtos_disable(unsigned int8 task);
.................... _bif void rtos_terminate(void);
.................... _bif void rtos_await(int1 flag);
.................... _bif void rtos_wait(unsigned int8 sem);
.................... _bif void rtos_signal(unsigned int8 sem);
.................... _bif void rtos_msg_send(unsigned int8 task, unsigned int8 msg);
.................... _bif unsigned int8 rtos_msg_read(void);
.................... _bif unsigned int8 rtos_msg_poll(void);
.................... _bif int1 rtos_overrun(unsigned int8 task);
.................... _bif void rtos_stats(unsigned int8 task, unsigned int8* stat);
.................... 
.................... // #use timer() Prototypes:
.................... _bif unsigned int8 get_ticks(void);
.................... _bif unsigned int16 get_ticks(void);
.................... _bif unsigned int32 get_ticks(void);
.................... _bif unsigned int64 get_ticks(void);
.................... _bif unsigned int8 get_ticks(unsigned int8 stream);
.................... _bif unsigned int16 get_ticks(unsigned int8 stream);
.................... _bif unsigned int32 get_ticks(unsigned int8 stream);
.................... _bif unsigned int64 get_ticks(unsigned int8 stream);
.................... _bif void set_ticks(unsigned int8 value);
.................... _bif void set_ticks(unsigned int16 value);
.................... _bif void set_ticks(unsigned int32 value);
.................... _bif void set_ticks(unsigned int64 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int8 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int16 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int32 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int64 value);
.................... 
.................... // #use pwm() Prototypes:
.................... _bif void pwm_on(void);
.................... _bif void pwm_on(unsigned int8 stream);
.................... _bif void pwm_off(void);
.................... _bif void pwm_off(unsigned int8 stream);
.................... _bif void pwm_set_duty(unsigned int16 duty);
.................... _bif void pwm_set_duty(unsigned int8 stream, unsigned int16 duty);
.................... _bif void pwm_set_duty_percent(unsigned int16 percent);
.................... _bif void pwm_set_duty_percent(unsigned int8 stream, unsigned int16 percent);
.................... _bif void pwm_set_frequency(unsigned int32 frequency);
.................... _bif void pwm_set_frequency(unsigned int8 stream, unsigned int32 frequency);
.................... 
.................... // #use capture() Prototypes:
.................... _bif unsigned int16 get_capture_time(void);
.................... _bif unsigned int16 get_capture_time(unsigned int8 stream);
.................... _bif int1 get_capture_event(void);
.................... _bif int1 get_capture_event(unsigned int8 stream);
.................... 
.................... // Environment Prototypes:
.................... //_bif unsigned int8 getenv(char* cstring);
.................... 
.................... // Address Prototypes:
.................... #ifndef __ADDRESS__
.................... #define __ADDRESS__ unsigned int32
.................... #endif
.................... _bif void goto_address(__ADDRESS__ address);
.................... _bif __ADDRESS__ label_address(__ADDRESS__ label);
.................... 
.................... // Program Memory Prototypes:
.................... _bif void read_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void erase_program_memory(__ADDRESS__ address);
.................... _bif void write_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void read_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... _bif void write_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// INT
.................... // Interrupt Functions: ENABLE_INTERRUPTS(), DISABLE_INTERRUPTS(),
.................... //                      CLEAR_INTERRUPT(), INTERRUPT_ACTIVE(),
.................... //                      EXT_INT_EDGE()
.................... // INT Prototypes:
.................... _bif void enable_interrupts(unsigned int16 interrupt);
.................... _bif void disable_interrupts(unsigned int16 interrupt);
.................... _bif void clear_interrupt(unsigned int16 interrupt);
.................... _bif int1 interrupt_active(unsigned int16 interrupt);
.................... _bif int1 interrupt_enabled(unsigned int16 interrupt);
.................... _bif void ext_int_edge(unsigned int8 source, unsigned int8 edge);
.................... _bif void jump_to_isr(unsigned int16 address);
.................... // Constants used in EXT_INT_EDGE() are:
.................... #define L_TO_H              0x40
.................... #define H_TO_L                 0
.................... //
.................... // Constants used in other interrupt functions are:
.................... #define INTR_GLOBAL               0x400
.................... #define GLOBAL                    0x400  // For compatibility with PIC16/18
.................... #define INTR_NORMAL               0x100
.................... #define INTR_ALTERNATE            0x200
.................... #define INTR_LEVEL0               0x500
.................... #define INTR_LEVEL1               0x501
.................... #define INTR_LEVEL2               0x502
.................... #define INTR_LEVEL3               0x503
.................... #define INTR_LEVEL4               0x504
.................... #define INTR_LEVEL5               0x505
.................... #define INTR_LEVEL6               0x506
.................... #define INTR_LEVEL7               0x507
.................... 
.................... #define INTR_CN_PIN              0x8000  // or in a PIN_xx constant
.................... 
.................... #define INT_OSCFAIL               1
.................... #define INT_ADDRERR               2
.................... #define INT_STACKERR              3
.................... #define INT_MATHERR               4
.................... #define INT_DMAERR                5
.................... #define INT_EXT0                  6
.................... #define INT_IC1                   7
.................... #define INT_OC1                   8
.................... #define INT_TIMER1                9
.................... #define INT_DMA0                  69
.................... #define INT_IC2                   70
.................... #define INT_OC2                   71
.................... #define INT_TIMER2                72
.................... #define INT_TIMER3                73
.................... #define INT_SPI1E                 74
.................... #define INT_SPI1                  75
.................... #define INT_RDA                   76
.................... #define INT_TBE                   77
.................... #define INT_ADC1                  78
.................... #define INT_DMA1                  79
.................... #define INT_SI2C                  81
.................... #define INT_MI2C                  82
.................... #define INT_CNI                   84
.................... #define INT_EXT1                  85
.................... #define INT_IC7                   87
.................... #define INT_IC8                   88
.................... #define INT_DMA2                  89
.................... #define INT_OC3                   90
.................... #define INT_OC4                   91
.................... #define INT_TIMER4                92
.................... #define INT_TIMER5                93
.................... #define INT_EXT2                  94
.................... #define INT_RDA2                  95
.................... #define INT_TBE2                  96
.................... #define INT_SPI2E                 97
.................... #define INT_SPI2                  98
.................... #define INT_C1RX                  99
.................... #define INT_CAN1                  100
.................... #define INT_DMA3                  101
.................... #define INT_PWM1                  110
.................... #define INT_DMA4                  111
.................... #define INT_QEI                   123
.................... #define INT_DMA5                  126
.................... #define INT_PWM2                  127
.................... #define INT_FAULTA                128
.................... #define INT_UART1E                130
.................... #define INT_UART2E                131
.................... #define INT_QEI2                  132
.................... #define INT_DMA6                  133
.................... #define INT_DMA7                  134
.................... #define INT_C1TX                  135
.................... #define INT_FAULTA2               139
.................... #define INT_COMP                  152
.................... #define INT_PMP                   164
.................... #define INT_RTC                   173
.................... #define INT_CRC                   174
.................... #define INT_DAC1R                 177
.................... #define INT_DAC1L                 178
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... #include "algoritmo.h"
.................... /**
....................  @file    ALGORITMO.h
....................  @author  Ricardo Gomez, Klaudija Ziliute
....................  @brief   PanTompkins header file
.................... */
.................... 
.................... 
.................... #ifndef __ALGORITMO_H
.................... #define __ALGORITMO_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "BEEP.h"
.................... /**
....................  @file    BEEP.h
....................  @author  Julio Gomis-Tena
....................  @brief   Generate n "beeps" of variable frequency
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __BEEP_H
.................... #define __BEEP_H
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #pin_select OC2 = BUZZER
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP_Init(void); //Inicializa las frecuencias de los beeps y la separaciÃ³n entre ellos
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP(unsigned int8); //Realiza n beeps
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __BEEP_H
.................... 
.................... 
.................... int PPM; // variable global
.................... 
.................... void algoritmo();
.................... void init_algoritmo(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ALGORITMO_H
.................... 
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... /* SECTION 1: Included header files to compile this file           */
.................... 
.................... /* SECTION 2: Public macros                                        */
.................... 
.................... #define _CLEAR_DISPLAY 				0x01
.................... #define _8BIT_4LINES_NORMAL_RE1_IS0		0x3A
.................... #define _8BIT_4LINES_REVERSE_RE1_IS0		0x3B
.................... #define _8BIT_4LINES_RE0_IS1			0x39
.................... #define _8BIT_4LINES_RE0_IS0			0x38
.................... 
.................... #define _BS1_1					0x1E
.................... #define _POWER_DOWN_DISABLE			0x02
.................... #define _SEGMENT_NORMAL_WAY			0x05
.................... #define _NW					0x09
.................... 
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_ON		0x0F
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_OFF		0x0E
.................... #define _DISPLAY_ON_CURSOR_OFF_BLINK_OFF	0x0C
.................... #define _BS0_1					0x1C
.................... #define _INTERNAL_DIVIDER			0x13
.................... #define _CONTRAST				0x77
.................... #define _POWER_ICON_CONTRAST			0x5C
.................... #define _FOLLOWER_CONTROL			0x6E
.................... 
.................... #define ADDRESS_DDRAM				0x80
.................... 
.................... 
.................... /* SECTION 3: Public types                                         */
.................... 
.................... 
.................... /* SECTION 4: Public variables :: declarations, extern mandatory   */
.................... 
.................... 
.................... /* SECTION 5: Public functions :: declarations, extern optional
....................    Rule exception (callbacks)  :: declarations, extern recommended */
.................... void display_valueADC_title(void);
.................... void LCD_command(unsigned int8);
.................... void lcdi2cinit(void);
.................... void LCD_write(char*);
.................... void initmenu(void);                                      //Inicializa el menu principal
.................... void display_frecuencia(void);       // Muestra frecuencia
.................... void LCD_cursor_at(unsigned int8 line, unsigned int8 column);
.................... 
.................... 
.................... #endif // __LCD_H
.................... // Do not write below this line!
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... void LCD_command(unsigned int8);
.................... void LCD_write(char*);
.................... void LCD_cursor_at(unsigned int8, unsigned int8);
.................... 
.................... void lcdi2cinit(void)
.................... {
.................... 
....................   OFF(SD);
*
002CA:  BCLR.B  2D0.1
002CC:  BCLR.B  2D4.1
....................   delay_ms(200);
002CE:  MOV     #C8,W0
002D0:  CALL    26E
....................   ON(PIN_C1);
*
002D4:  BCLR.B  2D0.1
002D6:  BSET.B  2D4.1
.................... 
....................   //leds output en open drain
....................   output_float(PIN_B8);
002D8:  BSET.B  2C9.0
....................   output_float(PIN_B9);
002DA:  BSET.B  2C9.1
.................... 
....................   //pullups
....................   set_pullup(TRUE, PIN_B8);
002DC:  BSET.B  6A.6
....................   set_pullup(TRUE, PIN_B9);
002DE:  BSET.B  6A.5
.................... 
.................... 
....................   //dspic as master, velocidad, nombre de la conexion
....................   #use i2c(Master, Fast=1000000, i2c1)
*
0027E:  MOV     #FFFF,W0
00280:  BTSS.B  208.3
00282:  BRA     28E
00284:  BTSC.B  209.6
00286:  BRA     284
00288:  MOV     W1,202
0028A:  BTSC.B  209.6
0028C:  BRA     28A
0028E:  MOV     #0,W0
00290:  BTSC.B  209.7
00292:  INC     W0,W0
00294:  RETURN  
.................... 
....................   LCD_command(_CLEAR_DISPLAY);
*
002E0:  MOV.B   #1,W0L
002E2:  MOV.B   W0L,904
002E4:  CALL    296
....................   LCD_command(_8BIT_4LINES_NORMAL_RE1_IS0);
*
002E8:  MOV.B   #3A,W0L
002EA:  MOV.B   W0L,904
002EC:  CALL    296
....................   LCD_command(_BS1_1);
*
002F0:  MOV.B   #1E,W0L
002F2:  MOV.B   W0L,904
002F4:  CALL    296
....................   LCD_command(_POWER_DOWN_DISABLE);
*
002F8:  MOV.B   #2,W0L
002FA:  MOV.B   W0L,904
002FC:  CALL    296
....................   LCD_command(_SEGMENT_NORMAL_WAY);
*
00300:  MOV.B   #5,W0L
00302:  MOV.B   W0L,904
00304:  CALL    296
....................   LCD_command(_NW);
*
00308:  MOV.B   #9,W0L
0030A:  MOV.B   W0L,904
0030C:  CALL    296
....................   LCD_command(_8BIT_4LINES_RE0_IS1);
*
00310:  MOV.B   #39,W0L
00312:  MOV.B   W0L,904
00314:  CALL    296
....................   LCD_command(_DISPLAY_ON_CURSOR_ON_BLINK_OFF);
*
00318:  MOV.B   #E,W0L
0031A:  MOV.B   W0L,904
0031C:  CALL    296
....................   LCD_command(_BS0_1);
*
00320:  MOV.B   #1C,W0L
00322:  MOV.B   W0L,904
00324:  CALL    296
....................   LCD_command(_INTERNAL_DIVIDER);
*
00328:  MOV.B   #13,W0L
0032A:  MOV.B   W0L,904
0032C:  CALL    296
....................   LCD_command(_CONTRAST);
*
00330:  MOV.B   #77,W0L
00332:  MOV.B   W0L,904
00334:  CALL    296
....................   LCD_command(_POWER_ICON_CONTRAST);
*
00338:  MOV.B   #5C,W0L
0033A:  MOV.B   W0L,904
0033C:  CALL    296
....................   LCD_command(_FOLLOWER_CONTROL);
*
00340:  MOV.B   #6E,W0L
00342:  MOV.B   W0L,904
00344:  CALL    296
....................   LCD_command(_8BIT_4LINES_RE0_IS0);
*
00348:  MOV.B   #38,W0L
0034A:  MOV.B   W0L,904
0034C:  CALL    296
*
00350:  RETURN  
.................... 
.................... }
.................... 
.................... void LCD_command(unsigned int8 cmd)
.................... {
....................   i2c_start();
*
00296:  BTSS.B  208.3
00298:  BRA     2A2
0029A:  BSET.B  206.1
0029C:  BTSC.B  206.1
0029E:  BRA     29C
002A0:  BRA     2A8
002A2:  BSET.B  206.0
002A4:  BTSC.B  206.0
002A6:  BRA     2A4
....................   i2c_write(0x78);
002A8:  MOV.B   #78,W1L
002AA:  CALL    27E
....................   i2c_write(0x00);
*
002AE:  CLR.B   W1
002B0:  CALL    27E
....................   i2c_write(cmd);
*
002B4:  MOV.B   904,W0L
002B6:  MOV.B   W0L,2
002B8:  CALL    27E
....................   i2c_stop();
*
002BC:  MOV     #1F,W0
002BE:  AND     206,W0
002C0:  BRA     NZ,2BC
002C2:  BSET.B  206.2
002C4:  BTSC.B  206.2
002C6:  BRA     2C4
002C8:  RETURN  
.................... }
.................... 
.................... void LCD_write(char* cd)
*
0038C:  MOV     W5,[W15++]
0038E:  MOV     W6,[W15++]
00390:  CLR.B   900
.................... {
....................   unsigned int8 c=0;
....................   i2c_start();
00392:  BTSS.B  208.3
00394:  BRA     39E
00396:  BSET.B  206.1
00398:  BTSC.B  206.1
0039A:  BRA     398
0039C:  BRA     3A4
0039E:  BSET.B  206.0
003A0:  BTSC.B  206.0
003A2:  BRA     3A0
....................   i2c_write(0x78);
003A4:  MOV.B   #78,W1L
003A6:  CALL    27E
....................   i2c_write(0x40);
*
003AA:  MOV.B   #40,W1L
003AC:  CALL    27E
....................   while(cd[c]!=0)
*
003B0:  MOV     900,W4
003B2:  CLR.B   9
003B4:  MOV     W4,W0
003B6:  ADD     8FE,W0
003B8:  MOV.B   [W0],W5L
003BA:  SE      W5,W5
003BC:  CP0     W5
003BE:  BRA     Z,3D6
....................   {
....................     i2c_write(cd[c]);
003C0:  MOV     900,W4
003C2:  CLR.B   9
003C4:  MOV     W4,W0
003C6:  ADD     8FE,W0
003C8:  MOV.B   [W0],W5L
003CA:  MOV.B   W5L,W1L
003CC:  CALL    27E
....................     c++;
*
003D0:  INC.B   0900
003D2:  GOTO    3B0
....................   }
....................   i2c_stop();
*
003D6:  MOV     #1F,W0
003D8:  AND     206,W0
003DA:  BRA     NZ,3D6
003DC:  BSET.B  206.2
003DE:  BTSC.B  206.2
003E0:  BRA     3DE
003E2:  MOV     [--W15],W6
003E4:  MOV     [--W15],W5
003E6:  RETURN  
.................... }
.................... 
.................... void LCD_cursor_at(unsigned int8 line, unsigned int8 column)
*
0036C:  MOV     W5,[W15++]
.................... {
....................   LCD_command(0x80 | (line*0x20+column));
0036E:  MOV.B   8FE,W0L
00370:  CLR.B   1
00372:  SL      W0,#5,W5
00374:  MOV     8FE,W4
00376:  LSR     W4,#8,W4
00378:  ADD     W5,W4,W0
0037A:  MOV     W0,W5
0037C:  IOR     #80,W5
0037E:  PUSH    904
00380:  MOV.B   W5L,[W15-#2]
00382:  POP     904
00384:  CALL    296
*
00388:  MOV     [--W15],W5
0038A:  RETURN  
.................... }
.................... 
.................... void initmenu(void)
.................... {
.................... 	char cabecera[]="----WELCOME-----";
*
003E8:  MOV     #2D2D,W4
003EA:  MOV     W4,8C4
003EC:  MOV     #2D2D,W4
003EE:  MOV     W4,8C6
003F0:  MOV     #4557,W4
003F2:  MOV     W4,8C8
003F4:  MOV     #434C,W4
003F6:  MOV     W4,8CA
003F8:  MOV     #4D4F,W4
003FA:  MOV     W4,8CC
003FC:  MOV     #2D45,W4
003FE:  MOV     W4,8CE
00400:  MOV     #2D2D,W4
00402:  MOV     W4,8D0
00404:  MOV     #2D2D,W4
00406:  MOV     W4,8D2
00408:  CLR.B   8D4
.................... 	char boton[]="-------------";
0040A:  MOV     #2D2D,W4
0040C:  MOV     W4,8D6
0040E:  MOV     #2D2D,W4
00410:  MOV     W4,8D8
00412:  MOV     #2D2D,W4
00414:  MOV     W4,8DA
00416:  MOV     #2D2D,W4
00418:  MOV     W4,8DC
0041A:  MOV     #2D2D,W4
0041C:  MOV     W4,8DE
0041E:  MOV     #2D2D,W4
00420:  MOV     W4,8E0
00422:  MOV     #2D,W4
00424:  MOV     W4,8E2
.................... 	char palabra1[]="PRESS OK";
00426:  MOV     #5250,W4
00428:  MOV     W4,8E4
0042A:  MOV     #5345,W4
0042C:  MOV     W4,8E6
0042E:  MOV     #2053,W4
00430:  MOV     W4,8E8
00432:  MOV     #4B4F,W4
00434:  MOV     W4,8EA
00436:  CLR.B   8EC
.................... 	//char palabra2[]="OPCION 2";
.................... 	//char palabra3[]="OPCION 3";
.................... 	//char palabra4[]="OPCION 4";
.................... 
.................... 	LCD_cursor_at(0,0);
00438:  CLR.B   8FE
0043A:  CLR.B   8FF
0043C:  CALL    36C
.................... 	LCD_write(cabecera);
*
00440:  MOV     #8C4,W4
00442:  MOV     W4,8FE
00444:  CALL    38C
.................... 	LCD_cursor_at(1,0);
*
00448:  MOV.B   #1,W0L
0044A:  MOV.B   W0L,8FE
0044C:  CLR.B   8FF
0044E:  CALL    36C
.................... 	LCD_write(boton);
*
00452:  MOV     #8D6,W4
00454:  MOV     W4,8FE
00456:  CALL    38C
.................... 	LCD_cursor_at(2,1);
*
0045A:  MOV.B   #2,W0L
0045C:  MOV.B   W0L,8FE
0045E:  MOV.B   #1,W0L
00460:  MOV.B   W0L,8FF
00462:  CALL    36C
.................... 	LCD_write(palabra1);
*
00466:  MOV     #8E4,W4
00468:  MOV     W4,8FE
0046A:  CALL    38C
*
0046E:  RETURN  
.................... }
.................... 
.................... void errorfichero(void)
.................... {
.................... 	char cabecera[]="------ERROR------";
.................... 	char boton[]="NO CONFIG.TXT DETE";
.................... 	char palabra1[]="PRESS RESET";
.................... 	//char palabra2[]="OPCION 2";
.................... 	//char palabra3[]="OPCION 3";
.................... 	//char palabra4[]="OPCION 4";
.................... 
.................... 	LCD_cursor_at(0,0);
.................... 	LCD_write(cabecera);
.................... 	LCD_cursor_at(1,0);
.................... 	LCD_write(boton);
.................... 	LCD_cursor_at(2,1);
.................... 	LCD_write(palabra1);
.................... }
.................... 
.................... void display_frecuencia(void)
.................... {
....................   LCD_command(_DISPLAY_ON_CURSOR_OFF_BLINK_OFF);
*
004BE:  MOV.B   #C,W0L
004C0:  MOV.B   W0L,904
004C2:  CALL    296
.................... 	char cabecera[]="FRECUENCIA PPM: ";
*
004C6:  MOV     #5246,W4
004C8:  MOV     W4,8C4
004CA:  MOV     #4345,W4
004CC:  MOV     W4,8C6
004CE:  MOV     #4555,W4
004D0:  MOV     W4,8C8
004D2:  MOV     #434E,W4
004D4:  MOV     W4,8CA
004D6:  MOV     #4149,W4
004D8:  MOV     W4,8CC
004DA:  MOV     #5020,W4
004DC:  MOV     W4,8CE
004DE:  MOV     #4D50,W4
004E0:  MOV     W4,8D0
004E2:  MOV     #203A,W4
004E4:  MOV     W4,8D2
004E6:  CLR.B   8D4
....................   char palabra1[]="-------------------";
004E8:  MOV     #2D2D,W4
004EA:  MOV     W4,8D6
004EC:  MOV     #2D2D,W4
004EE:  MOV     W4,8D8
004F0:  MOV     #2D2D,W4
004F2:  MOV     W4,8DA
004F4:  MOV     #2D2D,W4
004F6:  MOV     W4,8DC
004F8:  MOV     #2D2D,W4
004FA:  MOV     W4,8DE
004FC:  MOV     #2D2D,W4
004FE:  MOV     W4,8E0
00500:  MOV     #2D2D,W4
00502:  MOV     W4,8E2
00504:  MOV     #2D2D,W4
00506:  MOV     W4,8E4
00508:  MOV     #2D2D,W4
0050A:  MOV     W4,8E6
0050C:  MOV     #2D,W4
0050E:  MOV     W4,8E8
....................   char palabra2[]="BTOK PARA FINALIZAR";
00510:  MOV     #5442,W4
00512:  MOV     W4,8EA
00514:  MOV     #4B4F,W4
00516:  MOV     W4,8EC
00518:  MOV     #5020,W4
0051A:  MOV     W4,8EE
0051C:  MOV     #5241,W4
0051E:  MOV     W4,8F0
00520:  MOV     #2041,W4
00522:  MOV     W4,8F2
00524:  MOV     #4946,W4
00526:  MOV     W4,8F4
00528:  MOV     #414E,W4
0052A:  MOV     W4,8F6
0052C:  MOV     #494C,W4
0052E:  MOV     W4,8F8
00530:  MOV     #415A,W4
00532:  MOV     W4,8FA
00534:  MOV     #52,W4
00536:  MOV     W4,8FC
.................... 	LCD_cursor_at(0,0);
00538:  CLR.B   8FE
0053A:  CLR.B   8FF
0053C:  CALL    36C
....................   LCD_write(cabecera);
*
00540:  MOV     #8C4,W4
00542:  MOV     W4,8FE
00544:  CALL    38C
....................   LCD_cursor_at(1,0);
*
00548:  MOV.B   #1,W0L
0054A:  MOV.B   W0L,8FE
0054C:  CLR.B   8FF
0054E:  CALL    36C
....................   LCD_write(palabra1);
*
00552:  MOV     #8D6,W4
00554:  MOV     W4,8FE
00556:  CALL    38C
....................   LCD_cursor_at(2,0);
*
0055A:  MOV.B   #2,W0L
0055C:  MOV.B   W0L,8FE
0055E:  CLR.B   8FF
00560:  CALL    36C
....................   LCD_write(palabra2);
*
00564:  MOV     #8EA,W4
00566:  MOV     W4,8FE
00568:  CALL    38C
*
0056C:  RETURN  
.................... }
.................... 
.................... void display_valueADC_title(void)
.................... {
....................   char cabecera[]="VALOR ADC: ";
....................   //char palabra2[]="OPCION 2";
....................   //char palabra3[]="OPCION 3";
....................   //char palabra4[]="OPCION 4";
.................... 
....................   LCD_cursor_at(0,0);
....................   LCD_write(cabecera);
.................... }
.................... 
.................... /**
.................... /**
....................  @file    main.c
....................  @author  Ricardo Gomez
.................... 
....................  @brief   main EEC
.................... */
.................... 
.................... /* SECTION 1: Included header files to compile this file           */
.................... 
.................... #include <common.h>
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
0056E:  MOV     W1,[W15++]
00570:  MOV     888,W1
00572:  MOV.B   W0L,[W1++]
00574:  CLR.B   [W1]
00576:  MOV     [--W15],W1
00578:  INC     0888
0057A:  RETURN  
0057C:  MOV     W5,[W15++]
0057E:  MOV     #C,W5
00580:  REPEAT  #3
00582:  MOV     [W5++],[W15++]
00584:  BTSS    W0.F
00586:  BRA     5A6
00588:  NEG     W0,W0
0058A:  BSET    W4.8
0058C:  BTSS    W4.F
0058E:  BRA     5A6
00590:  MOV     W0,[W15++]
00592:  MOV     #2D,W0
00594:  MOV     W4,[W15++]
00596:  MOV     W0,[W15++]
00598:  MOV     [--W15],W0
0059A:  CALL    56E
*
0059E:  MOV     [--W15],W4
005A0:  MOV     [--W15],W0
005A2:  BCLR    W4.8
005A4:  DEC.B   0008
005A6:  CLR     W5
005A8:  MOV     W0,W7
005AA:  MOV     W4,W9
005AC:  BCLR    W4.F
005AE:  CP0.B   W4L
005B0:  BRA     NZ,5BE
005B2:  BTSC    W9.F
005B4:  BRA     5BA
005B6:  MOV     #0,W5
005B8:  BRA     5E8
005BA:  MOV     #0,W5
005BC:  BRA     5E8
005BE:  BTSS    W9.8
005C0:  SUB.B   W4L,#6,W5L
005C2:  BTSC    W9.8
005C4:  SUB.B   W4L,#7,W5L
005C6:  BRA     NC,5E6
005C8:  MOV     #30,W0
005CA:  BTSS    W9.F
005CC:  MOV     #20,W0
005CE:  MOV     W0,[W15++]
005D0:  MOV     W4,[W15++]
005D2:  MOV     W0,[W15++]
005D4:  MOV     [--W15],W0
005D6:  CALL    56E
*
005DA:  MOV     [--W15],W4
005DC:  MOV     [--W15],W0
005DE:  DEC     W5,W5
005E0:  BRA     NN,5CE
005E2:  MOV     #5,W5
005E4:  BRA     5E8
005E6:  MOV     W4,W5
005E8:  MOV     #6,W4
005EA:  BTSC    W5.8
005EC:  INC     W4,W4
005EE:  BSET    W5.E
005F0:  BTSC    W9.F
005F2:  BSET    W5.F
005F4:  MOV     #2710,W8
005F6:  REPEAT  #11
005F8:  DIV.U   W7,W8
005FA:  CALL    64E
*
005FE:  MOV     W1,W7
00600:  MOV     #3E8,W8
00602:  REPEAT  #11
00604:  DIV.U   W7,W8
00606:  CALL    64E
*
0060A:  MOV     W1,W7
0060C:  MOV     #64,W8
0060E:  REPEAT  #11
00610:  DIV.U   W7,W8
00612:  CALL    64E
*
00616:  MOV     W1,W7
00618:  MOV     #A,W8
0061A:  REPEAT  #11
0061C:  DIV.U   W7,W8
0061E:  CALL    64E
*
00622:  BTSS    W9.8
00624:  BRA     63A
00626:  MOV     #2D,W0
00628:  MOV     W1,[W15++]
0062A:  MOV     W4,[W15++]
0062C:  MOV     W0,[W15++]
0062E:  MOV     [--W15],W0
00630:  CALL    56E
*
00634:  MOV     [--W15],W4
00636:  MOV     [--W15],W1
00638:  BCLR    W9.8
0063A:  MOV     #30,W0
0063C:  ADD.B   W1L,W0L,W0L
0063E:  MOV     W0,2A
00640:  MOV     W4,[W15++]
00642:  MOV     W0,[W15++]
00644:  MOV     [--W15],W0
00646:  CALL    56E
*
0064A:  MOV     [--W15],W4
0064C:  BRA     6A2
0064E:  MOV     #30,W6
00650:  CP0     W0
00652:  BRA     NZ,670
00654:  BTSS    W5.E
00656:  BRA     68E
00658:  DEC     W4,W4
0065A:  CP.B    W4L,W5L
0065C:  BRA     Z,662
0065E:  BTSC.B  42.0
00660:  RETURN  
00662:  CP0     W0
00664:  BRA     NZ,670
00666:  BTSS    W5.E
00668:  BRA     68E
0066A:  BTSS    W5.F
0066C:  MOV     #20,W6
0066E:  BRA     68E
00670:  BCLR    W5.E
00672:  BTSS    W9.8
00674:  BRA     68E
00676:  MOV     W0,W10
00678:  MOV     #2D,W0
0067A:  MOV     W1,[W15++]
0067C:  MOV     W4,[W15++]
0067E:  MOV     W0,[W15++]
00680:  MOV     [--W15],W0
00682:  CALL    56E
*
00686:  MOV     [--W15],W4
00688:  MOV     [--W15],W1
0068A:  BCLR    W9.8
0068C:  MOV     W10,W0
0068E:  ADD.B   W6L,W0L,W0L
00690:  MOV     W1,[W15++]
00692:  MOV     W4,[W15++]
00694:  MOV     W0,[W15++]
00696:  MOV     [--W15],W0
00698:  CALL    56E
*
0069C:  MOV     [--W15],W4
0069E:  MOV     [--W15],W1
006A0:  RETURN  
006A2:  MOV     #12,W5
006A4:  REPEAT  #3
006A6:  MOV     [--W15],[W5--]
006A8:  MOV     [--W15],W5
006AA:  RETURN  
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "lcd.h"
.................... /**
....................  @file    lcd.h
....................  @author  Ricardo Gï¿½mez
....................  @brief   LCD management
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __LCD_H
.................... #define __LCD_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... /* SECTION 1: Included header files to compile this file           */
.................... 
.................... /* SECTION 2: Public macros                                        */
.................... 
.................... #define _CLEAR_DISPLAY 				0x01
.................... #define _8BIT_4LINES_NORMAL_RE1_IS0		0x3A
.................... #define _8BIT_4LINES_REVERSE_RE1_IS0		0x3B
.................... #define _8BIT_4LINES_RE0_IS1			0x39
.................... #define _8BIT_4LINES_RE0_IS0			0x38
.................... 
.................... #define _BS1_1					0x1E
.................... #define _POWER_DOWN_DISABLE			0x02
.................... #define _SEGMENT_NORMAL_WAY			0x05
.................... #define _NW					0x09
.................... 
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_ON		0x0F
.................... #define _DISPLAY_ON_CURSOR_ON_BLINK_OFF		0x0E
.................... #define _DISPLAY_ON_CURSOR_OFF_BLINK_OFF	0x0C
.................... #define _BS0_1					0x1C
.................... #define _INTERNAL_DIVIDER			0x13
.................... #define _CONTRAST				0x77
.................... #define _POWER_ICON_CONTRAST			0x5C
.................... #define _FOLLOWER_CONTROL			0x6E
.................... 
.................... #define ADDRESS_DDRAM				0x80
.................... 
.................... 
.................... /* SECTION 3: Public types                                         */
.................... 
.................... 
.................... /* SECTION 4: Public variables :: declarations, extern mandatory   */
.................... 
.................... 
.................... /* SECTION 5: Public functions :: declarations, extern optional
....................    Rule exception (callbacks)  :: declarations, extern recommended */
.................... void display_valueADC_title(void);
.................... void LCD_command(unsigned int8);
.................... void lcdi2cinit(void);
.................... void LCD_write(char*);
.................... void initmenu(void);                                      //Inicializa el menu principal
.................... void display_frecuencia(void);       // Muestra frecuencia
.................... void LCD_cursor_at(unsigned int8 line, unsigned int8 column);
.................... 
.................... 
.................... #endif // __LCD_H
.................... // Do not write below this line!
.................... 
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #ifndef LIB_h
.................... #define LIB_h
.................... 
.................... //////////// Standard Header file for the DSPIC33FJ128MC804 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ128MC804
.................... 
.................... #nolist
.................... //////// Program memory: 44032x24  Data RAM: 16384  Stack: 31
.................... //////// I/O: 35   Analog Pins: 9
.................... //////// Fuses: WRTB,NOWRTB,BSSHL,BSSHM,BSSHS,BSSSL,BSSSM,BSSSS,NOBSS
.................... //////// Fuses: RBS1024,RBS256,RBS128,NORBS,WRTSS,NOWRTSS,SSSHL,SSSHM,SSSHS
.................... //////// Fuses: SSSSL,SSSSM,SSSSS,NOSSS,RSS4096,RSS2048,RSS256,NORSS,WRT
.................... //////// Fuses: NOWRT,PROTECT_HIGH,PROTECT,NOPROTECT,FRC,FRC_PLL,PR,PR_PLL
.................... //////// Fuses: SOSC,LPRC,FRC_DIV_BY_16,FRC_PS,NOIESO,IESO,EC,XT,HS,NOPR
.................... //////// Fuses: OSCIO,NOOSCIO,NOIOL1WAY,IOL1WAY,CKSFSM,CKSNOFSM,NOCKSFSM
.................... //////// Fuses: WPOSTS1,WPOSTS2,WPOSTS3,WPOSTS4,WPOSTS5,WPOSTS6,WPOSTS7
.................... //////// Fuses: WPOSTS8,WPOSTS9,WPOSTS10,WPOSTS11,WPOSTS12,WPOSTS13,WPOSTS14
.................... //////// Fuses: WPOSTS15,WPOSTS16,WPRES32,WPRES128,NOWINDIS,WINDIS,NOWDT,WDT
.................... //////// Fuses: NOPUT,PUT2,PUT4,PUT8,PUT16,PUT32,PUT64,PUT128,ALTI2C1
.................... //////// Fuses: NOALTI2C1,LPOL_LOW,LPOL_HIGH,HPOL_LOW,HPOL_HIGH,PWMPIN
.................... //////// Fuses: NOPWMPIN,ICSP3,ICSP2,ICSP1,NOJTAG,JTAG,DEBUG,NODEBUG
.................... ////////
.................... #if (!defined(__PCD__)||defined(__ISNT_CCS__))
.................... #define _bif
.................... #define int8 char
.................... #define int16 int
.................... #define int32 long
.................... #define int48 long
.................... #define int64 long long
.................... #define float32 float
.................... #define float48 float
.................... #define float64 double
.................... #define int1 char
.................... 
.................... #endif
.................... ////////////////////////////////////////////////////////////////// PIN_SELECT
.................... // #pin_select function=pin
.................... // Valid Pins:
.................... //    PIN_B0,PIN_B1,PIN_B2,PIN_B3,PIN_B4,PIN_B5,PIN_B6,PIN_B7,PIN_B8,PIN_B9,
.................... //    PIN_B10,PIN_B11,PIN_B12,PIN_B13,PIN_B14,PIN_B15,PIN_C0,PIN_C1,PIN_C2,
.................... //    PIN_C3,PIN_C4,PIN_C5,PIN_C6,PIN_C7,PIN_C8,PIN_C9
.................... // Input Functions:
.................... //    INT1,INT2,T2CK,T3CK,T4CK,T5CK,IC1,IC2,IC3,IC4,IC5,OCFA,OCFB,U1RX,U1CTS,
.................... //    U2RX,U2CTS,SDI1,SCK1IN,SS1IN,SDI2,SCK2IN,SS2IN,C1RX,IC7,IC8,CSDI,CSCK,COFS,
.................... //    FLTA1,FLTA2,QEA1,QEB1,INDX1,QEA2,QEB2,INDX2,T1CK,FLT1,FLT2,FLT3,FLT4,FLT5,
.................... //    FLT6,FLT7,FLT8,SYNCI1,SYNCI2
.................... // Output Functions:
.................... //    NULL,C1OUT,C2OUT,U1TX,U1RTS,U2TX,U2RTS,SDO1,SCK1OUT,SS1OUT,SDO2,SCK2OUT,
.................... //    SS2OUT,OC1,OC2,OC3,OC4,OC5,C1TX,CSDO,CSCKOUT,COFSOUT,UPDN1,UPDN2,CTPLS,
.................... //    C3OUT,SYNCO1,REFCLKO,CMP1,CMP2,CMP3,CMP4,PWM4H,PWM4L
.................... //
.................... 
.................... ////////////////////////////////////////////////////////////////// I/O
.................... // Discrete I/O Functions: SET_TRIS_x(), OUTPUT_x(), INPUT_x(),
.................... //                         SET_PULLUP(), INPUT(),
.................... //                         OUTPUT_LOW(), OUTPUT_HIGH(),
.................... //                         OUTPUT_FLOAT(), OUTPUT_BIT()
.................... // Discrete I/O Prototypes:
.................... _bif void set_tris_a(unsigned int16 value);
.................... _bif void set_tris_b(unsigned int16 value);
.................... _bif void set_tris_c(unsigned int16 value);
.................... _bif unsigned int16 get_tris_a(void);
.................... _bif unsigned int16 get_tris_b(void);
.................... _bif unsigned int16 get_tris_c(void);
.................... _bif void output_a(unsigned int16 value);
.................... _bif void output_b(unsigned int16 value);
.................... _bif void output_c(unsigned int16 value);
.................... _bif unsigned int16 input_a(void);
.................... _bif unsigned int16 input_b(void);
.................... _bif unsigned int16 input_c(void);
.................... _bif int16 input_change_a(void);
.................... _bif int16 input_change_b(void);
.................... _bif int16 input_change_c(void);
.................... _bif void set_pullup(int1 state);
.................... _bif void set_pullup(int1 state, unsigned int16 pin);
.................... _bif void set_pulldown(int1 state);
.................... _bif void set_pulldown(int1 state, unsigned int16 pin);
.................... _bif int1 input(unsigned int16 pin);
.................... _bif int1 input_state(unsigned int16 pin);
.................... _bif void output_low(unsigned int16 pin);
.................... _bif void output_high(unsigned int16 pin);
.................... _bif void output_toggle(unsigned int16 pin);
.................... _bif void output_bit(unsigned int16 pin, int1 level);
.................... _bif void output_float(unsigned int16 pin);
.................... _bif void output_drive(unsigned int16 pin);
.................... // Constants used to identify pins in the above are:
.................... 
.................... #define PIN_A0  5648
.................... #define PIN_A1  5649
.................... #define PIN_A2  5650
.................... #define PIN_A3  5651
.................... #define PIN_A4  5652
.................... #define PIN_A7  5655
.................... #define PIN_A8  5656
.................... #define PIN_A9  5657
.................... #define PIN_A10  5658
.................... 
.................... #define PIN_B0  5712
.................... #define PIN_B1  5713
.................... #define PIN_B2  5714
.................... #define PIN_B3  5715
.................... #define PIN_B4  5716
.................... #define PIN_B5  5717
.................... #define PIN_B6  5718
.................... #define PIN_B7  5719
.................... #define PIN_B8  5720
.................... #define PIN_B9  5721
.................... #define PIN_B10  5722
.................... #define PIN_B11  5723
.................... #define PIN_B12  5724
.................... #define PIN_B13  5725
.................... #define PIN_B14  5726
.................... #define PIN_B15  5727
.................... 
.................... #define PIN_C0  5776
.................... #define PIN_C1  5777
.................... #define PIN_C2  5778
.................... #define PIN_C3  5779
.................... #define PIN_C4  5780
.................... #define PIN_C5  5781
.................... #define PIN_C6  5782
.................... #define PIN_C7  5783
.................... #define PIN_C8  5784
.................... #define PIN_C9  5785
.................... 
.................... ////////////////////////////////////////////////////////////////// Useful defines
.................... #define FALSE 0
.................... #define TRUE 1
.................... 
.................... #define BYTE unsigned int8
.................... #define BOOLEAN int1
.................... 
.................... #define getc getch
.................... #define fgetc getch
.................... #define getchar getch
.................... #define putc putchar
.................... #define fputc putchar
.................... #define fgets gets
.................... #define fputs puts
.................... 
.................... ////////////////////////////////////////////////////////////////// UART
.................... // UART Prototypes:
.................... _bif void setup_uart(unsigned int32 baud);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream);
.................... _bif void setup_uart(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... _bif void set_uart_speed(unsigned int32 baud);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream);
.................... _bif void set_uart_speed(unsigned int32 baud, unsigned int8 stream, unsigned int32 clock);
.................... // Constants used in setup_uart() are:
.................... // FALSE - Turn UART off
.................... // TRUE  - Turn UART on
.................... #define UART_ADDRESS           2
.................... #define UART_DATA              4
.................... #define UART_AUTODETECT        8
.................... #define UART_AUTODETECT_NOWAIT 9
.................... #define UART_WAKEUP_ON_RDA     10
.................... #define UART_SEND_BREAK        13
.................... 
.................... ////////////////////////////////////////////////////////////////// WDT
.................... // Watch Dog Timer Functions: SETUP_WDT() and RESTART_WDT()
.................... // WDT Prototypes:
.................... _bif void setup_wdt(unsigned int8 mode);
.................... _bif void restart_wdt(void);
.................... // Constants used for SETUP_WDT() are:
.................... #define WDT_ON      1
.................... #define WDT_OFF     0
.................... 
.................... #define  WDT_1MS    0x002
.................... #define  WDT_2MS    0x003
.................... #define  WDT_4MS    0x004
.................... #define  WDT_8MS    0x005
.................... #define  WDT_16MS   0x006
.................... #define  WDT_32MS   0x007
.................... #define  WDT_64MS   0x008
.................... #define  WDT_128MS  0x009
.................... #define  WDT_256MS  0x00A
.................... #define  WDT_512MS  0x00B
.................... #define  WDT_1S     0x00C
.................... #define  WDT_2S     0x00D
.................... #define  WDT_4S     0x00E
.................... #define  WDT_8S     0x00F
.................... #define  WDT_16S    0x010
.................... #define  WDT_33S    0x011
.................... #define  WDT_65S    0x030
.................... #define  WDT_131S   0x031
.................... 
.................... ////////////////////////////////////////////////////////////////// Control
.................... // Control Functions:  RESET_CPU(), SLEEP(), RESTART_CAUSE()
.................... // Prototypes:
.................... _bif unsigned int8 restart_cause(void);
.................... _bif void reset_cpu(void);
.................... _bif void sleep(void);
.................... _bif void sleep(unsigned int8 mode);
.................... // Constants passed into RESTART_CAUSE() are:
.................... #define RESTART_POWER_UP      0
.................... #define RESTART_BROWNOUT      1
.................... #define RESTART_WATCHDOG      4
.................... #define RESTART_SOFTWARE      6
.................... #define RESTART_MCLR          7
.................... #define RESTART_ILLEGAL_OP    14
.................... #define RESTART_TRAP_CONFLICT 15
.................... //
.................... // Constants passed into SLEEP() are:
.................... #define SLEEP_FULL      0  // Default
.................... #define SLEEP_IDLE      1  // Clock and peripherals don't stop
.................... 
.................... ////////////////////////////////////////////////////////////////// INTERNAL RC
.................... // Oscillator Prototypes:
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target);
.................... _bif void setup_oscillator(unsigned int8 type, unsigned int32 target, unsigned int32 source);
.................... // Constants used in setup_oscillator() are:
.................... #define OSC_INTERNAL     32
.................... #define OSC_CRYSTAL       1
.................... #define OSC_CLOCK         2
.................... #define OSC_RC            3
.................... #define OSC_SECONDARY    16
.................... 
.................... ////////////////////////////////////////////////////////////////// Timer
.................... // Timer Functions: SETUP_TIMERx, GET_TIMERx, GET_TIMERxy,
.................... // SET_TIMERx, SET_TIMERxy
.................... // Timer x Prototypes:
.................... _bif void setup_timer1(unsigned int16 mode);
.................... _bif void setup_timer1(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer1(void);
.................... _bif void set_timer1(unsigned int16 value);
.................... _bif void setup_timer2(unsigned int16 mode);
.................... _bif void setup_timer2(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer2(void);
.................... _bif void set_timer2(unsigned int16 value);
.................... _bif void setup_timer3(unsigned int16 mode);
.................... _bif void setup_timer3(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer3(void);
.................... _bif void set_timer3(unsigned int16 value);
.................... _bif unsigned int32 get_timer23(void);
.................... _bif void set_timer23(unsigned int32 value);
.................... _bif void setup_timer4(unsigned int16 mode);
.................... _bif void setup_timer4(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer4(void);
.................... _bif void set_timer4(unsigned int16 value);
.................... _bif void setup_timer5(unsigned int16 mode);
.................... _bif void setup_timer5(unsigned int16 mode, unsigned int16 period);
.................... _bif unsigned int16 get_timer5(void);
.................... _bif void set_timer5(unsigned int16 value);
.................... _bif unsigned int32 get_timer45(void);
.................... _bif void set_timer45(unsigned int32 value);
.................... // Constants used for SETUP_TIMERx() are:
.................... //      (or (via |) together constants from each group)
.................... #define TMR_DISABLED 0x0000
.................... #define TMR_INTERNAL 0x8000
.................... #define TMR_EXTERNAL 0x8002
.................... #define TMR_GATE     0x0040
.................... 
.................... #define TMR_DIV_BY_1   0x0000
.................... #define TMR_DIV_BY_8   0x0010
.................... #define TMR_DIV_BY_64  0x0020
.................... #define TMR_DIV_BY_256 0x0030
.................... #define TMR_32_BIT     0x0008 // Only for even numbered timers
.................... 
.................... #define TMR_HALT_IDLE      0x2000
.................... #define TMR_CONTINUE_IDLE  0x0000
.................... 
.................... #define T1_EXTERNAL_SYNC  0x8006 //This only applies to Timer1
.................... #define T1_EXTERNAL_RTC   0xC002 //This only applies to Timer1
.................... /////////////////////////////////////////////////////////// INPUT CAPTURE
.................... // Functions: SETUP_CAPTURE, GET_CAPTURE,
.................... // IC Prototypes:
.................... _bif void setup_capture(unsigned int8 module, unsigned int16 mode);
.................... _bif unsigned int16 get_capture(unsigned int8 module);
.................... _bif unsigned int16 get_capture(unsigned int8 module, int1 wait);
.................... // Constants used for SETUP_CAPTURE() are:
.................... #define CAPTURE_OFF               0x0000  // Capture OFF
.................... #define CAPTURE_EE                0x0001  // Capture Every Edge
.................... #define CAPTURE_FE                0x0002  // Capture Falling Edge
.................... #define CAPTURE_RE                0x0003  // Capture Rising Edge
.................... #define CAPTURE_DIV_4             0x0004  // Capture Every 4th Rising Edge
.................... #define CAPTURE_DIV_16            0x0005  // Capture Every 16th Rising Edge
.................... #define CAPTURE_INTERRUPT_ONLY    0x0007  // Interrupt on Rising Edge when in Sleep or Idle
.................... 
.................... // The following defines can be ORed | with above to configure interrupts
.................... #define INTERRUPT_EVERY_CAPTURE   0x0000  // Interrupt on every capture event
.................... #define INTERRUPT_SECOND_CAPTURE  0x0020  // Interrupt on every second capture event
.................... #define INTERRUPT_THIRD_CAPTURE   0x0040  // Interrupt on every third capture event
.................... #define INTERRUPT_FOURTH_CAPTURE  0x0060  // Interrupt on every fourth capture event
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define CAPTURE_TIMER2            0x0080  // On capture event Timer 2 is captured
.................... #define CAPTURE_TIMER3            0x0000  // On capture event Timer 3 is captured
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define CAPTURE_HALT_IDLE         0x2000  // Capture module halts during idle mode
.................... #define CAPTURE_CONTINUE_IDLE     0x0000  // Capture module continues during idle mode
.................... 
.................... /////////////////////////////////////////////////////////// OUTPUT COMPARE
.................... // Functions: SETUP_COMPARE, SET_PWM_DUTY, SET_COMPARE_TIME
.................... // OC Prototypes:
.................... _bif void setup_compare(unsigned int8 module, unsigned int16 mode);
.................... _bif void set_pwm_duty(unsigned int8 module, unsigned int16 duty);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr);
.................... _bif void set_compare_time(unsigned int8 module, unsigned int16 ocr, unsigned int16 ocrs);
.................... // Constants used for SETUP_COMPARE() are:
.................... #define COMPARE_OFF               0x0000  // Compare OFF
.................... #define COMPARE_SET_ON_MATCH      0x0001  // Pin from low to high on match
.................... #define COMPARE_CLR_ON_MATCH      0x0002  // Pin from high to low on match
.................... #define COMPARE_TOGGLE            0x0003  // Pin will toggle on every match occurrence
.................... #define COMPARE_SINGLE_PULSE      0x0004  // Pin will generate single pulse on first match
.................... #define COMPARE_CONT_PULSE        0x0005  // Pin will pulse for every match
.................... #define COMPARE_PWM               0x0006  // Compare operates as PWM with fault pin disabled
.................... #define COMPARE_PWM_FAULT         0x0007  // Compare operates as PWM with fault pin enabled
.................... 
.................... // The following defines can be ORed | with above to select timer
.................... #define COMPARE_TIMER2            0x0000  // Timer 2 is the base timer
.................... #define COMPARE_TIMER3            0x0008  // Timer 3 is the base timer
.................... 
.................... // The following defines can be ORed | with above to select idle operation mode
.................... #define COMPARE_HALT_IDLE         0x2000  // Compare module halts during idle mode
.................... #define COMPARE_CONTINUE_IDLE     0x0000  // Compare module continues during idle mode
.................... 
.................... ////////////////////////////////////////////////////////////////// SPI
.................... // SPI Functions: SETUP_SPI, SPI_WRITE, SPI_READ, SPI_DATA_IN
.................... // SPI Prototypes:
.................... _bif void setup_spi(unsigned int16 mode);
.................... _bif void spi_write(unsigned int8 data);
.................... _bif void spi_write(int1 wait, unsigned int8 data);
.................... _bif void spi_write_16(unsigned int16 data);
.................... _bif void spi_write_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read(void);
.................... _bif unsigned int8 spi_read(unsigned int8 data);
.................... _bif unsigned int16 spi_read_16(void);
.................... _bif unsigned int16 spi_read_16(unsigned int16 data);
.................... _bif int1 spi_data_in(void);
.................... _bif void setup_spi2(unsigned int16 mode);
.................... _bif void spi_write2(unsigned int8 data);
.................... _bif void spi_write2(int1 wait, unsigned int8 data);
.................... _bif void spi_write2_16(unsigned int16 data);
.................... _bif void spi_write2_16(int1 wait, unsigned int16 data);
.................... _bif unsigned int8 spi_read2(void);
.................... _bif unsigned int8 spi_read2(unsigned int8 data);
.................... _bif unsigned int16 spi_read2_16(void);
.................... _bif unsigned int16 spi_read2_16(unsigned int16 data);
.................... _bif int1 spi_data_in2(void);
.................... // Constants used in SETUP_SPI() are:
.................... //      (or (via |) together constants from each group)
.................... #define SPI_MASTER                 0x0020
.................... #define SPI_SLAVE                  0x0000
.................... 
.................... #define SPI_SCK_IDLE_HIGH          0x0040
.................... #define SPI_SCK_IDLE_LOW           0x0000
.................... 
.................... #define SPI_XMIT_L_TO_H            0x0100
.................... #define SPI_XMIT_H_TO_L            0x0000
.................... 
.................... #define SPI_MODE_16B               0x0400
.................... #define SPI_MODE_8B                0x0000
.................... 
.................... #define SPI_SAMPLE_AT_END          0x0200
.................... #define SPI_SAMPLE_AT_MIDDLE       0x0000
.................... 
.................... #define SPI_SS_ENABLED             0x0000
.................... #define SPI_SS_DISABLED            0x0080
.................... 
.................... //or (via |) one of the following when operating as MASTER
.................... #define SPI_CLK_DIV_1              0x001F
.................... #define SPI_CLK_DIV_2              0x001B
.................... #define SPI_CLK_DIV_3              0x0017
.................... #define SPI_CLK_DIV_4              0x001E
.................... #define SPI_CLK_DIV_5              0x000F
.................... #define SPI_CLK_DIV_6              0x000B
.................... #define SPI_CLK_DIV_7              0x0007
.................... #define SPI_CLK_DIV_8              0x0003
.................... #define SPI_CLK_DIV_12             0x0016
.................... #define SPI_CLK_DIV_16             0x001D
.................... #define SPI_CLK_DIV_20             0x000E
.................... #define SPI_CLK_DIV_24             0x000A
.................... #define SPI_CLK_DIV_28             0x0006
.................... #define SPI_CLK_DIV_32             0x0002
.................... #define SPI_CLK_DIV_48             0x0015
.................... #define SPI_CLK_DIV_64             0x001C
.................... #define SPI_CLK_DIV_80             0x000D
.................... #define SPI_CLK_DIV_96             0x0009
.................... #define SPI_CLK_DIV_112            0x0005
.................... #define SPI_CLK_DIV_128            0x0001
.................... #define SPI_CLK_DIV_192            0x0014
.................... #define SPI_CLK_DIV_256            0x0010
.................... #define SPI_CLK_DIV_320            0x000C
.................... #define SPI_CLK_DIV_384            0x0008
.................... #define SPI_CLK_DIV_448            0x0004
.................... #define SPI_CLK_DIV_512            0x0000
.................... 
.................... //The following defines are provided for compatibility
.................... #define SPI_L_TO_H         SPI_SCK_IDLE_LOW
.................... #define SPI_H_TO_L         SPI_SCK_IDLE_HIGH
.................... 
.................... ////////////////////////////////////////////////////////////////// ADC
.................... // ADC Functions: SETUP_ADC(), SETUP_ADC_PORTS()
.................... //                SET_ADC_CHANNEL(), READ_ADC()
.................... // ADC Prototypes:
.................... _bif void setup_adc(unsigned int32 mode);
.................... _bif void setup_adc_ports(unsigned int32 pins);
.................... _bif void setup_adc_ports(unsigned int32 pins, unsigned int16 reference);
.................... _bif void set_adc_channel(unsigned int8 channel);
.................... _bif void set_adc_channel(unsigned int8 channel, unsigned int8 neg_channel);
.................... _bif unsigned int16 read_adc(void);
.................... _bif unsigned int16 read_adc(unsigned int8 mode);
.................... _bif int1 adc_done(void);
.................... // Constants used for SETUP_ADC() are:
.................... // Clock is at ADCS<5:0> of ADCON3 Reg. (0x02A4)
.................... // Tad = (Tcy/2)*(ADCS<5:0>+1)
.................... #define ADC_OFF                 0x10000
.................... #define ADC_CLOCK                0x0000
.................... #define ADC_CLOCK_DIV_2          0x0001
.................... #define ADC_CLOCK_DIV_4          0x0003
.................... #define ADC_CLOCK_DIV_8          0x0007
.................... #define ADC_CLOCK_DIV_16         0x000F
.................... #define ADC_CLOCK_DIV_32         0x001F
.................... #define ADC_CLOCK_DIV_64         0x003F
.................... #define ADC_CLOCK_INTERNAL       0x8000     // Internal
.................... 
.................... // One of the following may be OR'ed in with the above using |
.................... // Auto-Sample Time bits
.................... #define ADC_TAD_MUL_0            0x1F00
.................... #define ADC_TAD_MUL_2            0x1D00
.................... #define ADC_TAD_MUL_4            0x1B00
.................... #define ADC_TAD_MUL_8            0x1700
.................... #define ADC_TAD_MUL_16           0x0F00
.................... #define ADC_TAD_MUL_31           0x0000
.................... 
.................... // Constants used in READ_ADC() are:
.................... #define ADC_START_AND_READ       0x07
.................... #define ADC_START_ONLY           0x01
.................... #define ADC_READ_ONLY            0x06
.................... 
.................... // Constants used in SET_ADC_CHANNEL() second parameter are:
.................... #define VSS                      0
.................... 
.................... // Constants used in SETUP_ADC_PORTS() are:
.................... // First argument:
.................... // OR together desired pins
.................... #define NO_ANALOGS      0           // None
.................... #define ALL_ANALOG      0xFFFFFFFF  // All
.................... #define sAN0      0x00000001 //| A0
.................... #define sAN1      0x00000002 //| A1
.................... #define sAN2      0x00000004 //| B0
.................... #define sAN3      0x00000008 //| B1
.................... #define sAN4      0x00000010 //| B2
.................... #define sAN5      0x00000020 //| B3
.................... #define sAN6      0x00000040 //| C0
.................... #define sAN7      0x00000080 //| C1
.................... #define sAN8      0x00000100 //| C2
.................... 
.................... // Optional Second argument:
.................... #define VSS_VDD            0x0000 // Range 0-Vdd
.................... #define VREF_VREF          0x6000 // Range VrefL-VrefH
.................... #define VREF_VDD           0x4000 // Range VrefL-Vdd
.................... #define VSS_VREF           0x2000 // Range 0-VrefH
.................... 
.................... ////////////////////////////////////////////////////////////////// COMP
.................... // Comparator Functions: setup_comparator()
.................... // Comparator Variables: C1OUT, C2OUT
.................... // Comparator Prototypes:
.................... _bif void setup_comparator(unsigned int16 mode);
.................... // Constants used in setup_comparator() are:
.................... #define NC_NC_NC_NC      0
.................... #define B2_B3_NC_NC      0x401
.................... #define B2_VR_NC_NC      0x400
.................... #define B3_VR_NC_NC      0x402
.................... #define NC_NC_B0_B1      0x804
.................... #define NC_NC_B0_VR      0x800
.................... #define NC_NC_B1_VR      0x808
.................... #define B2_B3_B0_B1      B2_B3_NC_NC | NC_NC_B0_B1
.................... #define B2_VR_B0_VR      B2_VR_NC_NC | NC_NC_B0_VR
.................... #define B3_VR_B1_VR      B3_VR_NC_NC | NC_NC_B1_VR
.................... 
.................... #define C1_INVERT     0x10
.................... #define C2_INVERT     0x20
.................... #define C1_OUTPUT     0x100
.................... #define C2_OUTPUT     0x200
.................... 
.................... #bit C1OUT = getenv("SFR:CMCON").6
.................... #bit C2OUT = getenv("SFR:CMCON").7
.................... 
.................... ////////////////////////////////////////////////////////////////// VREF
.................... // VREF Prototypes:
.................... _bif void setup_vref(unsigned int16 mode);
.................... // Constants used in setup_vref() are:
.................... #define VREF_DISABLED  0x0000
.................... #define VREF_VSS_VDD   0x0080
.................... #define VREF_ANALOG    0x0090
.................... // One of the following maybe OR'ed in with the above using |
.................... #define VREF_HIGH      0x0080
.................... #define VREF_LOW       0x00A0
.................... // The following maybe OR'ed in with the above using |
.................... #define VREF_OUTPUT    0x0040
.................... // Or (with |) the above with a number 0-15
.................... 
.................... ////////////////////////////////////////////////////////////////// PMP
.................... // PMP Functions: setup_pmp(), pmp_address(), psp_read(), pmp_read(),
.................... // psp_write(), pmp_write(), psp_output_full(),psp_input_full(),
.................... // psp_overflow(), pmp_output_full(), pmp_input_full(),
.................... // pmp_overflow()
.................... // PMP Prototypes:
.................... _bif void setup_pmp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif void pmp_address(unsigned int16 address);
.................... _bif unsigned int8 pmp_read(void);
.................... _bif void pmp_write(unsigned int8 data);
.................... _bif int1 pmp_output_full(void);
.................... _bif int1 pmp_input_full(void);
.................... _bif int1 pmp_overflow(void);
.................... _bif void setup_psp(unsigned int32 mode, unsigned int16 address_mask);
.................... _bif unsigned int8 psp_read(void);
.................... _bif unsigned int8 psp_read(unsigned int16 address);
.................... _bif void psp_write(unsigned int8 data);
.................... _bif void psp_write(unsigned int8 data, unsigned int16 address);
.................... _bif int1 psp_output_full(void);
.................... _bif int1 psp_input_full(void);
.................... _bif int1 psp_overflow(void);
.................... // Constants used in SETUP_PMP() and SETUP_PSP() are:
.................... #define PAR_ENABLE                0x8000
.................... #define PAR_DISABLE               0x0000    // Module enable/disable options
.................... #define PAR_STOP_IN_IDLE          0x2000
.................... #define PAR_CONTINUE_IN_IDLE      0x0000
.................... #define PAR_ADDR_NOT_MULTIPLEXED  0x0000    // Address multiplexing options
.................... #define PAR_LOW_ADDR_MULTIPLEXED  0x0800    // Address multiplexing options
.................... #define PAR_FULL_ADDR_MULTIPLEXED 0x1000    // Address multiplexing options
.................... #define PAR_PTBEEN_ENABLE         0x0400  // Byte Enable Port Enable bit
.................... #define PAR_PTWREN_ENABLE         0x0200  // Write Enable Strobe bit
.................... #define PAR_PTRDEN_ENABLE         0x0100  // Read/Write Strobe Port bit
.................... #define PAR_ALP_ACTIVE_HIGH       0x0020 // Address latch polarity high
.................... #define PAR_BEP_ACTIVE_HIGH       0x0004 // Byte Enable Polarity
.................... #define PAR_WRSP_ACTIVE_HIGH      0x0002 // Write strobe Polarity bit
.................... #define PAR_RDSP_ACTIVE_HIGH      0x0001 // Read strobe Polarity bit
.................... #define PAR_CS_XX                 0x0000   // Chip select pins used for address
.................... #define PAR_CS_X1                 0x0008   // Chip select pin 1 used, active high
.................... #define PAR_CS_X0                 0x0000   // Chip select pin 1 used, active low
.................... #define PAR_CS_1X                 0x0050   // Chip select pin 2 used, active high
.................... #define PAR_CS_0X                 0x0040   // Chip select pin 2 used, active low
.................... #define PAR_CS_00                 0x0080   // Chip select pins 1,2 used, active low
.................... #define PAR_CS_11                 0x0098   // Chip select pins 1,2 used, active high
.................... #define PAR_CS_10                 0x0090   // Chip select pins 1,2 used, 1 is active low, 2 is high
.................... #define PAR_CS_01                 0x0088   // Chip select pins 1,2 used, 1 is active high, 2 is low
.................... #define PAR_INTR_ON_RW                0x20000000  // Interrupt on read write
.................... #define PAR_NO_INTR_STALL_ACTIVATED   0x40000000  // No interrupt, processor stall activated
.................... #define PAR_INTR_ON_3_RW_BUF          0x60000000 // Interrupt on write to Buffer 3 or read from Buffer 3
.................... #define PAR_PSP_AUTO_INC              0x18000000 // Read write buffers auto increment
.................... #define PAR_DEC_ADDR                  0x10000000 // Increment the address
.................... #define PAR_INC_ADDR                  0x08000000 // Decrement the address
.................... #define PAR_MASTER_MODE_1             0x03000000  // Master mode 1
.................... #define PAR_MASTER_MODE_2             0x02000000  // Master mode 2
.................... #define PAR_WAITB1                    0x00000000 // 1 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB2                    0x00400000 // 2 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB3                    0x00800000 // 3 Tcy Wait state for data setup R/W
.................... #define PAR_WAITB4                    0x00C00000 // 4 Tcy Wait state for data setup R/W
.................... #define PAR_WAITM0                    0x00000000 // 0 wait state for Read to byte
.................... #define PAR_WAITM1                    0x00040000 // 1 Tcy wait state for Read to byte
.................... #define PAR_WAITM2                    0x00080000 // 2 Tcy wait state for Read to byte
.................... #define PAR_WAITM3                    0x000C0000 // 3 Tcy wait state for Read to byte
.................... #define PAR_WAITM15                   0x003C0000 // 15 wait states
.................... #define PAR_WAITE1                    0x00000000  // 1 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE2                    0x00010000 // 2 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE3                    0x00020000 // 3 Tcy Wait for data hold after strobe
.................... #define PAR_WAITE4                    0x00030000 // 4 Tcy Wait for data hold after strobe
.................... 
.................... ////////////////////////////////////////////////////////////////// CRC
.................... // CRC Functions: setup_crc(), crc_init(), crc_calc(), crc_calc8()
.................... // CRC Prototypes:
.................... _bif void setup_crc(unsigned int8 poly_terms, ...);
.................... _bif void crc_init(unsigned int16 value);
.................... _bif unsigned int16 crc_calc(unsigned int16 data);
.................... _bif unsigned int16 crc_calc(unsigned int16 *ptr, unsigned int16 count);
.................... _bif unsigned int8 crc_calc8(unsigned int8 data);
.................... _bif unsigned int8 crc_calc8(unsigned int8 *ptr, unsigned int16 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// RTC
.................... // RTC Functions: setup_rtc(), setup_rtc_alarm(), rtc_read(),
.................... //                rtc_write(), rtc_alarm_read(), rtc_alarm_write()
.................... // Structure used in read and write functions (pass pointer):
.................... typedef struct {
....................    unsigned int8 tm_year;
....................    unsigned int8 tm_temp;  // Not used by built in functions, place holder only do not use
....................    unsigned int8 tm_mday;
....................    unsigned int8 tm_mon;
....................    unsigned int8 tm_hour;
....................    unsigned int8 tm_wday;
....................    unsigned int8 tm_sec;
....................    unsigned int8 tm_min;
....................    unsigned int8 tm_isdst; // Not used by built in functions
.................... } rtc_time_t;
.................... // RTC Prototypes:
.................... _bif void setup_rtc(unsigned int16 mode, unsigned int8 calibration);
.................... _bif void setup_rtc_alarm(unsigned int16 mode, unsigned int16 mask, unsigned int8 repeat);
.................... _bif void rtc_read(rtc_time_t *time);
.................... _bif void rtc_write(rtc_time_t *time);
.................... _bif void rtc_alarm_read(rtc_time_t *time);
.................... _bif void rtc_alarm_write(rtc_time_t *time);
.................... // Constants used in setup_rtc() are:  // Second param is calibration
.................... #define RTC_ENABLE           0x8000
.................... #define RTC_DISABLE          0
.................... #define RTC_OUTPUT_SECONDS   0x20400
.................... #define RTC_OUTPUT_ALARM     0x00400
.................... //
.................... // Constants used in setup_rtc_alarm() first param are:
.................... #define RTC_ALARM_ENABLE     0x8000
.................... #define RTC_ALARM_DISABLE    0
.................... #define RTC_CHIME_ENABLE     0x4000
.................... #define RTC_CHIME_DISABLE    0
.................... // Constants used in setup_rtc_alarm() second param are:  // Third param is repeat#
.................... #define RTC_ALARM_HALFSECOND 0x0000
.................... #define RTC_ALARM_SECOND     0x0400
.................... #define RTC_ALARM_10_SECONDS 0x0800
.................... #define RTC_ALARM_MINUTE     0x0C00
.................... #define RTC_ALARM_10_MINUTES 0x1000
.................... #define RTC_ALARM_HOUR       0x1400
.................... #define RTC_ALARM_DAY        0x1800
.................... #define RTC_ALARM_WEEK       0x1C00
.................... #define RTC_ALARM_MONTH      0x2000
.................... #define RTC_ALARM_YEAR       0x2400
.................... 
.................... ////////////////////////////////////////////////////////////////// QEI
.................... // QEI Functions: setup_qei(), qei_set_count(), qei_get_count(),
.................... //                qei_status()
.................... // QEI Prototypes:
.................... _bif void setup_qei(unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void setup_qei(unsigned int8 unit, unsigned int16 mode, unsigned int16 filter, unsigned int16 maxcount);
.................... _bif void qei_set_count(unsigned int16 count);
.................... _bif void qei_set_count(unsigned int8 unit, unsigned int16 count);
.................... _bif unsigned int16 qei_get_count(void);
.................... _bif unsigned int16 qei_get_count(unsigned int8 unit);
.................... _bif unsigned int16 qei_status(void);
.................... _bif unsigned int16 qei_status(unsigned int8 unit);
.................... // Constants used in setup_qei() first param are:
.................... #define QEI_DISABLED        0
.................... #define QEI_MODE_X2         0x0400
.................... #define QEI_MODE_X4         0x0600
.................... #define QEI_MODE_TIMER      0x0100
.................... #define QEI_STOP_WHEN_IDLE  0x2000
.................... #define QEI_SWAP_AB         0x0080
.................... #define QEI_OUTPUT_ENABLE   0x0040
.................... #define QEI_RESET_WHEN_MAXCOUNT  0x0100
.................... #define QEI_RESET_WHEN_IDX_PULSE 0x0004
.................... #define QEI_TIMER_GATED      0x0020
.................... #define QEI_TIMER_INTERNAL   0x0000
.................... #define QEI_TIMER_EXTERNAL   0x0002
.................... #define QEI_TIMER_DIV_BY_1   0x0000
.................... #define QEI_TIMER_DIV_BY_8   0x0008
.................... #define QEI_TIMER_DIV_BY_64  0x0010
.................... #define QEI_TIMER_DIV_BY_256 0x0018
.................... // Constants used in setup_qei() second param are:   // Third param is MAXCOUNT
.................... #define QEI_FILTER_DIV_1     0x0000
.................... #define QEI_FILTER_DIV_2     0x0010
.................... #define QEI_FILTER_DIV_4     0x0020
.................... #define QEI_FILTER_DIV_16    0x0030
.................... #define QEI_FILTER_DIV_32    0x0040
.................... #define QEI_FILTER_DIV_64    0x0050
.................... #define QEI_FILTER_DIV_128   0x0060
.................... #define QEI_FILTER_DIV_256   0x0070
.................... #define QEI_FILTER_OUTPUT    0x0080
.................... #define QEI_NO_ERROR_INTS    0x0100
.................... #define QEI_IDX_WHEN_A0      0x0000  // for 2X mode
.................... #define QEI_IDX_WHEN_A1      0x0200  // for 2X mode
.................... #define QEI_IDX_WHEN_B0      0x0400  // for 2X mode
.................... #define QEI_IDX_WHEN_B1      0x0600  // for 2X mode
.................... #define QEI_IDX_WHEN_A0_B0   0x0000  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B0   0x0200  // for 4X mode
.................... #define QEI_IDX_WHEN_A0_B1   0x0400  // for 4X mode
.................... #define QEI_IDX_WHEN_A1_B1   0x0600  // for 4X mode
.................... // Constants returned from qei_status() are:
.................... #define QEI_POS_ERROR        0x8000
.................... #define QEI_FORWARD          0x0800
.................... #define QEI_INDEX_PIN        0x1000
.................... 
.................... ////////////////////////////////////////////////////////////////// MOTOR PWM
.................... // MPWM Functions: setup_motor_pwm(), set_motor_unit(),
.................... //                 set_motor_pwm_duty(), set_motor_pwm_event(),
.................... //                 get_motor_pwm_count()
.................... // MPWM Prototypes:
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int32 timebase);
.................... _bif void setup_motor_pwm(unsigned int8 pwm, unsigned int32 mode, unsigned int8 prescale, unsigned int8 postscale, unsigned int16 period);
.................... _bif void set_motor_unit(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 mode, unsigned int8 active_deadtime, unsigned int8 inactive_deadtime);
.................... _bif void set_motor_pwm_duty(unsigned int8 pwm, unsigned int8 pin_pair, unsigned int16 duty);
.................... _bif void set_motor_pmw_event(unsigned int8, signed int16 time);
.................... _bif unsigned int16 get_motor_pwm_count(unsigned int8 pwm);
.................... // Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):
.................... #define MPWM_DISABLED          0
.................... #define MPWM_FREE_RUN          0x8000
.................... #define MPWM_SINGLE_PULSE      0x8001
.................... #define MPWM_UP_DOWN           0x8002
.................... #define MPWM_UP_DOWN_WITH_INTS 0x8003
.................... // OR in any of the following:
.................... #define MPWM_HALT_WHEN_IDLE            0x2000
.................... #define MPWM_DUTY_UPDATES_IMMEADIATE  0x40000
.................... #define MPWM_SYNC_OVERRIDES           0x20000
.................... #define MPWM_DISABLE_UPDATES          0x10000
.................... #define MPWM_LATCH_FAULTS            0x100000
.................... 
.................... // Constants used in set_motor_unit() third param are:  (first param is unit number 1,2... and second param is pwm pin pair 1,2,3 or 4)
.................... #define MPWM_INDEPENDENT     0x0001
.................... #define MPWM_ENABLE          0x0006  // both H and L
.................... #define MPWM_ENABLE_H        0x0004
.................... #define MPWM_ENABLE_L        0x0002
.................... 
.................... #define MPWM_FORCE_L_0       0x0010
.................... #define MPWM_FORCE_L_1       0x0050
.................... #define MPWM_FORCE_H_0       0x0020
.................... #define MPWM_FORCE_H_1       0x00A0
.................... 
.................... #define MPWM_FAULTA_LA_HA     0x0700
.................... #define MPWM_FAULTA_LA_HI     0x0500
.................... #define MPWM_FAULTA_LI_HA     0x0600
.................... #define MPWM_FAULTA_LI_HI     0x0400
.................... #define MPWM_FAULTB_LA_HA     0x7000
.................... #define MPWM_FAULTB_LA_HI     0x5000
.................... #define MPWM_FAULTB_LI_HA     0x6000
.................... #define MPWM_FAULTB_LI_HI     0x4000
.................... #define MPWM_FAULT_NO_CHANGE 0x0000
.................... 
.................... ////////////////////////////////////////////////////////////////// DCI
.................... // DCI Functions: setup_dci(), dci_start(), dci_read(), dci_write(),
.................... //                dci_data_received(), dci_transmit_ready()
.................... // DCI Prototypes:
.................... _bif void setup_dci(unsigned int16 mode, unsigned int16 size, unsigned int16 receive_slot, unsigned int16 transmit_slot, unsigned int16 sample_rate);
.................... _bif void dci_start(void);
.................... _bif signed int16 dci_read(void);
.................... _bif void dci_write(signed int16);
.................... _bif int1 dci_data_received(void);
.................... _bif int1 dci_transmit_ready(void);
.................... // Constants used in setup_dci() first param are:
.................... #define MULTICHANNEL_MODE  0x0000
.................... #define I2S_MODE           0x0001
.................... #define AC97_16BIT_MODE    0x0002
.................... #define AC97_20BIT_MODE    0x0003
.................... 
.................... #define JUSTIFY_DATA       0x0020 //Start data transmission on the same clock cycle as COFS pulses (multichannel)
.................... #define MULTI_DEVICE_BUS   0x0040 //Tri-states the CSDO pin during unused time slots, normally drives '0'
.................... 
.................... #define UNDERFLOW_LAST     0x0080 //Transmits the last written value to the dci when data underflow occurs. Default is undeflow silence.
.................... #define UNDERFLOW_SILENCE  0x0000 //Transmit '0's on data undeflow. This will cause a clicking noise if you are underflowing data while outputing to a codec.
.................... 
.................... #define DCI_SLAVE          0x0100 //Default is master
.................... #define DCI_MASTER         0x0000
.................... 
.................... #define SAMPLE_FALLING_EDGE 0x0000 //Default is Sample on the rising edge of the clock
.................... #define SAMPLE_RISING_EDGE 0x0200
.................... 
.................... #define DCI_CLOCK_INPUT    0x0400 //SCLK is an input (supplied by codec or external source)
.................... #define DCI_CLOCK_OUTPUT   0x0000 //Default is clock output
.................... 
.................... #define ENABLE_LOOPBACK    0x0800 //Connect the CSDI/CSDO internally; loops all of the sound back onto the bus
.................... 
.................... #define CODEC_MULTICHANNEL  0x0000  //enables multichannel (generic) codec support
.................... #define CODEC_I2S           0x0001  //enables the I2S protocol
.................... #define CODEC_AC16          0x0002  //enables the AC-16 protocol, setupCodecTransmission has no effect
.................... #define CODEC_AC20          0x0003  //enables the AC-20 protocol, setupCodecTransmission has no effect
.................... 
.................... #define BUS_MASTER          0x0000  //designates this device as the bus master
.................... #define BUS_SLAVE           0x0300  //designates this device as a slave on a bus controlled by another codec
.................... 
.................... #define TRISTATE_BUS        0x0040        //when in master mode, the module will be in high impedance
....................                                     //during disabled frames (default drives 0's onto bus)
.................... #define SYNC_COFS_DATA_PULSE 0x0020 //signifies that data starts transmitting on the same SCK pulse as the edge of the COFS pulse
....................                                     //(default data starts on the clock after the rising edge of COFS
.................... /* Determines when a sample is taken */
.................... #define SAMPLE_RISING        0x0200 //sample data on the rising edge of the clock
.................... #define SAMPLE_FALLING       0x0000 //sample data on the falling edge of the clock
.................... 
.................... // Constants used in setup_dci() second param are:
.................... #define DCI_4BIT_WORD      0x0003
.................... #define DCI_5BIT_WORD      0x0004
.................... #define DCI_6BIT_WORD      0x0005
.................... #define DCI_7BIT_WORD      0x0006
.................... #define DCI_8BIT_WORD      0x0007
.................... #define DCI_9BIT_WORD      0x0008
.................... #define DCI_10BIT_WORD     0x0009
.................... #define DCI_11BIT_WORD     0x000A
.................... #define DCI_12BIT_WORD     0x000B
.................... #define DCI_13BIT_WORD     0x000C
.................... #define DCI_14BIT_WORD     0x000D
.................... #define DCI_15BIT_WORD     0x000E
.................... #define DCI_16BIT_WORD     0x000F
.................... 
.................... #define DCI_1WORD_FRAME    0x0000
.................... #define DCI_2WORD_FRAME    0x0010 << 1
.................... #define DCI_3WORD_FRAME    0x0020 << 1
.................... #define DCI_4WORD_FRAME    0x0030 << 1
.................... #define DCI_5WORD_FRAME    0x0040 << 1
.................... #define DCI_6WORD_FRAME    0x0050 << 1
.................... #define DCI_7WORD_FRAME    0x0060 << 1
.................... #define DCI_8WORD_FRAME    0x0070 << 1
.................... #define DCI_9WORD_FRAME    0x0080 << 1
.................... #define DCI_10WORD_FRAME   0x0090 << 1
.................... #define DCI_11WORD_FRAME   0x00A0 << 1
.................... #define DCI_12WORD_FRAME   0x00B0 << 1
.................... #define DCI_13WORD_FRAME   0x00C0 << 1
.................... #define DCI_14WORD_FRAME   0x00D0 << 1
.................... #define DCI_15WORD_FRAME   0x00E0 << 1
.................... #define DCI_16WORD_FRAME   0x00F0 << 1
.................... 
.................... #define DCI_1WORD_INTERRUPT 0x0000
.................... #define DCI_2WORD_INTERRUPT 0x0400
.................... #define DCI_3WORD_INTERRUPT 0x0800
.................... #define DCI_4WORD_INTERRUPT 0x0C00
.................... 
.................... // Constants used in setup_dci() third param are:
.................... #define RECEIVE_NONE    0x0000
.................... #define RECEIVE_ALL     0xFFFF
.................... #define RECEIVE_SLOT0   0x0001
.................... #define RECEIVE_SLOT1   0x0002
.................... #define RECEIVE_SLOT2   0x0004
.................... #define RECEIVE_SLOT3   0x0008
.................... #define RECEIVE_SLOT4   0x0010
.................... #define RECEIVE_SLOT5   0x0020
.................... #define RECEIVE_SLOT6   0x0040
.................... #define RECEIVE_SLOT7   0x0080
.................... #define RECEIVE_SLOT8   0x0100
.................... #define RECEIVE_SLOT9   0x0200
.................... #define RECEIVE_SLOT10  0x0400
.................... #define RECEIVE_SLOT11  0x0800
.................... #define RECEIVE_SLOT12  0x1000
.................... #define RECEIVE_SLOT13  0x2000
.................... #define RECEIVE_SLOT14  0x4000
.................... #define RECEIVE_SLOT15  0x8000
.................... 
.................... // Constants used in setup_dci() forth param are:
.................... #define TRANSMIT_NONE   0x0000
.................... #define TRANSMIT_ALL    0xFFFF
.................... #define TRANSMIT_SLOT0  0x0001
.................... #define TRANSMIT_SLOT1  0x0002
.................... #define TRANSMIT_SLOT2  0x0004
.................... #define TRANSMIT_SLOT3  0x0008
.................... #define TRANSMIT_SLOT4  0x0010
.................... #define TRANSMIT_SLOT5  0x0020
.................... #define TRANSMIT_SLOT6  0x0040
.................... #define TRANSMIT_SLOT7  0x0080
.................... #define TRANSMIT_SLOT8  0x0100
.................... #define TRANSMIT_SLOT9  0x0200
.................... #define TRANSMIT_SLOT10 0x0400
.................... #define TRANSMIT_SLOT11 0x0800
.................... #define TRANSMIT_SLOT12 0x1000
.................... #define TRANSMIT_SLOT13 0x2000
.................... #define TRANSMIT_SLOT14 0x4000
.................... #define TRANSMIT_SLOT15 0x8000
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////// DMA
.................... // DMA Functions: setup_dma(), dma_start(), dma_status()
.................... // DMA Prototypes:
.................... _bif void setup_dma(unsigned int8 channel, unsigned int32 pheripheral, unsigned int8 mode);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 count);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb);
.................... _bif void dma_start(unsigned int8 channel, unsigned int16 mode, unsigned int16 addressa, unsigned int16 addressb, unsigned int16 count);
.................... _bif unsigned int8 dma_status(unsigned int8 channel);
.................... // Constants used in setup_dma() second param are:
.................... #define DMA_IN_SPI1      (0x0A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_OUT_SPI1     (0x8A0000|getenv("sfr:SPI1BUF"))
.................... #define DMA_IN_SPI2      (0x210000|getenv("sfr:SPI2BUF"))
.................... #define DMA_OUT_SPI2     (0xA10000|getenv("sfr:SPI2BUF"))
.................... #define DMA_IN_UART1     (0x0B0000|getenv("sfr:U1RXREG"))
.................... #define DMA_OUT_UART1    (0x8C0000|getenv("sfr:U1TXREG"))
.................... #define DMA_IN_UART2     (0x1E0000|getenv("sfr:U2RXREG"))
.................... #define DMA_OUT_UART2    (0x9F0000|getenv("sfr:U2TXREG"))
.................... #define DMA_IN_ADC1      (0x0D0000|getenv("sfr:ADC1BUF0"))
.................... ////////////////////////////////////////////////////////////////// DAC
.................... // Digital to Analog Functions: SETUP_DAC(), DAC_WRITE()
.................... // DAC Prototypes:
.................... _bif void setup_dac(unsigned int32 mode);
.................... _bif void setup_dac(unsigned int32 mode, unsigned int8 divisor);
.................... _bif void dac_write(unsigned int8 channel, unsigned value);
.................... // Constants used in SETUP_DAC() are:
.................... #define DAC_OFF  0
.................... #define DAC_RIGHT_ON   0x00808000
.................... #define DAC_LEFT_ON    0x80008000
.................... #define DAC_RIGHT_MIDPOINT 0x00A08000
.................... #define DAC_LEFT_MIDPOINT  0xA0008000
.................... #define DAC_SIGNED   0x100
.................... #define DAC_SLEEP_ON 0x1000
.................... #define DAC_IDLE_OFF 0x2000
.................... // Constants used as the first param in DAC_WRITE() are:
.................... #define DAC_DEFAULT  0
.................... #define DAC_RIGHT    1
.................... #define DAC_LEFT     2
.................... 
.................... #define DMA_IN_ECAN1     (0x220000|getenv("sfr:C1RXD"))
.................... #define DMA_OUT_ECAN1    (0xC60000|getenv("sfr:C1TXD"))
.................... #define DMA_INT0         0x000000 // or in direction and perif address
.................... #define DMA_IC1          0x010000 // or in direction and perif address
.................... #define DMA_IN_IC1       (0x010000|getenv("sfr:IC1BUF"))
.................... #define DMA_IC2          0x050000 // or in direction and perif address
.................... #define DMA_IN_IC2       (0x050000|getenv("sfr:IC2BUF"))
.................... #define DMA_OC1          0x020000 // or in direction and perif address
.................... #define DMA_OC2          0x060000 // or in direction and perif address
.................... #define DMA_TIMER2       0x070000 // or in direction and perif address
.................... #define DMA_TIMER3       0x080000 // or in direction and perif address
.................... #define DMA_OUT_DCI      (0xBC0000|getenv("sfr:TXBUF0"))
.................... #define DMA_IN_DCI       (0x3C0000|getenv("sfr:RXBUF0"))
.................... #define DMA_OUT_DACR     (0xCE0000|getenv("sfr:DAC1RDAT"))
.................... #define DMA_OUT_DACL     (0xCF0000|getenv("sfr:DAC1LDAT"))
.................... #define DMA_IN          0x00
.................... #define DMA_OUT         0x800000
.................... // Constants used in setup_dma() third param are:
.................... #define DMA_BYTE        0x40
.................... #define DMA_WORD        0x00  // default
.................... #define DMA_HALF_INT    0x10  // interrupt when half full
.................... #define DMA_WRITE_NULL  0x08
.................... // Constants used in dma_start() second param are:
.................... #define DMA_CONTINOUS   0x00
.................... #define DMA_ONE_SHOT    0x01
.................... #define DMA_PING_PONG   0x02
.................... #define DMA_NO_INC      0x10
.................... #define DMA_PERIF_ADDR  0x20 // Device supplies address
.................... #define DMA_FORCE_NOW  0x100
.................... // Constants returned from dma_status() are:
.................... #define DMA_IN_ERROR    0x01
.................... #define DMA_OUT_ERROR   0x02
.................... #define DMA_B_SELECT    0x04
.................... 
.................... ////////////////////////////////////////////////////////////////// BIF
.................... // Built In Functions Prototypes
.................... //
.................... // Math Prototypes:
.................... _bif signed int8 abs(signed int8 x);
.................... _bif signed int16 abs(signed int16 x);
.................... _bif signed int32 abs(signed int32 x);
.................... _bif float32 abs(float32 x);
.................... _bif unsigned int16 _mul(unsigned int8, unsigned int8);
.................... _bif signed int16 _mul(signed int8, signed int8);
.................... _bif unsigned int32 _mul(unsigned int16, unsigned int16);
.................... _bif signed int32 _mul(signed int16, signed int16);
.................... _bif signed int48 abs(signed int48 x);
.................... _bif signed int64 abs(signed int64 x);
.................... _bif float48 abs(float48 x);
.................... _bif float64 abs(float64 x);
.................... _bif unsigned int64 _mul(unsigned int32, unsigned int32);
.................... _bif signed int64 _mul(signed int32, signed int32);
.................... _bif unsigned int64 _mul(unsigned int48, unsigned int48);
.................... _bif signed int64 _mul(signed int48, signed int48);
.................... 
.................... // Memory Manipulation Prototypes:
.................... _bif void strcpy(char* dest, char* src);
.................... _bif void memset(unsigned int8* destination, unsigned int8 value, unsigned int16 num);
.................... _bif void memcpy(unsigned int8* destination, unsigned int8* source, unsigned int16 num);
.................... 
.................... // Data Manipulators Prototypes:
.................... _bif int1 shift_left(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif int1 shift_right(unsigned int8* address, unsigned int8 bytes, int1 value);
.................... _bif void rotate_left(unsigned int8* address, unsigned int8 bytes);
.................... _bif void rotate_right(unsigned int8* address, unsigned int8 bytes);
.................... _bif void swap(unsigned int8 value);
.................... _bif unsigned int8 make8(unsigned int16 var, unsigned int8 offset);
.................... _bif unsigned int8 make8(unsigned int32 var, unsigned int8 offset);
.................... _bif unsigned int16 make16(unsigned int8 varhigh, unsigned int8 varlow);
.................... _bif unsigned int32 make32(unsigned int16 var1);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int16 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int8 var3, unsigned int8 var4);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int16 var2, unsigned int8 var3);
.................... _bif unsigned int32 make32(unsigned int8 var1, unsigned int8 var2, unsigned int16 var3);
.................... _bif void bit_set(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int8 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int16 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int32 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int8 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int16 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int32 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_set(unsigned int64 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int48 var, unsigned int8 bit);
.................... _bif void bit_clear(unsigned int64 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int48 var, unsigned int8 bit);
.................... _bif int1 bit_test(unsigned int64 var, unsigned int8 bit);
.................... _bif unsigned int8 bit_first(int1 value, unsigned int16 var);
.................... _bif unsigned int8 bit_last(int16 var);
.................... _bif unsigned int8 bit_last(int1 value, int16 var);
.................... 
.................... // #use delay() Prototypes:
.................... _bif void delay_cycles(unsigned int16 count);
.................... _bif void delay_ms(unsigned int16 time);
.................... _bif void delay_us(unsigned int16 time);
.................... 
.................... // #use rs232() Prototypes:
.................... _bif void putchar(char cdata);
.................... _bif void putchar(char cdata, unsigned int8 stream);
.................... _bif void puts(char* string);
.................... _bif void puts(char* string, unsigned int8 stream);
.................... _bif char getch(void);
.................... _bif char getch(unsigned int8 stream);
.................... _bif void gets(char* string);
.................... _bif void gets(char* string, unsigned int8 stream);
.................... _bif int1 kbhit(void);
.................... _bif int1 kbhit(unsigned int8 stream);
.................... _bif void printf(char* string, ...);
.................... _bif void fprintf(unsigned int8 stream, char* string, ...);
.................... _bif void putc_send(void);
.................... _bif void fputc_send(unsigned int8 stream);
.................... _bif int1 rcv_buffer_full(void);
.................... _bif int1 rcv_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 rcv_buffer_bytes(void);
.................... _bif unsigned int16 rcv_buffer_bytes(unsigned int8 stream);
.................... _bif int1 tx_buffer_full(void);
.................... _bif int1 tx_buffer_full(unsigned int8 stream);
.................... _bif unsigned int16 tx_buffer_bytes(void);
.................... _bif unsigned int16 tx_buffer_bytes(unsigned int8 stream);
.................... 
.................... // #use i2c() Prototypes:
.................... _bif unsigned int8 i2c_read(void);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream);
.................... _bif unsigned int8 i2c_read(unsigned int8 stream, int1 ack);
.................... _bif int1 i2c_write(unsigned int8 data);
.................... _bif int1 i2c_write(unsigned int8 stream, unsigned int8 data);
.................... _bif void i2c_start(void);
.................... _bif void i2c_start(unsigned int8 stream);
.................... _bif void i2c_start(unsigned int8 stream, unsigned int8 restart);
.................... _bif void i2c_stop(void);
.................... _bif void i2c_stop(unsigned int8 stream);
.................... _bif int8 i2c_isr_state(void);
.................... _bif void i2c_slaveaddr(unsigned int8 addr);
.................... _bif void i2c_slaveaddr(unsigned int8 stream, unsigned int8 addr);
.................... _bif int1 i2c_poll(void);
.................... _bif int1 i2c_poll(unsigned int8 stream);
.................... _bif void i2c_init(unsigned int32 baud);
.................... _bif void i2c_init(unsigned int8 stream, unsigned int32 baud);
.................... 
.................... // #use spi() Prototypes:
.................... _bif unsigned int8 spi_xfer(void);
.................... _bif unsigned int16 spi_xfer(void);
.................... _bif unsigned int32 spi_xfer(void);
.................... _bif unsigned int8 spi_xfer(unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer(unsigned int8 stream, unsigned int8 data, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer(unsigned int8 stream, unsigned int16 data, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer(unsigned int8 stream, unsigned int32 data, unsigned int8 bits);
.................... _bif void spi_init(unsigned int32 baud);
.................... _bif void spi_init(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud);
.................... _bif void spi_speed(unsigned int8 stream, unsigned int32 baud, unsigned int32 clock);
.................... _bif void spi_prewrite(unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int32 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int8 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int16 data);
.................... _bif void spi_prewrite(unsigned int8, unsigned int32 data);
.................... _bif unsigned int8 spi_xfer_in(void);
.................... _bif unsigned int16 spi_xfer_in(void);
.................... _bif unsigned int32 spi_xfer_in(void);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 bits);
.................... _bif unsigned int8 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int16 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... _bif unsigned int32 spi_xfer_in(unsigned int8 stream, unsigned int8 bits);
.................... 
.................... // #use rtos() Prototypes:
.................... _bif void rtos_run(void);
.................... _bif void rtos_yield(void);
.................... _bif void rtos_enable(unsigned int8 task);
.................... _bif void rtos_disable(unsigned int8 task);
.................... _bif void rtos_terminate(void);
.................... _bif void rtos_await(int1 flag);
.................... _bif void rtos_wait(unsigned int8 sem);
.................... _bif void rtos_signal(unsigned int8 sem);
.................... _bif void rtos_msg_send(unsigned int8 task, unsigned int8 msg);
.................... _bif unsigned int8 rtos_msg_read(void);
.................... _bif unsigned int8 rtos_msg_poll(void);
.................... _bif int1 rtos_overrun(unsigned int8 task);
.................... _bif void rtos_stats(unsigned int8 task, unsigned int8* stat);
.................... 
.................... // #use timer() Prototypes:
.................... _bif unsigned int8 get_ticks(void);
.................... _bif unsigned int16 get_ticks(void);
.................... _bif unsigned int32 get_ticks(void);
.................... _bif unsigned int64 get_ticks(void);
.................... _bif unsigned int8 get_ticks(unsigned int8 stream);
.................... _bif unsigned int16 get_ticks(unsigned int8 stream);
.................... _bif unsigned int32 get_ticks(unsigned int8 stream);
.................... _bif unsigned int64 get_ticks(unsigned int8 stream);
.................... _bif void set_ticks(unsigned int8 value);
.................... _bif void set_ticks(unsigned int16 value);
.................... _bif void set_ticks(unsigned int32 value);
.................... _bif void set_ticks(unsigned int64 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int8 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int16 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int32 value);
.................... _bif void set_ticks(unsigned int8 stream, unsigned int64 value);
.................... 
.................... // #use pwm() Prototypes:
.................... _bif void pwm_on(void);
.................... _bif void pwm_on(unsigned int8 stream);
.................... _bif void pwm_off(void);
.................... _bif void pwm_off(unsigned int8 stream);
.................... _bif void pwm_set_duty(unsigned int16 duty);
.................... _bif void pwm_set_duty(unsigned int8 stream, unsigned int16 duty);
.................... _bif void pwm_set_duty_percent(unsigned int16 percent);
.................... _bif void pwm_set_duty_percent(unsigned int8 stream, unsigned int16 percent);
.................... _bif void pwm_set_frequency(unsigned int32 frequency);
.................... _bif void pwm_set_frequency(unsigned int8 stream, unsigned int32 frequency);
.................... 
.................... // #use capture() Prototypes:
.................... _bif unsigned int16 get_capture_time(void);
.................... _bif unsigned int16 get_capture_time(unsigned int8 stream);
.................... _bif int1 get_capture_event(void);
.................... _bif int1 get_capture_event(unsigned int8 stream);
.................... 
.................... // Environment Prototypes:
.................... //_bif unsigned int8 getenv(char* cstring);
.................... 
.................... // Address Prototypes:
.................... #ifndef __ADDRESS__
.................... #define __ADDRESS__ unsigned int32
.................... #endif
.................... _bif void goto_address(__ADDRESS__ address);
.................... _bif __ADDRESS__ label_address(__ADDRESS__ label);
.................... 
.................... // Program Memory Prototypes:
.................... _bif void read_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void erase_program_memory(__ADDRESS__ address);
.................... _bif void write_program_memory(__ADDRESS__ address, unsigned int8* dataptr, unsigned int16 count);
.................... _bif void read_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... _bif void write_configuration_memory(unsigned int8* dataptr, unsigned int8 count);
.................... 
.................... ////////////////////////////////////////////////////////////////// INT
.................... // Interrupt Functions: ENABLE_INTERRUPTS(), DISABLE_INTERRUPTS(),
.................... //                      CLEAR_INTERRUPT(), INTERRUPT_ACTIVE(),
.................... //                      EXT_INT_EDGE()
.................... // INT Prototypes:
.................... _bif void enable_interrupts(unsigned int16 interrupt);
.................... _bif void disable_interrupts(unsigned int16 interrupt);
.................... _bif void clear_interrupt(unsigned int16 interrupt);
.................... _bif int1 interrupt_active(unsigned int16 interrupt);
.................... _bif int1 interrupt_enabled(unsigned int16 interrupt);
.................... _bif void ext_int_edge(unsigned int8 source, unsigned int8 edge);
.................... _bif void jump_to_isr(unsigned int16 address);
.................... // Constants used in EXT_INT_EDGE() are:
.................... #define L_TO_H              0x40
.................... #define H_TO_L                 0
.................... //
.................... // Constants used in other interrupt functions are:
.................... #define INTR_GLOBAL               0x400
.................... #define GLOBAL                    0x400  // For compatibility with PIC16/18
.................... #define INTR_NORMAL               0x100
.................... #define INTR_ALTERNATE            0x200
.................... #define INTR_LEVEL0               0x500
.................... #define INTR_LEVEL1               0x501
.................... #define INTR_LEVEL2               0x502
.................... #define INTR_LEVEL3               0x503
.................... #define INTR_LEVEL4               0x504
.................... #define INTR_LEVEL5               0x505
.................... #define INTR_LEVEL6               0x506
.................... #define INTR_LEVEL7               0x507
.................... 
.................... #define INTR_CN_PIN              0x8000  // or in a PIN_xx constant
.................... 
.................... #define INT_OSCFAIL               1
.................... #define INT_ADDRERR               2
.................... #define INT_STACKERR              3
.................... #define INT_MATHERR               4
.................... #define INT_DMAERR                5
.................... #define INT_EXT0                  6
.................... #define INT_IC1                   7
.................... #define INT_OC1                   8
.................... #define INT_TIMER1                9
.................... #define INT_DMA0                  69
.................... #define INT_IC2                   70
.................... #define INT_OC2                   71
.................... #define INT_TIMER2                72
.................... #define INT_TIMER3                73
.................... #define INT_SPI1E                 74
.................... #define INT_SPI1                  75
.................... #define INT_RDA                   76
.................... #define INT_TBE                   77
.................... #define INT_ADC1                  78
.................... #define INT_DMA1                  79
.................... #define INT_SI2C                  81
.................... #define INT_MI2C                  82
.................... #define INT_CNI                   84
.................... #define INT_EXT1                  85
.................... #define INT_IC7                   87
.................... #define INT_IC8                   88
.................... #define INT_DMA2                  89
.................... #define INT_OC3                   90
.................... #define INT_OC4                   91
.................... #define INT_TIMER4                92
.................... #define INT_TIMER5                93
.................... #define INT_EXT2                  94
.................... #define INT_RDA2                  95
.................... #define INT_TBE2                  96
.................... #define INT_SPI2E                 97
.................... #define INT_SPI2                  98
.................... #define INT_C1RX                  99
.................... #define INT_CAN1                  100
.................... #define INT_DMA3                  101
.................... #define INT_PWM1                  110
.................... #define INT_DMA4                  111
.................... #define INT_QEI                   123
.................... #define INT_DMA5                  126
.................... #define INT_PWM2                  127
.................... #define INT_FAULTA                128
.................... #define INT_UART1E                130
.................... #define INT_UART2E                131
.................... #define INT_QEI2                  132
.................... #define INT_DMA6                  133
.................... #define INT_DMA7                  134
.................... #define INT_C1TX                  135
.................... #define INT_FAULTA2               139
.................... #define INT_COMP                  152
.................... #define INT_PMP                   164
.................... #define INT_RTC                   173
.................... #define INT_CRC                   174
.................... #define INT_DAC1R                 177
.................... #define INT_DAC1L                 178
.................... 
.................... #list
.................... 
.................... #endif
.................... 
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... #include "algoritmo.h"
.................... /**
....................  @file    ALGORITMO.h
....................  @author  Ricardo Gomez, Klaudija Ziliute
....................  @brief   PanTompkins header file
.................... */
.................... 
.................... 
.................... #ifndef __ALGORITMO_H
.................... #define __ALGORITMO_H
.................... 
.................... #include "common.h"
.................... #ifndef COMMON_h
.................... #define COMMON_h
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #include "33FJ128MC804.h"
.................... #include "adc.h"
.................... #include "lcd.h"
.................... #include "Header.h"
.................... #include "algoritmo.h"
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #include "adc.h"
.................... /**
....................  @file    adc.h
....................  @author  Ricardo Gomez
....................  @brief   adc init and ISR
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __ADC_H
.................... #define __ADC_H
.................... 
.................... #include "common.h"
.................... 
.................... #WORD ADC1BUF0 = 0x0300;
.................... #WORD ADC1CON1 = 0x0320;
.................... #WORD ADC1CON2 = 0x0322;
.................... #WORD ADC1CON3 = 0x0324;
.................... #WORD AD1CHS0 = 0x0328;
.................... #WORD AD1PCFGL = 0x032C;
.................... #WORD IFS0 = 0x0084;
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void adcinit(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ADC_H
.................... 
.................... #include "BEEP.h"
.................... /**
....................  @file    BEEP.h
....................  @author  Julio Gomis-Tena
....................  @brief   Generate n "beeps" of variable frequency
.................... */
.................... // Do not write above this line (except comments)!
.................... 
.................... #ifndef __BEEP_H
.................... #define __BEEP_H
.................... #include "Header.h"
.................... #ifndef HEADER_h
.................... #define HEADER_h
.................... //-------------------------------------------------------------------
.................... 
.................... #include "33FJ128MC804.h"
.................... 
.................... #fuses NOJTAG      // JTAG port is disabled
.................... #fuses NOPROTECT   // Code protection is disabled
.................... #fuses NOWRT       // Writes to program memory are allowed
.................... #fuses ICSP1       // Emulator functions are shared with PGEC1/PGED1
.................... #fuses NOWDT       // WDT is disabled; SWDTEN bit is disabled
.................... #fuses WPOSTS16    // Watchdog Timer Postscaler Select bits-> 1:32,768 (NOT USED)
.................... #fuses NOIESO      // Internal External Switchover bit: IESO mode (Two-Speed Start-up) is disabled
.................... #fuses FRC_PS      // Initial Oscillator Select bits: Fast RC Oscillator with Postscaler (FRCDIV)
.................... #fuses CKSNOFSM    // Clock switching is enabled, Fail-Safe Clock Monitor is disabled
.................... #fuses OSCIO       // OSCO Pin Configuration bit: OSCO/CLKO/RC15 functions as port I/O (RC15)
.................... #fuses NOPR        // Primary Oscillator Configuration bits: Primary Oscillator mode is disabled
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #use delay(clock=7370000)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ON(pin)   output_high(pin)
.................... #define OFF(pin)   output_low( pin)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //#define SDA1         PIN_B9  //                    ( 1)
.................... #define BUZZER         PIN_C6  //                    ( 2)
.................... #define LED1           PIN_C7  //                    ( 3)
.................... #define LED2           PIN_C8  //                    ( 4)
.................... #define LED3           PIN_C9  //                    ( 5)
.................... //                     VSS     //                    ( 6)
.................... //                     VCAP    //                    ( 7)
.................... #define H3             PIN_B10 //                    ( 8)
.................... #define L3             PIN_B11 //                    ( 9)
.................... #define H2             PIN_B12 //                    (10)
.................... #define L2             PIN_B13 //                    (11)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define _I             PIN_A10 //                    (12)
.................... #define BTOK           PIN_A7  //                    (13)
.................... #define H1             PIN_B14 //                    (14)
.................... #define L1             PIN_B15 //                    (15)
.................... //                     AVSS    //                    (16)
.................... //                     AVDD    //                    (17)
.................... //                     ~MCLR   //                    (18)
.................... #define BTIN           PIN_A0  //                    (19)
.................... #define POT  		       PIN_A1  //                    (20)
.................... //                     PIN_B0  //                    (21)
.................... //                     PIN_B1  //                    (22)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #define ANL4           PIN_B2  //                    (23)
.................... #define ANL3           PIN_B3  //                    (24)
.................... #define ANL2           PIN_C0  //                    (25)
.................... #define SD             PIN_C1  //                    (26)
.................... #define ANL1           PIN_C2  //                    (27)
.................... //                     VDD     //                    (28)
.................... //                     VSS     //                    (29)
.................... //                     PIN_A2  //                    (30)
.................... //                     PIN_A3  //                    (31)
.................... #define BTCM           PIN_A8  //                    (32)
.................... //                     PIN_B4  //                    (33)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... //                     PIN_A4  //                    (34)
.................... #define COMM           PIN_A9  //                    (35)
.................... #pin_select U1TX =     PIN_C3  //                    (36)
.................... #pin_select U1RX =     PIN_C4  //                    (37)
.................... #define SS             PIN_C5  //                    (38)
.................... //                     VSS     //                    (39)
.................... //                     VDD     //                    (40)
.................... #pin_select SDI1 =     PIN_B5  //                    (41)
.................... #pin_select SCK1OUT=   PIN_B6  //                    (42)
.................... #pin_select SDO1 =     PIN_B7  //                    (43)
.................... //#define SCL1         PIN_B8  //                    (44)
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... 
.................... #endif
.................... 
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #pin_select OC2 = BUZZER
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP_Init(void); //Inicializa las frecuencias de los beeps y la separaciÃ³n entre ellos
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... void BEEP(unsigned int8); //Realiza n beeps
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __BEEP_H
.................... 
.................... 
.................... int PPM; // variable global
.................... 
.................... void algoritmo();
.................... void init_algoritmo(void);
.................... // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif // __ALGORITMO_H
.................... 
.................... 
.................... //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.................... #endif
.................... 
.................... 
.................... void main(void)
006AC:  MOV     #3F70,W15
006AE:  MOV     #3FFF,W0
006B0:  MOV     W0,20
006B2:  NOP     
006B4:  MOV     #4444,W0
006B6:  MOV     W0,A6
006B8:  MOV     #4444,W0
006BA:  MOV     W0,B0
006BC:  BSET.B  81.7
006BE:  DISI    #6
006C0:  MOV     #742,W1
006C2:  MOV     #46,W2
006C4:  MOV     #57,W3
006C6:  MOV.B   W2L,[W1]
006C8:  MOV.B   W3L,[W1]
006CA:  BCLR.B  742.6
006CC:  MOV     #3F14,W0
006CE:  MOV     W0,6A4
006D0:  MOV     #3F05,W0
006D2:  MOV     W0,6A8
006D4:  MOV     #708,W0
006D6:  MOV     W0,6C6
006D8:  MOV     #300,W0
006DA:  MOV     W0,6D2
006DC:  MOV     #13,W0
006DE:  MOV     W0,6D6
006E0:  DISI    #6
006E2:  MOV     #742,W1
006E4:  MOV     #46,W2
006E6:  MOV     #57,W3
006E8:  MOV.B   W2L,[W1]
006EA:  MOV.B   W3L,[W1]
006EC:  BSET.B  742.6
006EE:  MOV     #8000,W4
006F0:  MOV     W4,220
006F2:  MOV     #400,W4
006F4:  MOV     W4,222
006F6:  BCLR.B  220.3
006F8:  MOV     #1,W4
006FA:  MOV     W4,228
006FC:  CLR     880
006FE:  CLR     882
00700:  BCLR.B  2CD.1
00702:  BSET.B  207.7
00704:  BSET.B  207.5
00706:  BSET.B  206.6
00708:  BCLR.B  207.3
0070A:  BCLR.B  206.7
0070C:  BCLR.B  207.0
0070E:  BCLR.B  207.1
00710:  BCLR.B  207.2
00712:  CLR     20A
00714:  MOV     #2,W4
00716:  MOV     W4,204
00718:  CLR     888
0071A:  SETM    32C
0071C:  CLR     896
.................... {
....................   //DeclaraciÃ³n e inicializaciÃ³n de variables
.................... 
....................   // unsigned int16 analogsignal;    // SeÃ±al analÃ³gica leÃ­da del ADC
....................   // unsigned int16 frecuencia;      // Frecuencia cardÃ­aca
....................   // unsigned int16 Sector;          // Sector de la SD
....................   // unsigned int1 filedetected;
....................   char ppm_string[9];
....................   int datos_flag;
....................   int ppm_anterior=0;
....................   int peligro_flag, peligro_flag_ant;
.................... 
....................   // -----------------------------------------
.................... 
....................   // 1. InicializaciÃ³n de mÃ³dulos (BT, LCD, ADC)
....................   //      encontrar fichero de datos anterior o crear uno nuevo
....................   // 2. Menu de bienvenida y espera a BTOK
....................   // 3. Bucle de programa. Finalizar al pulsar BTOK
....................   //      3.1 Muestreo de seÃ±al (ADC)
....................   //      3.2 EnvÃ­o de los datos por bluetooth
....................   //      3.3 Guardar datos en SD (formato??)
....................   //      3.4 CÃ¡lculo de la frecuencia
....................   //      3.5 Display frecuencia en LCD
....................   //      3.6 Generar beep de acuerdo a la frecuencia (no n beeps, beep con corazÃ³n). Interrupcion cuando se encuentra pico
....................   //      3.7 Generar una flag si la frecuencia es X para activar interrupciones
.................... 
....................   //1.
....................   //init_BT();
....................   lcdi2cinit();
0071E:  CALL    2CA
....................   BEEP_Init();
*
00722:  CALL    352
.................... 
....................   //sd_init();
....................   //sd_estructura();
....................   //initFAT();
.................... 
.................... 
....................   //carga config para leer el primer sector del fichero
....................   //filedetected=encontrar_fichero();
.................... 
....................   // Comprobar si existe el fichero y dar error si no existe
....................   // if(!filedetected)
....................   // {
....................   //
....................   //   LCD_command(_CLEAR_DISPLAY);
....................   //   LCD_cursor_at(0,0);
....................   //   char errorfichero[]="File not found";
....................   //   LCD_write(errorfichero);
....................   //
....................   //   while(1)
....................   //   {
....................   //     //softbrick
....................   //   }
....................   // }
.................... 
....................   //2. Menu bienvenida
....................   initmenu();
*
00726:  CALL    3E8
....................   while(input(BTOK))
*
0072A:  BSET.B  2C0.7
0072C:  NOP     
0072E:  BTSS.B  2C2.7
00730:  BRA     73C
....................   {
....................     delay_ms(50);
00732:  MOV     #32,W0
00734:  CALL    26E
*
00738:  GOTO    72A
....................   }
....................   while(!input(BTOK)) // para evitar rebotes y finalizar el programa
*
0073C:  BSET.B  2C0.7
0073E:  NOP     
00740:  BTSC.B  2C2.7
00742:  BRA     74E
....................   {
....................     delay_ms(50);
00744:  MOV     #32,W0
00746:  CALL    26E
*
0074A:  GOTO    73C
....................   }
....................   //Inicializar algoritmo, adc y timer2 a 250 Hz
....................   adcinit();
*
0074E:  CALL    470
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_64, 6000); // configurar segÃºn DELAY (10 Hz para debug)
*
00752:  CLR     110
00754:  MOV     #1770,W4
00756:  MOV     W4,10C
00758:  MOV     #8020,W4
0075A:  MOV     W4,110
....................   init_algoritmo();
0075C:  CALL    482
.................... 
....................   //Mostrar pantalla de frecuencia
....................   LCD_command(_CLEAR_DISPLAY);
*
00760:  MOV.B   #1,W0L
00762:  MOV.B   W0L,904
00764:  CALL    296
....................   display_frecuencia();
*
00768:  CALL    4BE
.................... 
....................   datos_flag=1;
*
0076C:  MOV     #1,W4
0076E:  MOV     W4,894
....................   peligro_flag_ant=0;
00770:  CLR     89A
....................   PPM=70;
00772:  MOV     #46,W4
00774:  MOV     W4,886
.................... 
....................   delay_ms(4); // que al menos se ejecute el algoritmo una vez para no tener valores raros
00776:  REPEAT  #3992
00778:  NOP     
.................... 
....................   //3. Bucle del programa
....................   while(input(BTOK))
0077A:  BSET.B  2C0.7
0077C:  NOP     
0077E:  BTSS.B  2C2.7
00780:  BRA     838
....................   {
....................     //3.1 Ejecutar algoritmo cuando se active la flag (ISR)
.................... 
.................... 
....................     //3.2 Generar alarmas si es necesario
....................     if(PPM>=250 || PPM<=35)
00782:  MOV     886,W4
00784:  MOV     #FA,W3
00786:  CP      W3,W4
00788:  BRA     GT,78C
0078A:  BRA     794
0078C:  MOV     886,W4
0078E:  MOV     #23,W3
00790:  CP      W3,W4
00792:  BRA     LT,7E2
....................     {
....................       if(peligro_flag_ant==0)
00794:  CP0     89A
00796:  BRA     NZ,7DA
....................       {
....................         LCD_command(_CLEAR_DISPLAY);
00798:  MOV.B   #1,W0L
0079A:  MOV.B   W0L,904
0079C:  CALL    296
....................         LCD_cursor_at(0,0);
*
007A0:  CLR.B   8FE
007A2:  CLR.B   8FF
007A4:  CALL    36C
....................         char peligro[]="PULSACIONES ANOMALAS";
*
007A8:  MOV     #5550,W4
007AA:  MOV     W4,89C
007AC:  MOV     #534C,W4
007AE:  MOV     W4,89E
007B0:  MOV     #4341,W4
007B2:  MOV     W4,8A0
007B4:  MOV     #4F49,W4
007B6:  MOV     W4,8A2
007B8:  MOV     #454E,W4
007BA:  MOV     W4,8A4
007BC:  MOV     #2053,W4
007BE:  MOV     W4,8A6
007C0:  MOV     #4E41,W4
007C2:  MOV     W4,8A8
007C4:  MOV     #4D4F,W4
007C6:  MOV     W4,8AA
007C8:  MOV     #4C41,W4
007CA:  MOV     W4,8AC
007CC:  MOV     #5341,W4
007CE:  MOV     W4,8AE
007D0:  CLR.B   8B0
....................         LCD_write(peligro);
007D2:  MOV     #89C,W4
007D4:  MOV     W4,8FE
007D6:  CALL    38C
....................       }
....................       peligro_flag=1;
*
007DA:  MOV     #1,W4
007DC:  MOV     W4,898
....................     }
007DE:  GOTO    7F4
....................     else
....................     {
....................       if(peligro_flag_ant)
*
007E2:  CP0     89A
007E4:  BRA     Z,7F2
....................       {
....................         LCD_command(_CLEAR_DISPLAY);
007E6:  MOV.B   #1,W0L
007E8:  MOV.B   W0L,904
007EA:  CALL    296
....................         display_frecuencia();
*
007EE:  CALL    4BE
....................       }
....................       peligro_flag=0;
*
007F2:  CLR     898
....................     }
.................... 
....................     //3.3 Enviar datos y escribir cada x segundos
....................     if(datos_flag)
007F4:  CP0     894
007F6:  BRA     Z,82C
....................     {
....................       //enviar_datos();
....................       //escribir_sd();
.................... 
....................       //mostrar por pantalla
....................       if(peligro_flag==0)
007F8:  CP0     898
007FA:  BRA     NZ,82C
....................       {
....................         if(PPM!=ppm_anterior)
007FC:  MOV     886,W0
007FE:  CP      896
00800:  BRA     Z,82C
....................         {
....................           sprintf(ppm_string,"%d  ",PPM);
00802:  MOV     #88A,W4
00804:  MOV     W4,888
00806:  MOV     886,W0
00808:  MOV     #0,W4
0080A:  CALL    57C
*
0080E:  MOV.B   #20,W0L
00810:  CALL    56E
*
00814:  MOV.B   #20,W0L
00816:  CALL    56E
....................           LCD_cursor_at(0,16);
*
0081A:  CLR.B   8FE
0081C:  MOV.B   #10,W0L
0081E:  MOV.B   W0L,8FF
00820:  CALL    36C
....................           LCD_write(ppm_string);
*
00824:  MOV     #88A,W4
00826:  MOV     W4,8FE
00828:  CALL    38C
....................         }
....................       }
....................     }
....................     //fin del bucle
....................     peligro_flag_ant=peligro_flag;
*
0082C:  PUSH    898
0082E:  POP     89A
....................     ppm_anterior=PPM;
00830:  PUSH    886
00832:  POP     896
00834:  GOTO    77A
....................   }
.................... 
....................   LCD_command(_CLEAR_DISPLAY);
*
00838:  MOV.B   #1,W0L
0083A:  MOV.B   W0L,904
0083C:  CALL    296
....................   LCD_cursor_at(0,0);
*
00840:  CLR.B   8FE
00842:  CLR.B   8FF
00844:  CALL    36C
....................   char fin[]="Fin del programa";
*
00848:  MOV     #6946,W4
0084A:  MOV     W4,8B2
0084C:  MOV     #206E,W4
0084E:  MOV     W4,8B4
00850:  MOV     #6564,W4
00852:  MOV     W4,8B6
00854:  MOV     #206C,W4
00856:  MOV     W4,8B8
00858:  MOV     #7270,W4
0085A:  MOV     W4,8BA
0085C:  MOV     #676F,W4
0085E:  MOV     W4,8BC
00860:  MOV     #6172,W4
00862:  MOV     W4,8BE
00864:  MOV     #616D,W4
00866:  MOV     W4,8C0
00868:  CLR.B   8C2
....................   LCD_write(fin);
0086A:  MOV     #8B2,W4
0086C:  MOV     W4,8FE
0086E:  CALL    38C
....................   //fin de programa
.................... }
.................... 
*
00872:  BRA     872
.................... 
.................... // correo para Julio
.................... 
.................... /*
.................... preguntar si el algoritmo necesita un buffer o puede trabajar a tiempo real.
.................... no nos muestra las pulsaciones y no lo entendemos bien
.................... el resto esta solucionado mas o menos
.................... 
.................... amplificador del eec. saca unsigned desde 0 o simplemente el valor de mv
.................... 
.................... canal 4???
.................... */
.................... 

Configuration Fuses:
   Word  1L: 00CF   NOWRTB NOBSS NORBS
          H: 0000  
   Word  2L: 00CF   NOWRTSS NOSSS NORSS
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0007   FRC_PS NOIESO
          H: 0000  
   Word  5L: 0063   NOPR OSCIO IOL1WAY CKSNOFSM
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00F7   PUT128 NOALTI2C1 LPOL_HIGH HPOL_HIGH NOPWMPIN
          H: 0000  
   Word  8L: 0043   ICSP1 NOJTAG DEBUG
          H: 0000  

   Some fuses have been forced to be compatible with the ICD debugger.
